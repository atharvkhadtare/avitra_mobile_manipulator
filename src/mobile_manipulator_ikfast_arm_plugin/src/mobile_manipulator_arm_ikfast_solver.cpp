/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-02-06 16:26:10.767211
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.082)*x7);
x11=((0.00158999799016431)*x8);
x12=((0.999998735952397)*x9);
x13=((1.0)*x0);
x14=((0.202)*x7);
x15=((0.999998735952397)*x8);
x16=((0.082)*x0);
x17=((0.02)*x7);
x18=((0.02)*x0);
x19=((0.202)*x0);
x20=((0.186)*x2);
x21=((0.00158999799016431)*x9);
x22=(x2*x4);
x23=(x1*x3);
x24=(x1*x2);
x25=(x3*x4);
x26=((((-1.0)*x23))+x22);
x27=(x24+x25);
x28=(x26*x5);
x29=(x27*x6);
x30=(((x5*((((x25*x7))+((x24*x7))))))+((x6*((((x23*x7))+(((-1.0)*x22*x7)))))));
IkReal x32=((1.0)*x13);
x31=(((x5*(((((-1.0)*x24*x32))+(((-1.0)*x25*x32))))))+((x6*((((x0*x22))+(((-1.0)*x23*x32)))))));
eetrans[0]=(((x6*((((x18*x25))+((x18*x24))))))+((x0*x20))+((x19*x24))+((x19*x25))+((x5*((((x18*x22))+(((-1.0)*x18*x23))))))+((x6*(((((-1.0)*x16*x22))+((x16*x23))))))+((x5*((((x16*x25))+((x16*x24)))))));
IkReal x33=((1.0)*x17);
IkReal x34=((1.0)*x10);
IkReal x35=((1.0)*x14);
eetrans[1]=(((x5*(((((-1.0)*x24*x34))+(((-1.0)*x25*x34))))))+((x6*(((((-1.0)*x24*x33))+(((-1.0)*x25*x33))))))+((x6*(((((-1.0)*x23*x34))+((x10*x22))))))+((x5*(((((-1.0)*x22*x33))+((x17*x23))))))+(((-1.0)*x24*x35))+(((-1.0)*x20*x7))+(((-1.0)*x25*x35)));
eetrans[2]=((0.06)+((x6*(((((0.02)*x23))+(((-0.02)*x22))))))+(((0.186)*x3))+(((-0.202)*x22))+((x5*(((((0.082)*x23))+(((-0.082)*x22))))))+((x6*(((((-0.082)*x24))+(((-0.082)*x25))))))+(((0.202)*x23))+((x5*(((((0.02)*x25))+(((0.02)*x24)))))));
eerot[0]=((((-1.0)*x12*x7))+((x21*x31))+((x15*x31))+((x11*x7)));
eerot[1]=(((x0*x11))+(((-1.0)*x0*x12))+((x21*x30))+((x15*x30)));
eerot[2]=(((x8*(((((0.999998735952397)*x28))+(((0.999998735952397)*x29))))))+((x9*(((((0.00158999799016431)*x29))+(((0.00158999799016431)*x28)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.06)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x37 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x37.valid){
continue;
}
IkReal x36=x37.value;
j0array[0]=((-1.0)*x36);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x36)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( ((((r01*sj0))+((cj0*r00)))) < -1-IKFAST_SINCOS_THRESH || ((((r01*sj0))+((cj0*r00)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x38=IKasin((((r01*sj0))+((cj0*r00))));
j4array[0]=((0.00158999866010903)+(((-1.0)*x38)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.1431826522499)+x38);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x39=py*py;
IkReal x40=pz*pz;
IkReal x41=px*px;
IkReal x42=((0.270837304884896)*r02);
IkReal x43=((0.0656110499719259)*r02);
IkReal x44=((0.00358387422796182)*r02);
IkReal x45=((0.0128618843346435)*r02);
IkReal x46=(r00*sj0);
IkReal x47=((2.0)*r02);
IkReal x48=(cj0*r01);
IkReal x49=((4.0)*pz);
IkReal x50=(py*r01);
IkReal x51=((8.0)*pz);
IkReal x52=(pz*r02);
IkReal x53=(px*r00);
IkReal x54=(cj0*py);
IkReal x55=((0.186007860752386)*pz);
IkReal x56=((0.698632229084784)*pz);
IkReal x57=(px*sj0);
IkReal x58=((0.789367770915216)*pz);
IkReal x59=((1.50663222908478)*x53);
IkReal x60=((0.0656110499719259)*x46);
IkReal x61=((1.50663222908478)*x50);
IkReal x62=((1.50663222908478)*x52);
IkReal x63=((0.0656110499719259)*x48);
IkReal x64=((0.0178346951151039)*x48);
IkReal x65=((0.186007860752386)*x53);
IkReal x66=((0.0178346951151039)*x46);
IkReal x67=((0.186007860752386)*x50);
IkReal x68=((0.186007860752386)*x52);
IkReal x69=((0.000957884334643459)*x48);
IkReal x70=((0.000957884334643459)*x46);
IkReal x71=((0.0186322290847838)*x52);
IkReal x72=((0.0186322290847838)*x50);
IkReal x73=((0.0186322290847838)*x53);
IkReal x74=((0.00358387422796182)*x46);
IkReal x75=((0.00358387422796182)*x48);
IkReal x76=((4.0)*x40);
IkReal x77=(r02*x57);
IkReal x78=(r02*x54);
IkReal x79=((2.0)*x39);
IkReal x80=((2.0)*x40);
IkReal x81=((2.0)*x41);
IkReal x82=((4.0)*x41);
IkReal x83=((4.0)*x39);
IkReal x84=(x49*x50);
IkReal x85=((0.186007860752386)*x78);
IkReal x86=(x40*x47);
IkReal x87=(x49*x53);
IkReal x88=(x46*x55);
IkReal x89=((0.186007860752386)*x77);
IkReal x90=(x48*x55);
IkReal x91=(x39*x47);
IkReal x92=(x41*x47);
IkReal x93=(x48*x58);
IkReal x94=((0.789367770915216)*x77);
IkReal x95=(x46*x58);
IkReal x96=((0.789367770915216)*x78);
IkReal x97=(x51*x53);
IkReal x98=(x50*x51);
IkReal x99=(r02*x76);
IkReal x100=(r02*x82);
IkReal x101=(r02*x83);
IkReal x102=(x48*x56);
IkReal x103=((0.698632229084784)*x77);
IkReal x104=((0.698632229084784)*x78);
IkReal x105=(x46*x56);
IkReal x106=((4.0)*x50*x57);
IkReal x107=(x49*x77);
IkReal x108=(x46*x81);
IkReal x109=(x48*x80);
IkReal x110=(x48*x81);
IkReal x111=(x49*x78);
IkReal x112=(x48*x79);
IkReal x113=(x46*x79);
IkReal x114=(x46*x80);
IkReal x115=((4.0)*x53*x54);
IkReal x116=(x48*x76);
IkReal x117=(x46*x82);
IkReal x118=((8.0)*x50*x57);
IkReal x119=(x51*x77);
IkReal x120=(x48*x82);
IkReal x121=(x46*x83);
IkReal x122=((8.0)*x53*x54);
IkReal x123=(x46*x76);
IkReal x124=(x51*x78);
IkReal x125=(x48*x83);
IkReal x126=(x42+x60);
IkReal x127=(x74+x45);
IkReal x128=(x43+x66);
IkReal x129=(x44+x69);
IkReal x130=(x100+x101);
IkReal x131=(x88+x85);
IkReal x132=(x91+x92);
IkReal x133=(x89+x90);
IkReal x134=(x93+x94);
IkReal x135=(x104+x105);
IkReal x136=(x95+x96);
IkReal x137=(x102+x103);
IkReal x138=(x59+x61+x62);
IkReal x139=(x73+x72+x71);
IkReal x140=(x65+x67+x68);
IkReal x141=(x86+x87+x84);
IkReal x142=(x99+x98+x97);
IkReal x143=(x120+x117+x116+x119+x118);
IkReal x144=(x113+x112+x111+x115+x114);
IkReal x145=(x110+x108+x109+x106+x107);
IkReal x146=(x124+x125+x122+x123+x121);
IkReal x147=((((-0.0356693902302078)*r02))+x142+(((-1.0)*x130))+(((-0.131222099943852)*x48))+(((0.131222099943852)*x46)));
IkReal x148=((((-0.00716774845592364)*x46))+(((0.00716774845592364)*x48))+x142+(((-0.00191576866928692)*r02))+(((-1.0)*x130)));
IkReal x149=((((-1.0)*x141))+(((-1.0)*x126))+x131+x132+x138+(((-1.0)*x133))+x63);
IkReal x150=(x141+x131+x138+x126+(((-1.0)*x132))+(((-1.0)*x133))+(((-1.0)*x63)));
IkReal x151=((((-1.0)*x127))+x141+x131+x139+(((-1.0)*x132))+(((-1.0)*x133))+x75);
IkReal x152=((((-1.0)*x141))+(((-1.0)*x75))+x131+x132+x139+x127+(((-1.0)*x133)));
IkReal x153=((((-1.0)*x143))+(((-0.541674609769792)*x46))+(((0.131222099943852)*r02))+x146+(((0.541674609769792)*x48)));
IkReal x154=((((-1.0)*x146))+(((-0.0257237686692869)*x46))+x143+(((0.00716774845592364)*r02))+(((0.0257237686692869)*x48)));
IkReal x155=((((-1.0)*x140))+(((-1.0)*x145))+x144+x134+x128+(((-1.0)*x136))+(((-1.0)*x64)));
IkReal x156=((((-1.0)*x144))+(((-1.0)*x140))+(((-1.0)*x128))+x145+x134+(((-1.0)*x136))+x64);
IkReal x157=((((-1.0)*x145))+(((-1.0)*x129))+x140+x144+x137+(((-1.0)*x135))+x70);
IkReal x158=((((-1.0)*x144))+(((-1.0)*x70))+x140+x145+x137+x129+(((-1.0)*x135)));
IkReal gconst40=x149;
IkReal gconst41=x153;
IkReal gconst42=x150;
IkReal gconst43=x155;
IkReal gconst44=x147;
IkReal gconst45=x156;
IkReal gconst46=x149;
IkReal gconst47=x153;
IkReal gconst48=x150;
IkReal gconst49=x155;
IkReal gconst50=x147;
IkReal gconst51=x156;
IkReal gconst52=x157;
IkReal gconst53=x148;
IkReal gconst54=x158;
IkReal gconst55=x151;
IkReal gconst56=x154;
IkReal gconst57=x152;
IkReal gconst58=x157;
IkReal gconst59=x148;
IkReal gconst60=x158;
IkReal gconst61=x151;
IkReal gconst62=x154;
IkReal gconst63=x152;
IkReal x159=(gconst42*gconst43);
IkReal x160=(gconst45*gconst46);
IkReal x161=((1.0)*gconst52);
IkReal x162=(gconst46*gconst57);
IkReal x163=(gconst41*gconst62);
IkReal x164=(gconst53*gconst57);
IkReal x165=(gconst50*gconst58);
IkReal x166=(gconst54*gconst55);
IkReal x167=((1.0)*gconst59);
IkReal x168=(gconst48*gconst61);
IkReal x169=(gconst40*gconst57);
IkReal x170=(gconst50*gconst53);
IkReal x171=(gconst43*gconst54);
IkReal x172=(gconst46*gconst51);
IkReal x173=(gconst42*gconst47);
IkReal x174=(gconst56*gconst61);
IkReal x175=(gconst41*gconst45);
IkReal x176=(gconst45*gconst53);
IkReal x177=((1.0)*gconst60);
IkReal x178=(gconst42*gconst55);
IkReal x179=(gconst44*gconst49);
IkReal x180=(gconst54*gconst59);
IkReal x181=((1.0)*gconst54);
IkReal x182=(gconst46*gconst62);
IkReal x183=((1.0)*gconst40);
IkReal x184=(gconst41*gconst50);
IkReal x185=(gconst46*gconst63);
IkReal x186=(gconst58*gconst63);
IkReal x187=(gconst58*gconst62);
IkReal x188=(gconst45*gconst52);
IkReal x189=(gconst48*gconst49);
IkReal x190=(gconst51*gconst58);
IkReal x191=(gconst49*gconst60);
IkReal x192=(gconst41*gconst57);
IkReal x193=(gconst42*gconst59);
IkReal x194=(gconst49*gconst56);
IkReal x195=(gconst44*gconst61);
IkReal x196=(gconst46*gconst50);
IkReal x197=(gconst52*gconst57);
IkReal x198=(gconst47*gconst54);
IkReal x199=(gconst40*gconst45);
IkReal x200=(gconst60*gconst61);
IkReal x201=(gconst53*gconst62);
IkReal x202=((1.0)*x189);
IkReal x203=((1.0)*gconst42*gconst56);
IkReal x204=((1.0)*gconst47*gconst61);
IkReal x205=((1.0)*gconst42*gconst44);
IkReal x206=((1.0)*gconst47*gconst49);
op[0]=((((-1.0)*gconst61*x164*x167))+((x174*x180))+((x164*x187))+(((-1.0)*gconst61*x166*x177))+((x166*x186))+((x197*x200))+(((-1.0)*gconst57*x161*x186))+(((-1.0)*gconst56*x181*x187)));
op[1]=((((-1.0)*gconst61*x167*x192))+((x176*x187))+((x168*x197))+((x178*x186))+(((-1.0)*x187*x203))+(((-1.0)*gconst63*x161*x162))+((x180*x195))+((x180*x194))+(((-1.0)*gconst61*x167*x176))+(((-1.0)*x166*x168))+(((-1.0)*gconst49*x164*x167))+((x166*x190))+((x174*x193))+((x174*x198))+((x188*x200))+((x162*x201))+((x166*x185))+(((-1.0)*x164*x204))+(((-1.0)*gconst61*x177*x178))+((x164*x165))+((x169*x200))+(((-1.0)*gconst57*x161*x190))+(((-1.0)*gconst56*x165*x181))+((x171*x186))+((x191*x197))+(((-1.0)*gconst56*x181*x182))+((gconst57*gconst58*x163))+(((-1.0)*gconst61*x171*x177))+(((-1.0)*gconst49*x166*x177))+(((-1.0)*gconst44*x181*x187))+(((-1.0)*x169*x186))+(((-1.0)*gconst45*x161*x186)));
op[2]=((((-1.0)*gconst45*x161*x190))+(((-1.0)*gconst61*x159*x177))+(((-1.0)*gconst49*x167*x192))+(((-1.0)*x192*x204))+((x193*x194))+((x193*x195))+((x178*x185))+((x162*x170))+((x168*x188))+((x169*x191))+(((-1.0)*x187*x205))+((x178*x190))+(((-1.0)*gconst61*x167*x175))+((x168*x169))+((x162*x163))+((x179*x180))+(((-1.0)*gconst45*x183*x186))+((x188*x191))+(((-1.0)*gconst49*x171*x177))+(((-1.0)*x166*x202))+((x173*x174))+((x189*x197))+(((-1.0)*x165*x203))+(((-1.0)*x164*x206))+(((-1.0)*gconst63*x162*x183))+((x166*x172))+(((-1.0)*x168*x178))+(((-1.0)*x168*x171))+((x195*x198))+((gconst45*gconst58*x163))+((x165*x192))+(((-1.0)*gconst51*x161*x162))+((x194*x198))+((x171*x185))+((x165*x176))+(((-1.0)*gconst56*x181*x196))+((x171*x190))+(((-1.0)*x176*x204))+(((-1.0)*gconst49*x167*x176))+(((-1.0)*x182*x203))+((x160*x201))+(((-1.0)*gconst44*x181*x182))+((x199*x200))+(((-1.0)*gconst63*x160*x161))+(((-1.0)*gconst49*x177*x178))+(((-1.0)*gconst44*x165*x181))+(((-1.0)*x169*x190))+((x159*x186)));
op[3]=((((-1.0)*x175*x204))+((x168*x199))+((x169*x189))+(((-1.0)*gconst51*x162*x183))+(((-1.0)*x192*x206))+((x162*x184))+(((-1.0)*gconst49*x159*x177))+((x179*x198))+((x179*x193))+(((-1.0)*gconst63*x160*x183))+(((-1.0)*gconst45*x183*x190))+((x173*x194))+((x173*x195))+((x172*x178))+((x188*x189))+(((-1.0)*gconst51*x160*x161))+(((-1.0)*x165*x205))+(((-1.0)*x178*x202))+((x165*x175))+((x171*x172))+((x191*x199))+(((-1.0)*x159*x168))+(((-1.0)*x171*x202))+(((-1.0)*x176*x206))+(((-1.0)*gconst49*x167*x175))+(((-1.0)*x182*x205))+(((-1.0)*x196*x203))+(((-1.0)*gconst44*x181*x196))+((x160*x163))+((x159*x190))+((x160*x170))+((x159*x185)));
op[4]=((((-1.0)*x175*x206))+(((-1.0)*x159*x202))+((x173*x179))+((x189*x199))+(((-1.0)*gconst51*x160*x183))+((x159*x172))+(((-1.0)*x196*x205))+((x160*x184)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal(((((((((0.753316114542392)*py*r01))+(((0.0930039303761931)*pz*r02*sj2))+(((0.0930039303761931)*pz*r00*sj0))+(((0.753316114542392)*pz*r02))+(((-0.0930039303761931)*px*r02*sj0))+(((0.349316114542392)*cj0*pz*r01*sj2))+(((-0.349316114542392)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*cj2*px*r02*sj0))+(((0.0930039303761931)*py*r01*sj2))+(((0.753316114542392)*cj2*pz*r02))+(((0.753316114542392)*px*r00))+(((0.0930039303761931)*px*r00*sj2))+(((0.0930039303761931)*cj2*pz*r00*sj0))+(((0.349316114542392)*px*r02*sj0*sj2))+(((0.753316114542392)*cj2*py*r01))+(((0.0930039303761931)*cj0*cj2*py*r02))+(((0.753316114542392)*cj2*px*r00))+(((-0.349316114542392)*cj0*py*r02*sj2))+(((-0.0930039303761931)*cj0*cj2*pz*r01))+(((0.0930039303761931)*cj0*py*r02))+(((-0.0930039303761931)*cj0*pz*r01))))*((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00891734755755194)*r00*sj0*sj2))+(((0.00179193711398091)*cj0*r01))+(((2.0)*px*pz*r00))+(((-0.00891734755755194)*cj0*r01*sj2))+(((-0.00643094216732173)*r02))+((cj2*r02*(py*py)))+(((-0.00179193711398091)*cj0*cj2*r01))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.00643094216732173)*cj2*r02))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00179193711398091)*r00*sj0))+(((0.00179193711398091)*cj2*r00*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))))+(((((((0.0930039303761931)*pz*r02*sj2))+(((-0.0930039303761931)*cj0*py*r02))+(((0.00931611454239191)*cj2*pz*r02))+(((-0.0930039303761931)*cj2*px*r02*sj0))+(((0.00931611454239191)*cj2*px*r00))+(((0.0930039303761931)*py*r01*sj2))+(((0.0930039303761931)*px*r00*sj2))+(((0.0930039303761931)*cj2*pz*r00*sj0))+(((0.394683885457608)*cj0*py*r02*sj2))+(((-0.394683885457608)*cj0*pz*r01*sj2))+(((-0.00931611454239191)*px*r00))+(((0.0930039303761931)*cj0*cj2*py*r02))+(((-0.394683885457608)*px*r02*sj0*sj2))+(((0.394683885457608)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*pz*r00*sj0))+(((-0.0930039303761931)*cj0*cj2*pz*r01))+(((-0.00931611454239191)*pz*r02))+(((0.0930039303761931)*cj0*pz*r01))+(((0.0930039303761931)*px*r02*sj0))+(((-0.00931611454239191)*py*r01))+(((0.00931611454239191)*cj2*py*r01))))*((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-0.000478942167321729)*cj0*r01*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((-0.0328055249859629)*r00*sj0))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.000478942167321729)*r00*sj0*sj2))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-0.135418652442448)*r02))+(((0.0328055249859629)*cj0*cj2*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.0328055249859629)*cj0*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.135418652442448)*cj2*r02))+(((-0.0328055249859629)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2)))))))),IkReal(((((((((0.349316114542392)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*cj0*py*r02))+(((-0.753316114542392)*cj2*py*r01))+(((-0.753316114542392)*cj2*px*r00))+(((-0.349316114542392)*cj0*pz*r01*sj2))+(((0.0930039303761931)*cj0*cj2*pz*r01))+(((-0.753316114542392)*px*r00))+(((-0.753316114542392)*cj2*pz*r02))+(((0.0930039303761931)*cj2*px*r02*sj0))+(((-0.753316114542392)*pz*r02))+(((-0.0930039303761931)*pz*r02*sj2))+(((-0.0930039303761931)*pz*r00*sj0))+(((-0.0930039303761931)*cj2*pz*r00*sj0))+(((0.0930039303761931)*cj0*pz*r01))+(((-0.349316114542392)*px*r02*sj0*sj2))+(((0.349316114542392)*cj0*py*r02*sj2))+(((0.0930039303761931)*px*r02*sj0))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.0930039303761931)*px*r00*sj2))+(((-0.0930039303761931)*cj0*cj2*py*r02))+(((-0.753316114542392)*py*r01))))*(((((-1.0)*r00*sj0*(pz*pz)))+(((-0.00891734755755194)*r02*sj2))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((-0.00643094216732173)*cj0*cj2*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0328055249859629)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((-2.0)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((0.00643094216732173)*cj0*r01))+(((0.0328055249859629)*r00*sj0*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((0.00643094216732173)*cj2*r00*sj0))+((cj0*cj2*r01*(py*py)))+(((-0.00643094216732173)*r00*sj0))))))+(((((((0.0930039303761931)*pz*r00*sj0))+(((-0.394683885457608)*cj0*py*r02*sj2))+(((-0.394683885457608)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*px*r02*sj0))+(((0.0930039303761931)*cj0*cj2*pz*r01))+(((-0.00931611454239191)*cj2*pz*r02))+(((0.394683885457608)*px*r02*sj0*sj2))+(((-0.00931611454239191)*cj2*py*r01))+(((-0.00931611454239191)*cj2*px*r00))+(((0.00931611454239191)*pz*r02))+(((0.00931611454239191)*py*r01))+(((0.0930039303761931)*cj2*px*r02*sj0))+(((0.394683885457608)*cj0*pz*r01*sj2))+(((-0.0930039303761931)*pz*r02*sj2))+(((0.0930039303761931)*cj0*py*r02))+(((-0.0930039303761931)*cj2*pz*r00*sj0))+(((0.00931611454239191)*px*r00))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.0930039303761931)*cj0*pz*r01))+(((-0.0930039303761931)*px*r00*sj2))+(((-0.0930039303761931)*cj0*cj2*py*r02))))*(((((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00179193711398091)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.135418652442448)*cj0*cj2*r01))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((-0.000478942167321729)*r02*sj2))+(((2.0)*cj0*cj2*px*py*r00))+(((0.135418652442448)*cj0*r01))+(((0.0328055249859629)*r02))+(((-0.135418652442448)*r00*sj0))+((cj0*r01*(py*py)))+(((-0.00179193711398091)*r00*sj0*sj2))+(((-0.135418652442448)*cj2*r00*sj0))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x207.valid){
continue;
}
CheckValue<IkReal> x208=IKPowWithIntegerCheck(IKsign((((((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-0.000478942167321729)*cj0*r01*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((-0.0328055249859629)*r00*sj0))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.000478942167321729)*r00*sj0*sj2))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-0.135418652442448)*r02))+(((0.0328055249859629)*cj0*cj2*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.0328055249859629)*cj0*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.135418652442448)*cj2*r02))+(((-0.0328055249859629)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(((((-1.0)*r00*sj0*(pz*pz)))+(((-0.00891734755755194)*r02*sj2))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((-0.00643094216732173)*cj0*cj2*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0328055249859629)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((-2.0)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((0.00643094216732173)*cj0*r01))+(((0.0328055249859629)*r00*sj0*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((0.00643094216732173)*cj2*r00*sj0))+((cj0*cj2*r01*(py*py)))+(((-0.00643094216732173)*r00*sj0))))))+(((((((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.00179193711398091)*r00*sj0))+(((1.0)*cj2*r02*(pz*pz)))+(((0.00891734755755194)*cj0*r01*sj2))+(((1.0)*r00*sj0*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((1.0)*r02*(py*py)))+(((-0.00179193711398091)*cj2*r00*sj0))+(((2.0)*cj2*px*pz*r00))+(((0.00643094216732173)*r02))+(((1.0)*cj0*r01*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((1.0)*cj0*r01*sj2*(px*px)))+(((-0.00643094216732173)*cj2*r02))+(((1.0)*r02*(px*px)))+(((2.0)*cj2*py*pz*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-2.0)*px*pz*r00))+(((2.0)*px*py*r01*sj0*sj2))+(((0.00179193711398091)*cj0*cj2*r01))+(((-2.0)*py*pz*r01))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.00179193711398091)*cj0*r01))+(((-0.00891734755755194)*r00*sj0*sj2))+(((-1.0)*r02*(pz*pz)))))*(((((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00179193711398091)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.135418652442448)*cj0*cj2*r01))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((-0.000478942167321729)*r02*sj2))+(((2.0)*cj0*cj2*px*py*r00))+(((0.135418652442448)*cj0*r01))+(((0.0328055249859629)*r02))+(((-0.135418652442448)*r00*sj0))+((cj0*r01*(py*py)))+(((-0.00179193711398091)*r00*sj0*sj2))+(((-0.135418652442448)*cj2*r00*sj0))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py))))))))),-1);
if(!x208.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x207.value)+(((1.5707963267949)*(x208.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((0.753316114542392)*py*r01))+(((0.0930039303761931)*pz*r02*sj2))+(((0.0930039303761931)*pz*r00*sj0))+(((((((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00179193711398091)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.135418652442448)*cj0*cj2*r01))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((-0.000478942167321729)*r02*sj2))+(((2.0)*cj0*cj2*px*py*r00))+(((0.135418652442448)*cj0*r01))+(((0.0328055249859629)*r02))+(((-0.135418652442448)*r00*sj0))+((cj0*r01*(py*py)))+(((-0.00179193711398091)*r00*sj0*sj2))+(((-0.135418652442448)*cj2*r00*sj0))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))))*(IKsin(j1))))+((((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-0.000478942167321729)*cj0*r01*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((-0.0328055249859629)*r00*sj0))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.000478942167321729)*r00*sj0*sj2))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-0.135418652442448)*r02))+(((0.0328055249859629)*cj0*cj2*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.0328055249859629)*cj0*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.135418652442448)*cj2*r02))+(((-0.0328055249859629)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(IKcos(j1))))+(((0.753316114542392)*pz*r02))+(((-0.0930039303761931)*px*r02*sj0))+(((0.349316114542392)*cj0*pz*r01*sj2))+(((-0.349316114542392)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*cj2*px*r02*sj0))+(((0.0930039303761931)*py*r01*sj2))+(((0.753316114542392)*cj2*pz*r02))+(((0.753316114542392)*px*r00))+(((0.0930039303761931)*px*r00*sj2))+(((0.0930039303761931)*cj2*pz*r00*sj0))+(((0.349316114542392)*px*r02*sj0*sj2))+(((0.753316114542392)*cj2*py*r01))+(((0.0930039303761931)*cj0*cj2*py*r02))+(((0.753316114542392)*cj2*px*r00))+(((-0.349316114542392)*cj0*py*r02*sj2))+(((-0.0930039303761931)*cj0*cj2*pz*r01))+(((0.0930039303761931)*cj0*py*r02))+(((-0.0930039303761931)*cj0*pz*r01)));
evalcond[1]=((((-0.0930039303761931)*px*r02*sj0*sj2))+(((0.753316114542392)*pz*r02*sj2))+(((0.0930039303761931)*py*r01))+(((0.0930039303761931)*px*r00))+(((-0.0930039303761931)*cj2*pz*r02))+(((0.0930039303761931)*pz*r02))+(((-0.0930039303761931)*cj2*py*r01))+(((-0.0930039303761931)*cj0*pz*r01*sj2))+(((-0.349316114542392)*cj0*cj2*pz*r01))+(((0.349316114542392)*cj0*pz*r01))+(((0.0930039303761931)*pz*r00*sj0*sj2))+(((-0.349316114542392)*cj2*px*r02*sj0))+(((0.753316114542392)*py*r01*sj2))+(((0.0930039303761931)*cj0*py*r02*sj2))+((((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.135418652442448)*r00*sj0*sj2))+(((0.000478942167321729)*cj2*r02))+(((0.00179193711398091)*cj0*r01))+(((2.0)*px*pz*r00))+((cj2*r02*(py*py)))+(((-0.00179193711398091)*cj0*cj2*r01))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((0.135418652442448)*cj0*r01*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00179193711398091)*r00*sj0))+(((0.00179193711398091)*cj2*r00*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((-0.000478942167321729)*r02))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.349316114542392)*cj0*py*r02))+(((-0.349316114542392)*pz*r00*sj0))+(((0.349316114542392)*px*r02*sj0))+(((0.349316114542392)*cj2*pz*r00*sj0))+((((((r02*sj2*(py*py)))+(((-0.0328055249859629)*r00*sj0*sj2))+(((-1.0)*cj0*cj2*r01*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((0.0328055249859629)*cj0*r01*sj2))+(((-0.000478942167321729)*cj2*r00*sj0))+(((-1.0)*cj2*r00*sj0*(pz*pz)))+((cj0*cj2*r01*(px*px)))+((cj0*cj2*r01*(pz*pz)))+(((0.00179193711398091)*cj2*r02))+(((2.0)*cj0*py*pz*r02))+(((-0.000478942167321729)*cj0*r01))+(((2.0)*cj2*px*pz*r02*sj0))+(((0.000478942167321729)*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((0.000478942167321729)*cj0*cj2*r01))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((-0.135418652442448)*r02*sj2))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((-1.0)*cj2*r00*sj0*(py*py)))+(((-2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(px*px)))+((cj0*r01*(py*py)))+(((-0.00179193711398091)*r02))+(((-2.0)*cj0*cj2*px*py*r00))))*(IKcos(j1))))+(((0.753316114542392)*px*r00*sj2))+(((-0.0930039303761931)*cj2*px*r00))+(((0.349316114542392)*cj0*cj2*py*r02)));
evalcond[2]=((((0.0930039303761931)*pz*r00*sj0))+(((-0.394683885457608)*cj0*py*r02*sj2))+(((-0.394683885457608)*pz*r00*sj0*sj2))+(((-0.0930039303761931)*px*r02*sj0))+((((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00891734755755194)*r00*sj0*sj2))+(((0.00179193711398091)*cj0*r01))+(((2.0)*px*pz*r00))+(((-0.00891734755755194)*cj0*r01*sj2))+(((-0.00643094216732173)*r02))+((cj2*r02*(py*py)))+(((-0.00179193711398091)*cj0*cj2*r01))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.00643094216732173)*cj2*r02))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00179193711398091)*r00*sj0))+(((0.00179193711398091)*cj2*r00*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(IKcos(j1))))+(((0.0930039303761931)*cj0*cj2*pz*r01))+(((-0.00931611454239191)*cj2*pz*r02))+(((0.394683885457608)*px*r02*sj0*sj2))+(((-0.00931611454239191)*cj2*py*r01))+(((((((-1.0)*r00*sj0*(pz*pz)))+(((-0.00891734755755194)*r02*sj2))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((-0.00643094216732173)*cj0*cj2*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0328055249859629)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((-2.0)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((0.00643094216732173)*cj0*r01))+(((0.0328055249859629)*r00*sj0*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((0.00643094216732173)*cj2*r00*sj0))+((cj0*cj2*r01*(py*py)))+(((-0.00643094216732173)*r00*sj0))))*(IKsin(j1))))+(((-0.00931611454239191)*cj2*px*r00))+(((0.00931611454239191)*pz*r02))+(((0.00931611454239191)*py*r01))+(((0.0930039303761931)*cj2*px*r02*sj0))+(((0.394683885457608)*cj0*pz*r01*sj2))+(((-0.0930039303761931)*pz*r02*sj2))+(((0.0930039303761931)*cj0*py*r02))+(((-0.0930039303761931)*cj2*pz*r00*sj0))+(((0.00931611454239191)*px*r00))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.0930039303761931)*cj0*pz*r01))+(((-0.0930039303761931)*px*r00*sj2))+(((-0.0930039303761931)*cj0*cj2*py*r02)));
evalcond[3]=((((-0.0930039303761931)*px*r02*sj0*sj2))+(((0.394683885457608)*cj2*px*r02*sj0))+(((-0.394683885457608)*cj0*py*r02))+(((0.394683885457608)*cj0*cj2*pz*r01))+(((-0.394683885457608)*cj2*pz*r00*sj0))+(((-0.394683885457608)*pz*r00*sj0))+(((-0.0930039303761931)*cj2*pz*r02))+(((0.00931611454239191)*pz*r02*sj2))+(((-0.0930039303761931)*cj2*py*r01))+(((-0.0930039303761931)*px*r00))+(((0.394683885457608)*px*r02*sj0))+(((-0.0930039303761931)*cj0*pz*r01*sj2))+(((0.394683885457608)*cj0*pz*r01))+(((((((-1.0)*r00*sj0*sj2*(pz*pz)))+(((-0.0328055249859629)*cj0*cj2*r01))+(((0.00643094216732173)*cj0*r01*sj2))+(((-0.00891734755755194)*cj2*r02))+((r00*sj0*sj2*(px*px)))+(((2.0)*px*pz*r00))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+((cj2*r02*(pz*pz)))+(((2.0)*cj2*px*pz*r00))+((cj0*r01*sj2*(pz*pz)))+(((-0.00891734755755194)*r02))+(((-0.0328055249859629)*cj0*r01))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((2.0)*cj2*py*pz*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((0.00179193711398091)*r02*sj2))+(((2.0)*px*py*r01*sj0*sj2))+(((-0.00643094216732173)*r00*sj0*sj2))+(((0.0328055249859629)*r00*sj0))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((0.0328055249859629)*cj2*r00*sj0))+(((-1.0)*r02*(py*py)))+(((-2.0)*cj0*py*pz*r02*sj2))+((cj0*r01*sj2*(px*px)))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.394683885457608)*cj0*cj2*py*r02))+(((0.0930039303761931)*pz*r00*sj0*sj2))+(((0.0930039303761931)*cj0*py*r02*sj2))+(((0.00931611454239191)*py*r01*sj2))+(((-0.0930039303761931)*pz*r02))+(((((((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00179193711398091)*cj0*r01*sj2))+(((0.00891734755755194)*r00*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-0.00643094216732173)*r02*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.00891734755755194)*cj0*cj2*r01))+(((0.0328055249859629)*r02))+((cj0*r01*(py*py)))+(((0.00891734755755194)*cj2*r00*sj0))+(((-0.00179193711398091)*r00*sj0*sj2))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((-0.00891734755755194)*cj0*r01))))*(IKcos(j1))))+(((-0.0930039303761931)*py*r01))+(((0.00931611454239191)*px*r00*sj2))+(((-0.0930039303761931)*cj2*px*r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x209=((2.80741156653565)*cj2);
IkReal x210=(cj0*py);
IkReal x211=(px*sj0);
IkReal x212=((11.5103874227962)*cj1);
IkReal x213=((11.5103874227962)*sj1);
IkReal x214=(pz*x213);
IkReal x215=((2.80741156653565)*sj1*sj2);
IkReal x216=((2.80741156653565)*cj1*sj2);
if( IKabs(((-0.567097136440202)+((cj2*x211*x212))+(((-1.0)*pz*x215))+(((-1.0)*cj2*x214))+((sj2*x210*x213))+(((-1.0)*cj2*x210*x212))+(((-1.0)*sj2*x211*x213))+((x211*x216))+(((-0.522178551375632)*cj2))+(((-1.0)*pz*sj2*x212))+(((-1.0)*x210*x216))+((sj1*x209*x211))+((cj1*pz*x209))+(((2.14093206064009)*sj2))+(((-1.0)*sj1*x209*x210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.32509825940483)+((cj2*x211*x213))+(((-1.0)*sj2*x210*x212))+((pz*x216))+(((-1.0)*cj2*x210*x213))+((sj2*x211*x212))+((x211*x215))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x214))+(((-1.0)*x210*x215))+((cj1*x209*x210))+((cj2*pz*x212))+(((-1.0)*cj1*x209*x211))+(((-0.522178551375632)*sj2))+((pz*sj1*x209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.567097136440202)+((cj2*x211*x212))+(((-1.0)*pz*x215))+(((-1.0)*cj2*x214))+((sj2*x210*x213))+(((-1.0)*cj2*x210*x212))+(((-1.0)*sj2*x211*x213))+((x211*x216))+(((-0.522178551375632)*cj2))+(((-1.0)*pz*sj2*x212))+(((-1.0)*x210*x216))+((sj1*x209*x211))+((cj1*pz*x209))+(((2.14093206064009)*sj2))+(((-1.0)*sj1*x209*x210))))+IKsqr(((-2.32509825940483)+((cj2*x211*x213))+(((-1.0)*sj2*x210*x212))+((pz*x216))+(((-1.0)*cj2*x210*x213))+((sj2*x211*x212))+((x211*x215))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x214))+(((-1.0)*x210*x215))+((cj1*x209*x210))+((cj2*pz*x212))+(((-1.0)*cj1*x209*x211))+(((-0.522178551375632)*sj2))+((pz*sj1*x209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.567097136440202)+((cj2*x211*x212))+(((-1.0)*pz*x215))+(((-1.0)*cj2*x214))+((sj2*x210*x213))+(((-1.0)*cj2*x210*x212))+(((-1.0)*sj2*x211*x213))+((x211*x216))+(((-0.522178551375632)*cj2))+(((-1.0)*pz*sj2*x212))+(((-1.0)*x210*x216))+((sj1*x209*x211))+((cj1*pz*x209))+(((2.14093206064009)*sj2))+(((-1.0)*sj1*x209*x210))), ((-2.32509825940483)+((cj2*x211*x213))+(((-1.0)*sj2*x210*x212))+((pz*x216))+(((-1.0)*cj2*x210*x213))+((sj2*x211*x212))+((x211*x215))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x214))+(((-1.0)*x210*x215))+((cj1*x209*x210))+((cj2*pz*x212))+(((-1.0)*cj1*x209*x211))+(((-0.522178551375632)*sj2))+((pz*sj1*x209))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x217=IKsin(j3);
IkReal x218=IKcos(j3);
IkReal x219=((0.00158999799016431)*sj4);
IkReal x220=(cj0*py);
IkReal x221=(cj0*r01);
IkReal x222=((1.0)*cj1);
IkReal x223=((0.999998735952397)*cj4);
IkReal x224=((1.0)*sj0*sj1);
IkReal x225=(cj2*x218);
IkReal x226=(sj2*x218);
IkReal x227=(sj2*x217);
IkReal x228=(cj2*x217);
evalcond[0]=((((-0.02)*x225))+(((0.082)*x226))+(((0.082)*x228))+((cj1*x220))+(((0.02)*x227))+(((-1.0)*px*sj0*x222))+(((0.202)*sj2))+((pz*sj1)));
evalcond[1]=((0.186)+(((0.082)*x225))+(((0.02)*x226))+(((0.02)*x228))+((sj1*x220))+(((-1.0)*pz*x222))+(((-0.082)*x227))+(((-1.0)*px*x224))+(((0.202)*cj2)));
evalcond[2]=(((cj1*x221))+(((-1.0)*r00*sj0*x222))+(((-1.0)*x219*x228))+(((-1.0)*x219*x226))+((r02*sj1))+(((-1.0)*x223*x226))+(((-1.0)*x223*x228)));
evalcond[3]=((((-1.0)*r02*x222))+((x223*x227))+(((-1.0)*x219*x225))+((sj1*x221))+((x219*x227))+(((-1.0)*x223*x225))+(((-1.0)*r00*x224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (d8ebfa1b08d5c408849a626e82ff5b84)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
