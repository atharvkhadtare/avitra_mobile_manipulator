/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-03-28 17:08:24.997092
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[1]);
x1=IKsin(j[0]);
x2=IKcos(j[0]);
x3=IKsin(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[2]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.999999680000154)*x9);
x11=((0.125999939680026)*x3);
x12=((0.000799999744000123)*x6);
x13=((0.000799999744000123)*x7);
x14=((0.000799999744000123)*x8);
x15=((0.02)*x4);
x16=((0.999999680000154)*x8);
x17=((0.000799999744000123)*x9);
x18=((0.02)*x5);
x19=((-1.0)*x4);
x20=(x0*x4);
x21=(x2*x3);
x22=(x0*x1);
x23=((-0.02)*x4);
x24=(x0*x2);
x25=((-0.000799999744000123)*x7);
x26=(x1*x3);
x27=((-0.000799999744000123)*x6);
x28=((-0.12599998)*x4);
x29=((-1.0)*x5);
x30=((-0.12599998)*x5);
x31=(x3*x5);
x32=((-0.02)*x5);
x33=(x3*x4);
x34=(x0*x5);
x35=((0.000799999744000123)*x24);
x36=((1.0)*x26);
x37=((0.000799999744000123)*x22);
x38=((0.999999680000154)*x31);
x39=((0.999999680000154)*x20);
x40=(x24+(((-0.000799999744000123)*x26)));
x41=((((-1.0)*x36))+x35);
x42=((((-1.0)*x35))+x36);
x43=(x37+x21);
x44=((((-1.0)*x39))+x38);
x45=((((-1.0)*x22))+(((-0.000799999744000123)*x21)));
x46=((((-1.0)*x37))+(((-1.0)*x21)));
x47=((((0.999999680000154)*x33))+(((0.999999680000154)*x34)));
x48=(x40*x5);
x49=((-0.12599998)*x40);
x50=(x4*x40);
x51=(x4*x41);
x52=(x42*x5);
x53=(x4*x45);
x54=(x45*x5);
x55=(x46*x5);
x56=(x55+x50);
x57=(x53+x52);
x58=(x54+x51);
x59=(((x47*x7))+((x6*(((((-1.0)*x38))+x39)))));
x60=(((x56*x7))+((x6*((((x29*x40))+((x19*x43)))))));
x61=(((x12*x56))+((x13*((x48+((x4*x43))))))+(((0.99999936000041)*x1)));
x62=(((x6*((((x29*x45))+((x19*x41))))))+((x57*x7)));
IkReal x63=((0.99999936000041)*x2);
eerot[0]=(((x16*x62))+((x17*x62))+((x14*((((x13*x58))+((x12*x57))+x63))))+((x10*((((x27*x57))+((x25*x58))+(((-1.0)*x63)))))));
eerot[1]=((((((((-0.999999680000154)*(((((((((-5.11999508480393e-10)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((0.000799998976000983)*(IKcos(j[0]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((((((-6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((((((6.39999590400262e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.000799999744000123)*(((((((((-5.11999508480393e-10)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((((((-6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((((((6.39999590400262e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKcos(j[5]))))+(((((((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((6.39999180800786e-7)*(IKcos(j[0]))))+(((-0.999999680000154)*(((((0.000799999488000328)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799998976000983)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((((((0.000799999232000614)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999998720001229)*(IKcos(j[0]))))+(((((((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((((((0.99999936000041)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.000799999744000123)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-1.0)*(((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((-1.0)*(((((0.99999936000041)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((5.11999344640629e-10)*(IKcos(j[0]))))+(((0.000799999744000123)*(((((-0.999998720001229)*(IKcos(j[0]))))+(((-1.0)*(((((0.000799999232000614)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[2]=((((((((-0.999999680000154)*(((((((((-5.11999508480393e-10)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((0.000799998976000983)*(IKcos(j[0]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((((((-6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((((((6.39999590400262e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((6.39999180800786e-7)*(IKcos(j[0]))))+(((-0.000799999744000123)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((((((-6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((-5.11999508480393e-10)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-5.11999508480393e-10)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((-0.000799999744000123)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((((((6.39999590400262e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.999999680000154)*(((((-1.0)*(((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((-1.0)*(((((0.99999936000041)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999998720001229)*(IKcos(j[0]))))+(((-1.0)*(((((0.000799999232000614)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((-0.000799998976000983)*(IKcos(j[0]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKcos(j[0]))))))*(IKsin(j[5]))))+(((((((-0.000799999744000123)*(((((((((0.000799999232000614)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999998720001229)*(IKcos(j[0]))))+(((((((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((5.11999344640629e-10)*(IKcos(j[0]))))+(((-0.000799999744000123)*(((((((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799998976000983)*(IKcos(j[0]))))))*(IKsin(j[4]))))+(((-0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000799999488000328)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((0.000799999488000328)*(((((0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((((((0.99999936000041)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.99999936000041)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000799999744000123)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eetrans[0]=(((x6*(((((-0.12599998)*x53))+(((-0.12599998)*x52))))))+((x5*(((((0.000161599948288025)*x21))+(((0.202)*x22))))))+((x7*((((x18*x42))+((x15*x45))))))+(((5.17299834464079e-5)*x2))+((x4*(((((-0.000161599948288025)*x24))+(((0.202)*x26))))))+(((0.186)*x26))+(((-0.000148799952384023)*x24))+((x6*((((x23*x41))+((x32*x45))))))+((x7*((((x28*x41))+((x30*x45)))))));
eerot[3]=(((x14*x61))+((x16*x60))+(((-1.0)*x10*x61))+((x17*x60)));
eerot[4]=((((((((0.000799999744000123)*(((((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((5.11999344640629e-10)*(IKsin(j[0]))))+(((0.000799999744000123)*(((((-1.0)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-1.0)*(((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999998720001229)*(IKsin(j[0]))))+(((-1.0)*(((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((-0.000799998976000983)*(IKsin(j[0]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((-0.999999680000154)*(((((0.000799999488000328)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((((((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((0.999998720001229)*(IKsin(j[0]))))+(((((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((6.39999180800786e-7)*(IKsin(j[0]))))+(((-0.999999680000154)*(((((0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799998976000983)*(IKsin(j[0]))))+(((((((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((((((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799998976000983)*(IKsin(j[0]))))+(((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((0.000799999744000123)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.999999680000154)*(((((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799998976000983)*(IKsin(j[0]))))+(((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.000799998976000983)*(IKsin(j[0]))))+(((-0.999999680000154)*(((((((((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[5]=((((((((-0.999999680000154)*(((((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799998976000983)*(IKsin(j[0]))))+(((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.000799998976000983)*(IKsin(j[0]))))+(((-0.999999680000154)*(((((((((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.000799999744000123)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.99999936000041)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((6.39999180800786e-7)*(IKsin(j[0]))))+(((-0.000799999744000123)*(((((((((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((6.39999590400262e-7)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((6.39999590400262e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799998976000983)*(IKsin(j[0]))))+(((((((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((((((-5.11999508480393e-10)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.11999508480393e-10)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-0.999999680000154)*(((((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-1.0)*(((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999998720001229)*(IKsin(j[0]))))+(((-1.0)*(((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((-1.0)*(((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((-0.000799998976000983)*(IKsin(j[0]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-6.39999180800786e-7)*(IKsin(j[0]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((-0.000799999744000123)*(((((0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.99999936000041)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.99999936000041)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((5.11999344640629e-10)*(IKsin(j[0]))))+(((-0.000799999744000123)*(((((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999488000328)*(((((0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999488000328)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((((((6.39999385600492e-7)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799998976000983)*(IKsin(j[0]))))+(((((((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((6.39999385600492e-7)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.000799999744000123)*(((((0.000799999488000328)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.000799999488000328)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.999998720001229)*(IKsin(j[0]))))+(((((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999232000614)*(((((-0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.000799999232000614)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000799999744000123)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999232000614)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((0.000799999744000123)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5])))));
eetrans[1]=((0.1722)+((x6*((((x23*x43))+((x32*x40))))))+((x4*(((((-0.202)*x21))+(((-0.000161599948288025)*x22))))))+(((5.17299834464079e-5)*x1))+((x7*((((x18*x46))+((x15*x40))))))+((x6*((((x28*x40))+((x30*x46))))))+(((-0.000148799952384023)*x22))+((x5*(((((-0.202)*x24))+(((0.000161599948288025)*x26))))))+((x7*((((x28*x43))+((x30*x40))))))+(((-0.186)*x21)));
eerot[6]=(((x17*x59))+((x16*x59))+((x10*(((-0.000799999488000328)+((x27*x47))+((x25*x44))))))+((x14*(((0.000799999488000328)+((x12*x47))+((x13*x44)))))));
eerot[7]=((((((5.11999344640629e-10)+(((-0.999999680000154)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((((((-0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((0.000799998976000983)+(((((((-0.000799998976000983)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799998976000983)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.000799998976000983)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.000799998976000983)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))+(((6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((4.09599475712503e-13)+(((0.000799999744000123)*(((((-1.0)*(((((-0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((-0.000799998976000983)+(((-1.0)*(((((0.000799998976000983)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.000799998976000983)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799998976000983)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799998976000983)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((-6.39999180800786e-7)+(((-1.0)*(((((6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))+(((6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-1.0)*(((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((-5.11999344640629e-10)+(((0.000799999744000123)*(((-6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((((((-6.39999385600492e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.000799999744000123)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((-5.11999344640629e-10)+(((((((-5.11999344640629e-10)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-5.11999344640629e-10)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((5.11999344640629e-10)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-5.11999344640629e-10)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.000799999744000123)*(((((-0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((6.39999180800786e-7)+(((-0.999999680000154)*(((-6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((((((-6.39999385600492e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((-5.11999344640629e-10)+(((((((-5.11999344640629e-10)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-5.11999344640629e-10)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((5.11999344640629e-10)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-5.11999344640629e-10)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[8]=((((((5.11999344640629e-10)+(((-0.000799999744000123)*(((-6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((-5.11999344640629e-10)+(((((((-5.11999344640629e-10)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-5.11999344640629e-10)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((5.11999344640629e-10)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-5.11999344640629e-10)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.000799999744000123)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((-6.39999385600492e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((-0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((-5.11999344640629e-10)+(((-0.999999680000154)*(((-6.39999180800786e-7)+(((-1.0)*(((((6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))+(((6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-1.0)*(((((-0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-1.0)*(((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((-0.000799998976000983)+(((-1.0)*(((((0.000799998976000983)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.000799998976000983)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.000799998976000983)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799998976000983)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((4.09599475712503e-13)+(((-0.000799999744000123)*(((0.000799998976000983)+(((((((-0.000799998976000983)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799998976000983)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.000799998976000983)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.000799998976000983)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.000799999744000123)*(((((0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))+(((6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.000799999744000123)*(((((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((((((-0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((6.39999180800786e-7)+(((-0.999999680000154)*(((-6.39999180800786e-7)+(((((((6.39999180800786e-7)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-6.39999180800786e-7)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-6.39999180800786e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-6.39999180800786e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((((0.999999040000768)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.999999040000768)*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((((((0.000799999232000614)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.000799999232000614)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.000799999232000614)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((((((-6.39999385600492e-7)*(IKsin(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((6.39999385600492e-7)*(IKcos(j[1]))*(IKsin(j[2]))))+(((6.39999385600492e-7)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.999999680000154)*(((-5.11999344640629e-10)+(((((((-5.11999344640629e-10)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-5.11999344640629e-10)*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((5.11999344640629e-10)*(IKcos(j[1]))*(IKcos(j[2]))))+(((-5.11999344640629e-10)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999999680000154)*(((((-0.999999040000768)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.999999040000768)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5])))));
IkReal x64=((1.0)*x11);
eetrans[2]=((0.296000041383987)+((x7*(((((-1.0)*x5*x64))+(((0.125999939680026)*x20))))))+((x7*(((((0.0199999936000031)*x34))+(((0.0199999936000031)*x33))))))+((x6*(((((0.0199999936000031)*x20))+(((-0.0199999936000031)*x31))))))+(((0.185999940480029)*x0))+(((0.201999935360031)*x20))+(((-0.201999935360031)*x31))+((x6*(((((-1.0)*x4*x64))+(((-0.125999939680026)*x34)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999999680000154)*r01))+(((-0.000799999744000123)*r02)));
new_r01=((((0.000799999744000123)*r01))+(((-0.999999680000154)*r02)));
new_r02=r00;
new_px=px;
new_r10=((((-0.999999680000154)*r11))+(((-0.000799999744000123)*r12)));
new_r11=((((0.000799999744000123)*r11))+(((-0.999999680000154)*r12)));
new_r12=r10;
new_py=((-0.1722)+py);
new_r20=((((-0.000799999744000123)*r22))+(((-0.999999680000154)*r21)));
new_r21=((((0.000799999744000123)*r21))+(((-0.999999680000154)*r22)));
new_r22=r20;
new_pz=((-0.296)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
{
IkReal j0eval[2];
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((0.999999680000154)*px)),IkReal(((0.999999680000154)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
IkReal x68=((1.0)*(x70.value));
if((((((0.99999936000041)*(py*py)))+(((0.99999936000041)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.99999936000041)*(py*py)))+(((0.99999936000041)*(px*px)))))),-1);
if(!x71.valid){
continue;
}
if( (((x71.value)*(((-5.173e-5)+(((0.000799999744000123)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x71.value)*(((-5.173e-5)+(((0.000799999744000123)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x69=IKasin(((x71.value)*(((-5.173e-5)+(((0.000799999744000123)*pz))))));
j0array[0]=((((-1.0)*x68))+(((-1.0)*x69)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x69+(((-1.0)*x68)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x72=cj0*cj0;
IkReal x73=r11*r11;
IkReal x74=r10*r10;
IkReal x75=(r11*sj0);
IkReal x76=((0.00639999590400262)*r21);
IkReal x77=((7.99999488000328)*cj0);
IkReal x78=(cj0*r00);
IkReal x79=(r10*sj0);
IkReal x80=((0.00639999590400262)*r20);
IkReal x81=(cj0*r01);
IkReal x82=((3.99999744000164)*x74);
IkReal x83=((3.99999744000164)*x72);
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((-0.000799999744000123)+(((0.99999936000041)*x75))+(((6.39999590400262e-7)*r20))+(((0.000799999488000328)*x79))+(((0.000799999488000328)*x78))+(((0.99999936000041)*x81))+(((0.000799999488000328)*r21))),-1);
if(!x96.valid){
continue;
}
IkReal x84=x96.value;
IkReal x85=((0.000799999488000328)*x84);
IkReal x86=((0.99999936000041)*x84);
IkReal x87=((6.39999590400262e-7)*r21*x84);
IkReal x88=(r20*x85);
IkReal x89=(x75*x85);
IkReal x90=(x81*x85);
IkReal x91=(x79*x86);
IkReal x92=(x78*x86);
IkReal x93=(x89+x87+x90);
IkReal x94=(x88+x91+x92);
if((((-2.55999836160105e-6)+(((2.55999836160105e-6)*(r21*r21)))+((x79*x80))+(((-1.0)*x73*x83))+(((-1.0)*x72*x82))+((x78*x80))+((r00*x77*x79))+((x75*x76))+((x76*x81))+x82+((x83*(r00*r00)))+((x83*(r01*r01)))+((r01*x75*x77))+(((3.99999744000164)*x73))+(((2.55999836160105e-6)*(r20*r20))))) < -0.00001)
continue;
IkReal x95=((0.5)*x84*(IKsqrt(((-2.55999836160105e-6)+(((2.55999836160105e-6)*(r21*r21)))+((x79*x80))+(((-1.0)*x73*x83))+(((-1.0)*x72*x82))+((x78*x80))+((r00*x77*x79))+((x75*x76))+((x76*x81))+x82+((x83*(r00*r00)))+((x83*(r01*r01)))+((r01*x75*x77))+(((3.99999744000164)*x73))+(((2.55999836160105e-6)*(r20*r20)))))));
j5array[0]=((2.0)*(atan((x95+x94+(((-1.0)*x93))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((-2.0)*(atan((x93+x95+(((-1.0)*x94))))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

{
IkReal j2eval[1];
IkReal x97=(npx*sj5);
IkReal x98=(rxp1_2*sj5);
IkReal x99=(cj5*npy);
IkReal x100=((3.85719949708789e-5)*sj0);
IkReal x101=(rxp1_1*sj5);
IkReal x102=(cj5*rxp0_1);
IkReal x103=((4.09599606784315e-5)*sj5);
IkReal x104=(cj0*rxp0_0);
IkReal x105=(rxp0_2*sj5);
IkReal x106=((1.93351494382536e-5)*sj0);
IkReal x107=(cj5*rxp1_2);
IkReal x108=(npy*sj5);
IkReal x109=(cj5*npx);
IkReal x110=(rxp0_1*sj0);
IkReal x111=((0.0482149937135986)*sj5);
IkReal x112=((0.024168936797817)*sj5);
IkReal x113=(cj5*rxp0_2);
IkReal x114=((3.27679685427452e-8)*sj0);
IkReal x115=(cj0*cj5*rxp1_0);
IkReal x116=(cj0*rxp1_0*sj5);
IkReal x117=(cj5*rxp1_1*sj0);
j2eval[0]=((IKabs(((1.64044722790182e-5)+(((-3.27679685427452e-8)*cj5*x104))+(((2.0643823511153e-7)*x109))+(((0.00102399934464042)*pp))+(((2.62143748341961e-11)*x98))+(((-2.0643823511153e-7)*x108))+(((3.27679685427452e-8)*x116))+(((-3.27679685427452e-8)*x107))+(((-3.27679685427452e-8)*x105))+(((0.000258047793889412)*x99))+(((0.000258047793889412)*x97))+(((-1.0)*x103*x104))+(((-2.62143748341961e-11)*x113))+(((-1.0)*x102*x114))+(((-1.0)*x103*x110))+((x101*x114))+(((-4.09599606784315e-5)*x117))+(((-4.09599606784315e-5)*x115)))))+(IKabs(((-0.0713435491502161)+(((-3.85719949708789e-5)*x105))+(((-3.85719949708789e-5)*x107))+(((-1.0)*x100*x102))+(((3.85719949708789e-5)*x116))+(((1.20537522855985)*pp))+(((-3.08575959767031e-8)*x113))+(((-1.0)*x110*x111))+(((0.000243003607505659)*x109))+(((0.303754509382074)*x99))+(((0.303754509382074)*x97))+(((-0.000243003607505659)*x108))+(((-3.85719949708789e-5)*cj5*x104))+(((-0.0482149937135986)*x117))+(((-0.0482149937135986)*x115))+(((3.08575959767031e-8)*x98))+(((-1.0)*x104*x111))+((x100*x101)))))+(IKabs(((0.00952576911063083)+(((0.604223613296887)*pp))+(((1.93351494382536e-5)*x116))+(((-1.93351494382536e-5)*x105))+(((-1.93351494382536e-5)*x107))+(((0.000121811461105497)*x109))+(((-1.0)*x110*x112))+(((-1.93351494382536e-5)*cj5*x104))+(((1.54681195506029e-8)*x98))+(((0.152264326381871)*x97))+(((0.152264326381871)*x99))+(((-1.0)*x102*x106))+(((-0.000121811461105497)*x108))+(((-1.54681195506029e-8)*x113))+((x101*x106))+(((-0.024168936797817)*x117))+(((-0.024168936797817)*x115))+(((-1.0)*x104*x112))))));
if( IKabs(j2eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x118=(rxp0_2*sj5);
IkReal x119=((1.92696135011681e-5)*cj0);
IkReal x120=(cj5*rxp0_0);
IkReal x121=(npx*sj5);
IkReal x122=(rxp1_2*sj5);
IkReal x123=(cj5*npy);
IkReal x124=(cj5*rxp0_2);
IkReal x125=(rxp0_1*sj0);
IkReal x126=((3.85719949708789e-5)*cj5);
IkReal x127=(rxp1_0*sj5);
IkReal x128=((1.92696135011681e-5)*cj5);
IkReal x129=(rxp1_1*sj0);
IkReal x130=(npy*sj5);
IkReal x131=(cj5*npx);
IkReal x132=((3.27679685427452e-8)*cj5);
IkReal x133=((1.93351494382536e-5)*cj0);
IkReal x134=((3.27679685427452e-8)*cj0);
IkReal x135=((1.93351494382536e-5)*cj5);
IkReal x136=((3.85719949708789e-5)*cj0);
IkReal x137=(cj0*cj5*rxp1_0);
IkReal x138=(cj0*rxp0_0*sj5);
op[0]=((1.64044722790182e-5)+((x127*x134))+(((-1.0)*x120*x134))+(((0.00102399934464042)*pp))+(((3.27679685427452e-8)*sj5*x129))+(((2.0643823511153e-7)*x131))+(((0.000258047793889412)*x121))+(((0.000258047793889412)*x123))+(((2.62143748341961e-11)*x122))+(((-3.27679685427452e-8)*x118))+(((-2.0643823511153e-7)*x130))+(((-1.0)*x125*x132))+(((-4.09599606784315e-5)*cj5*x129))+(((-1.0)*rxp1_2*x132))+(((-4.09599606784315e-5)*x137))+(((-4.09599606784315e-5)*x138))+(((-4.09599606784315e-5)*sj5*x125))+(((-2.62143748341961e-11)*x124)));
op[1]=0;
op[2]=((0.00952576911063083)+((x127*x133))+(((-1.54681195506029e-8)*x124))+(((-1.0)*x120*x133))+(((0.604223613296887)*pp))+(((-1.93351494382536e-5)*x118))+(((0.152264326381871)*x121))+(((0.152264326381871)*x123))+(((-0.024168936797817)*sj5*x125))+(((0.000121811461105497)*x131))+(((-1.0)*x125*x135))+(((-1.0)*rxp1_2*x135))+(((-0.024168936797817)*x138))+(((-0.024168936797817)*x137))+(((1.54681195506029e-8)*x122))+(((-0.024168936797817)*cj5*x129))+(((1.93351494382536e-5)*sj5*x129))+(((-0.000121811461105497)*x130)));
op[3]=0;
op[4]=((-0.0713435491502161)+((x127*x136))+(((-0.0482149937135986)*x138))+(((-0.0482149937135986)*x137))+(((3.85719949708789e-5)*sj5*x129))+(((-3.85719949708789e-5)*x118))+(((-1.0)*x120*x136))+(((-3.08575959767031e-8)*x124))+(((1.20537522855985)*pp))+(((0.303754509382074)*x123))+(((0.303754509382074)*x121))+(((3.08575959767031e-8)*x122))+(((-1.0)*x125*x126))+(((-1.0)*rxp1_2*x126))+(((0.000243003607505659)*x131))+(((-0.0482149937135986)*cj5*x129))+(((-0.0482149937135986)*sj5*x125))+(((-0.000243003607505659)*x130)));
op[5]=0;
op[6]=((-0.0808529137885679)+(((0.000121398584635274)*x131))+(((0.151748230794092)*x123))+(((0.151748230794092)*x121))+(((-1.0)*x119*x120))+(((-1.54156908009345e-8)*x124))+(((-0.0240870168764601)*x137))+(((-0.0240870168764601)*x138))+(((0.602175614607607)*pp))+(((-0.000121398584635274)*x130))+(((-1.92696135011681e-5)*x118))+(((-1.0)*x125*x128))+(((-1.0)*rxp1_2*x128))+(((-0.0240870168764601)*sj5*x125))+(((1.54156908009345e-8)*x122))+((x119*x127))+(((-0.0240870168764601)*cj5*x129))+(((1.92696135011681e-5)*sj5*x129)));
polyroots6(op,zeror,numroots);
IkReal j2array[6], cj2array[6], sj2array[6], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[6]={true,true,true,true,true,true};
_nj2 = 6;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=((1.00340679229213)+cj2);
j3eval[1]=IKsign(((471250.0)+(((469650.0)*cj2))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x139=cj2*cj2;
IkReal x140=cj2*cj2*cj2;
IkReal x141=sj2*sj2*sj2;
j3eval[0]=((1.0)+(((-113.998018910461)*cj2*sj2))+(((-104.968472858147)*sj2*x139))+(((-34.9894909527156)*x141))+(((13.1009862178348)*cj2))+(((-32.2180461247778)*sj2*x140))+(((23.2089028958954)*x139))+(((-32.2180461247778)*cj2*x141))+(((-41.2681000356864)*sj2))+(((11.1077766687632)*x140)));
j3eval[1]=((1.00340679229213)+cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=((-1.00340679229213)+(((-1.0)*cj2)));
j3eval[1]=((1.08602150537634)+cj2+(((-6.299999)*sj2)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.15526211813004)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x142=(cj5*npy);
IkReal x143=(npx*sj5);
IkReal x144=(cj5*npx);
IkReal x145=(npy*sj5);
if( IKabs(((24.378906007469)+(((-0.314658191998927)*x145))+(((393.322739998659)*x143))+(((393.322739998659)*x142))+(((0.314658191998927)*x144))+(((1522.446322126)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-3.99678902306493)+(((1.67153132705654e-9)*x144))+(((-1.67153132705654e-9)*x145))+(((2.08941415882068e-6)*x142))+(((2.08941415882068e-6)*x143))+(((241.658193018976)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((24.378906007469)+(((-0.314658191998927)*x145))+(((393.322739998659)*x143))+(((393.322739998659)*x142))+(((0.314658191998927)*x144))+(((1522.446322126)*pp))))+IKsqr(((-3.99678902306493)+(((1.67153132705654e-9)*x144))+(((-1.67153132705654e-9)*x145))+(((2.08941415882068e-6)*x142))+(((2.08941415882068e-6)*x143))+(((241.658193018976)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((24.378906007469)+(((-0.314658191998927)*x145))+(((393.322739998659)*x143))+(((393.322739998659)*x142))+(((0.314658191998927)*x144))+(((1522.446322126)*pp))), ((-3.99678902306493)+(((1.67153132705654e-9)*x144))+(((-1.67153132705654e-9)*x145))+(((2.08941415882068e-6)*x142))+(((2.08941415882068e-6)*x143))+(((241.658193018976)*pp))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x146=IKcos(j3);
IkReal x147=IKsin(j3);
IkReal x148=(py*sj0);
IkReal x149=((0.000799999488000328)*cj5);
IkReal x150=(rxp0_1*sj0);
IkReal x151=(cj0*px);
IkReal x152=(pp*sj5);
IkReal x153=((0.99999936000041)*cj0);
IkReal x154=(cj5*pp);
IkReal x155=(npy*sj5);
IkReal x156=(cj5*npy);
IkReal x157=((0.99999936000041)*sj0);
IkReal x158=((0.000799999488000328)*sj5);
IkReal x159=(cj5*npx);
IkReal x160=(npx*sj5);
IkReal x161=((0.00159999897600066)*pz);
IkReal x162=((1.27999918080052e-6)*pz);
IkReal x163=((1.99999872000082)*x160);
IkReal x164=((0.00159999897600066)*x159);
evalcond[0]=((0.0165390183399133)+(((-2.19823424e-11)*x147))+(((-1.0)*pp))+(((0.00413807626786488)*x146)));
evalcond[1]=((0.125999981064013)+(((0.0160173728544415)*x146))+(((-0.00254244062641913)*x147))+(((0.000799999744000123)*x159))+(((-0.000799999744000123)*x155))+(((0.999999680000154)*x160))+(((0.999999680000154)*x156)));
evalcond[2]=((-0.0199999936000031)+((rxp0_2*x158))+((x149*x150))+((cj5*rxp1_1*x157))+((cj5*rxp1_0*x153))+((cj0*rxp0_0*x149))+(((-0.0160173728544415)*x147))+(((-1.0)*rxp1_1*sj0*x158))+(((-0.00254244062641913)*x146))+((rxp1_2*x149))+(((-6.39999590400262e-7)*rxp1_2*sj5))+(((0.99999936000041)*sj5*x150))+((rxp0_0*sj5*x153))+(((6.39999590400262e-7)*cj5*rxp0_2))+(((-1.0)*cj0*rxp1_0*x158)));
evalcond[3]=((1.95252397061243e-7)+(((2.63040889623455e-7)*x147))+(((-1.99999872000082)*x148*x156))+(((-1.0)*x159*x162))+(((-0.000799999488000328)*cj0*r01*x152))+(((-0.000799999488000328)*r11*sj0*x152))+(((-1.0)*x160*x161))+((r01*x153*x154))+(((-6.39999590400262e-7)*r21*x152))+(((0.00159999897600066)*x148*x155))+((cj0*pp*r00*x149))+((r10*x152*x157))+(((-1.0)*x151*x164))+(((-1.0)*x151*x163))+(((0.00159999897600066)*x151*x155))+((r00*x152*x153))+((pp*r10*sj0*x149))+((x155*x162))+((r11*x154*x157))+(((-1.0)*x148*x163))+(((-1.0)*x148*x164))+(((0.000799999488000328)*r20*x152))+(((-1.99999872000082)*x151*x156))+(((1.65330255942437e-6)*x146))+((pp*r21*x149))+(((-1.0)*x156*x161))+(((6.39999590400262e-7)*r20*x154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
sj2=0.01366904;
cj2=-0.99990657;
j2=-3.1727921461754;
j1eval[0]=((-180552685.52837)+(((-45174437.2998255)*cj3))+sj3);
j1eval[1]=IKsign(((-0.0165390151721013)+(((-0.00413807582926013)*cj3))+(((9.160215548e-11)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0.01366904;
cj2=-0.99990657;
j2=-3.1727921461754;
j1eval[0]=((-7.86645446892721)+(((-6.29999809926976)*sj3))+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-0.0199999934276769)+(((-0.00254244062641913)*cj3))+(((-0.0160173711139467)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0.01366904;
cj2=-0.99990657;
j2=-3.1727921461754;
j1eval[0]=((-49.5586552877869)+(((-6.29999809926976)*cj3))+sj3);
j1eval[1]=IKsign(((-0.125999938594371)+(((0.00254244062641913)*sj3))+(((-0.0160173711139467)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j4]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((((2.20891545029411e-6)*cj5*r11*sj0))+(((-1.76713236023529e-9)*r11*sj0*sj5))+(((2.20891545029411e-6)*cj0*r00*sj5))+(((-0.000100571797251545)*r21*sj3*sj5))+(((-0.00276114431286764)*cj5*r21))+(((1.73763330124422e-5)*cj3*cj5*r11*sj0))+(((0.125714746564431)*cj5*r21*sj3))+(((1.73763330124422e-5)*cj3*r10*sj0*sj5))+(((2.20891545029411e-6)*r10*sj0*sj5))+(((-0.000100571797251545)*cj5*r11*sj0*sj3))+(((1.73763330124422e-5)*cj0*cj3*r00*sj5))+(((-0.00276114431286764)*r20*sj5))+(((-8.04574378012357e-8)*cj5*r10*sj0*sj3))+(((0.125714746564431)*r20*sj3*sj5))+(((2.20891545029411e-6)*cj0*cj5*r01))+(((8.04574378012357e-8)*r11*sj0*sj3*sj5))+(((-0.0136690356259093)*cj0*py*sj3))+(((8.04574378012357e-8)*cj0*r01*sj3*sj5))+(((1.73763330124422e-5)*cj3*r21*sj5))+(((1.76713236023529e-9)*cj5*r10*sj0))+(((1.76713236023529e-9)*cj0*cj5*r00))+(((0.999906250030051)*cj3*px*sj0))+(((-0.999906250030051)*cj0*cj3*py))+(((-0.0217204162655528)*cj3*r20*sj5))+(((2.20891545029411e-6)*r21*sj5))+(((-1.39010664099538e-8)*cj0*cj3*r01*sj5))+(((-2.20891545029411e-6)*cj5*r20))+(((0.000100571797251545)*cj5*r20*sj3))+(((-1.76713236023529e-9)*cj0*r01*sj5))+(((-0.000100571797251545)*r10*sj0*sj3*sj5))+(((1.73763330124422e-5)*cj0*cj3*cj5*r01))+(((-1.73763330124422e-5)*cj3*cj5*r20))+(((-0.0217204162655528)*cj3*cj5*r21))+(((1.39010664099538e-8)*cj0*cj3*cj5*r00))+(((-0.000100571797251545)*cj0*r00*sj3*sj5))+(((1.39010664099538e-8)*cj3*cj5*r10*sj0))+(((0.0136690356259093)*px*sj0*sj3))+(((-0.000100571797251545)*cj0*cj5*r01*sj3))+(((-1.39010664099538e-8)*cj3*r11*sj0*sj5))+(((-8.04574378012357e-8)*cj0*cj5*r00*sj3)))),IkReal(((((1.27848935296681e-5)*r21*sj5))+(((1.73763330124422e-5)*r21*sj3*sj5))+(((1.27848935296681e-5)*cj5*r11*sj0))+(((1.39010664099538e-8)*cj0*cj5*r00*sj3))+(((1.27848935296681e-5)*cj0*cj5*r01))+(((-8.04574378012357e-8)*cj0*cj3*r01*sj5))+(((-1.27848935296681e-5)*cj5*r20))+(((-0.0159811169120852)*cj5*r21))+(((-0.0217204162655528)*r20*sj3*sj5))+(((0.000100571797251545)*cj0*cj3*r00*sj5))+(((1.39010664099538e-8)*cj5*r10*sj0*sj3))+(((1.02279148237345e-8)*cj0*cj5*r00))+(((-0.0136690356259093)*cj3*px*sj0))+(((1.73763330124422e-5)*r10*sj0*sj3*sj5))+(((-0.999906250030051)*cj0*py*sj3))+(((1.27848935296681e-5)*r10*sj0*sj5))+(((0.000100571797251545)*cj0*cj3*cj5*r01))+(((8.04574378012357e-8)*cj3*cj5*r10*sj0))+(((-0.125714746564431)*cj3*cj5*r21))+(((-1.02279148237345e-8)*r11*sj0*sj5))+(((-0.000100571797251545)*cj3*cj5*r20))+(((1.73763330124422e-5)*cj5*r11*sj0*sj3))+(((1.02279148237345e-8)*cj5*r10*sj0))+(((-0.0159811169120852)*r20*sj5))+(((0.000100571797251545)*cj3*cj5*r11*sj0))+(((-1.02279148237345e-8)*cj0*r01*sj5))+(((1.73763330124422e-5)*cj0*cj5*r01*sj3))+(((0.999906250030051)*px*sj0*sj3))+(((-1.39010664099538e-8)*r11*sj0*sj3*sj5))+(((1.27848935296681e-5)*cj0*r00*sj5))+(((8.04574378012357e-8)*cj0*cj3*cj5*r00))+(((0.0136690356259093)*cj0*cj3*py))+(((-0.125714746564431)*cj3*r20*sj5))+(((-0.0217204162655528)*cj5*r21*sj3))+(((-1.73763330124422e-5)*cj5*r20*sj3))+(((1.73763330124422e-5)*cj0*r00*sj3*sj5))+(((0.000100571797251545)*cj3*r10*sj0*sj5))+(((-8.04574378012357e-8)*cj3*r11*sj0*sj5))+(((0.000100571797251545)*cj3*r21*sj5))+(((-1.39010664099538e-8)*cj0*r01*sj3*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166=IKPowWithIntegerCheck(IKsign(((-0.125999938594371)+(((0.00254244062641913)*sj3))+(((-0.0160173711139467)*cj3)))),-1);
if(!x166.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x165.value)+(((1.5707963267949)*(x166.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x167=IKsin(j1);
IkReal x168=IKcos(j1);
IkReal x169=(cj0*sj5);
IkReal x170=((0.000799999744000123)*r11);
IkReal x171=((4.88466791204601e-5)*cj3);
IkReal x172=(px*sj0);
IkReal x173=((0.00159999897600066)*npx);
IkReal x174=(sj0*sj5);
IkReal x175=(pp*r01);
IkReal x176=(cj5*sj0);
IkReal x177=(npx*py);
IkReal x178=((6.39999590400262e-7)*r11);
IkReal x179=((0.000799999744000123)*r00);
IkReal x180=((6.39999590400262e-7)*r10);
IkReal x181=(cj0*cj5);
IkReal x182=((0.00159999897600066)*npy);
IkReal x183=((0.000799999488000328)*pp);
IkReal x184=(pz*sj5);
IkReal x185=(cj5*pz);
IkReal x186=((0.999999680000154)*r10);
IkReal x187=((0.99999936000041)*cj5);
IkReal x188=((1.27999918080052e-6)*px);
IkReal x189=((0.999999680000154)*r00);
IkReal x190=((0.999999680000154)*r11);
IkReal x191=((6.39999590400262e-7)*r00);
IkReal x192=((0.000799999744000123)*r10);
IkReal x193=((0.000799999488000328)*cj5);
IkReal x194=((0.00159999948800025)*npy);
IkReal x195=((1.99999936000031)*npy);
IkReal x196=((0.000799999488000328)*sj5);
IkReal x197=(sj3*x168);
IkReal x198=(cj3*x168);
IkReal x199=(cj3*x167);
IkReal x200=((0.99999936000041)*r20*sj5);
IkReal x201=(sj3*x167);
evalcond[0]=((((-0.00276114608)*x168))+(((0.01598112714)*x167))+(((0.0217204301666192)*x201))+x172+(((0.125714827021869)*x197))+(((0.125714827021869)*x199))+(((-0.0217204301666192)*x198))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.0217204301666192)*x197))+(((0.0217204301666192)*x199))+(((0.01598112714)*x168))+(((0.125714827021869)*x198))+(((-0.125714827021869)*x201))+(((0.00276114608)*x167))+(((1.00000031999995)*pz)));
evalcond[2]=((((-0.999906250030051)*x201))+(((0.000799999488000328)*r01*x181))+(((0.000799999488000328)*r00*x169))+((x176*x180))+(((-1.0)*x174*x178))+(((0.000799999488000328)*r10*x174))+(((0.0136690356259093)*x197))+(((0.0136690356259093)*x199))+(((-6.39999590400262e-7)*r01*x169))+(((-1.0)*x200))+(((0.999906250030051)*x198))+((r21*x196))+(((0.000799999488000328)*r11*x176))+(((-1.0)*r20*x193))+(((-1.0)*r21*x187))+((x181*x191)));
evalcond[3]=((((-0.999999680000154)*r01*x176))+((x169*x186))+(((0.000799999744000123)*r01*x174))+(((0.999906250030051)*x197))+(((0.999906250030051)*x199))+(((-1.0)*x176*x179))+(((-1.0)*x169*x170))+(((0.0136690356259093)*x201))+((x181*x190))+((x181*x192))+(((-0.0136690356259093)*x198))+(((-1.0)*x174*x189)));
evalcond[4]=((((-6.39999590400262e-7)*rxp1_1*x174))+(((1.66692393599396e-5)*x198))+(((-6.39999590400262e-7)*rxp1_0*x169))+(((-1.0)*rxp1_2*x187))+(((-1.66692393599396e-5)*x201))+(((6.39999590400262e-7)*rxp0_0*x181))+(((0.000799999488000328)*rxp0_0*x169))+(((2.20891615714694e-6)*x168))+(((-1.0)*rxp0_2*x193))+(((6.39999590400262e-7)*rxp0_1*x176))+(((0.000799999488000328)*rxp0_1*x174))+((rxp1_2*x196))+(((0.000799999488000328)*rxp1_1*x176))+(((-4.88466791204601e-5)*x197))+(((-0.99999936000041)*rxp0_2*sj5))+(((0.000799999488000328)*rxp1_0*x181))+(((-1.27848976208334e-5)*x167))+(((-1.0)*x167*x171)));
evalcond[5]=((((1.66692393599396e-5)*x199))+(((1.66692393599396e-5)*x197))+(((-0.999999680000154)*rxp0_0*x174))+(((-0.999999680000154)*rxp1_0*x176))+(((-0.000799999744000123)*rxp1_1*x169))+((x168*x171))+(((0.000799999744000123)*rxp0_1*x181))+(((-4.88466791204601e-5)*x201))+(((2.20891615714694e-6)*x167))+(((0.000799999744000123)*rxp1_0*x174))+(((-0.000799999744000123)*rxp0_0*x176))+(((1.27848976208334e-5)*x168))+(((0.999999680000154)*rxp1_1*x181))+(((0.999999680000154)*rxp0_1*x169)));
evalcond[6]=((((-1.0)*py*x173*x174))+(((1.99999872000082)*npy*x185))+(((-1.0)*py*x176*x182))+((r11*x176*x183))+((r21*sj5*x183))+(((1.99999872000082)*npx*x184))+(((1.27999918080052e-6)*npy*py*x174))+((x173*x185))+(((-1.0)*cj5*r20*x183))+(((-6.39999590400262e-7)*x169*x175))+((r00*x169*x183))+(((-0.0051662130146932)*x197))+(((-1.0)*pp*x174*x178))+(((-1.0)*pp*r21*x187))+(((-1.0)*npx*x181*x188))+(((-1.0)*pp*x200))+(((-1.0)*px*x169*x173))+((npy*x169*x188))+((pp*x181*x191))+(((0.000799999488000328)*x175*x181))+(((-0.00133505358863162)*x167))+(((-0.00533592776102449)*x199))+(((-0.00391679762618581)*x168))+(((-1.27999918080052e-6)*x176*x177))+(((-1.0)*x182*x184))+(((-1.0)*px*x181*x182))+(((0.0151567045884037)*x201))+((pp*x176*x180))+((r10*x174*x183))+(((-0.0156546151850724)*x198)));
evalcond[7]=((((-1.0)*pp*x174*x189))+(((-0.0151567045884037)*x197))+(((-1.0)*pp*x176*x179))+(((0.000799999744000123)*x174*x175))+(((-1.0)*pp*x169*x170))+((pp*x169*x186))+(((0.00133505358863162)*x168))+(((0.00159999948800025)*cj5*npx*x172))+((cj5*x172*x195))+((pp*x181*x190))+((pp*x181*x192))+(((-1.99999936000031)*x169*x177))+(((-1.0)*py*x181*x195))+(((-0.00159999948800025)*x177*x181))+((py*x169*x194))+(((0.00533592776102449)*x198))+(((-0.00391679762618581)*x167))+(((-0.0051662130146932)*x201))+(((-0.999999680000154)*x175*x176))+(((-0.0156546151850724)*x199))+(((-1.0)*sj5*x172*x194))+(((1.99999936000031)*npx*sj5*x172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x202=IKPowWithIntegerCheck(IKsign(((-0.0199999934276769)+(((-0.00254244062641913)*cj3))+(((-0.0160173711139467)*sj3)))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal(((((-1.27848935296681e-5)*cj0*r00*sj5))+(((-0.000100571797251545)*cj0*cj3*cj5*r01))+(((8.04574378012357e-8)*cj3*r11*sj0*sj5))+(((-0.000100571797251545)*cj0*cj3*r00*sj5))+(((8.04574378012357e-8)*cj0*cj3*r01*sj5))+(((-1.39010664099538e-8)*cj0*cj5*r00*sj3))+(((-1.73763330124422e-5)*r10*sj0*sj3*sj5))+(((0.99990657)*cj3*pz))+(((0.125714746564431)*cj3*cj5*r21))+(((-4.13801202512436e-8)*cj3))+(((-1.02279148237345e-8)*cj5*r10*sj0))+(((-1.27848935296681e-5)*r21*sj5))+(((-1.73763330124422e-5)*cj5*r11*sj0*sj3))+(((-8.04574378012357e-8)*cj0*cj3*cj5*r00))+(((1.02279148237345e-8)*cj0*r01*sj5))+(((0.0159811169120852)*r20*sj5))+(((-5.6567937034263e-10)*sj3))+(((-0.000100571797251545)*cj3*r21*sj5))+(((-0.000100571797251545)*cj3*cj5*r11*sj0))+(((-1.73763330124422e-5)*cj0*cj5*r01*sj3))+(((0.01366904)*pz*sj3))+(((-1.73763330124422e-5)*r21*sj3*sj5))+(((-8.04574378012357e-8)*cj3*cj5*r10*sj0))+(((1.73763330124422e-5)*cj5*r20*sj3))+(((-1.73763330124422e-5)*cj0*r00*sj3*sj5))+(((-1.02279148237345e-8)*cj0*cj5*r00))+(((0.000100571797251545)*cj3*cj5*r20))+(((-1.27848935296681e-5)*r10*sj0*sj5))+(((0.0217204162655528)*r20*sj3*sj5))+(((0.125714746564431)*cj3*r20*sj5))+(((-1.39010664099538e-8)*cj5*r10*sj0*sj3))+(((1.02279148237345e-8)*r11*sj0*sj5))+(((1.27848935296681e-5)*cj5*r20))+(((0.0159811169120852)*cj5*r21))+(((-1.27848935296681e-5)*cj0*cj5*r01))+(((-0.000100571797251545)*cj3*r10*sj0*sj5))+(((0.0217204162655528)*cj5*r21*sj3))+(((-1.27848935296681e-5)*cj5*r11*sj0))+(((1.39010664099538e-8)*cj0*r01*sj3*sj5))+(((1.39010664099538e-8)*r11*sj0*sj3*sj5)))),IkReal(((((2.20891545029411e-6)*cj5*r11*sj0))+(((-1.76713236023529e-9)*r11*sj0*sj5))+(((2.20891545029411e-6)*cj0*r00*sj5))+(((0.99990657)*pz*sj3))+(((-0.000100571797251545)*r21*sj3*sj5))+(((-0.00276114431286764)*cj5*r21))+(((1.73763330124422e-5)*cj3*cj5*r11*sj0))+(((0.125714746564431)*cj5*r21*sj3))+(((1.73763330124422e-5)*cj3*r10*sj0*sj5))+(((2.20891545029411e-6)*r10*sj0*sj5))+(((5.6567937034263e-10)*cj3))+(((-0.000100571797251545)*cj5*r11*sj0*sj3))+(((1.73763330124422e-5)*cj0*cj3*r00*sj5))+(((-0.00276114431286764)*r20*sj5))+(((-8.04574378012357e-8)*cj5*r10*sj0*sj3))+(((0.125714746564431)*r20*sj3*sj5))+(((2.20891545029411e-6)*cj0*cj5*r01))+(((8.04574378012357e-8)*r11*sj0*sj3*sj5))+(((8.04574378012357e-8)*cj0*r01*sj3*sj5))+(((1.73763330124422e-5)*cj3*r21*sj5))+(((1.76713236023529e-9)*cj5*r10*sj0))+(((1.76713236023529e-9)*cj0*cj5*r00))+(((-0.01366904)*cj3*pz))+(((-0.0217204162655528)*cj3*r20*sj5))+(((2.20891545029411e-6)*r21*sj5))+(((-1.39010664099538e-8)*cj0*cj3*r01*sj5))+(((-2.20891545029411e-6)*cj5*r20))+(((-4.13801202512436e-8)*sj3))+(((0.000100571797251545)*cj5*r20*sj3))+(((-1.76713236023529e-9)*cj0*r01*sj5))+(((-0.000100571797251545)*r10*sj0*sj3*sj5))+(((1.73763330124422e-5)*cj0*cj3*cj5*r01))+(((-1.73763330124422e-5)*cj3*cj5*r20))+(((-0.0217204162655528)*cj3*cj5*r21))+(((1.39010664099538e-8)*cj0*cj3*cj5*r00))+(((-0.000100571797251545)*cj0*r00*sj3*sj5))+(((1.39010664099538e-8)*cj3*cj5*r10*sj0))+(((-0.000100571797251545)*cj0*cj5*r01*sj3))+(((-1.39010664099538e-8)*cj3*r11*sj0*sj5))+(((-8.04574378012357e-8)*cj0*cj5*r00*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x202.value)))+(x203.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x204=IKsin(j1);
IkReal x205=IKcos(j1);
IkReal x206=(cj0*sj5);
IkReal x207=((0.000799999744000123)*r11);
IkReal x208=((4.88466791204601e-5)*cj3);
IkReal x209=(px*sj0);
IkReal x210=((0.00159999897600066)*npx);
IkReal x211=(sj0*sj5);
IkReal x212=(pp*r01);
IkReal x213=(cj5*sj0);
IkReal x214=(npx*py);
IkReal x215=((6.39999590400262e-7)*r11);
IkReal x216=((0.000799999744000123)*r00);
IkReal x217=((6.39999590400262e-7)*r10);
IkReal x218=(cj0*cj5);
IkReal x219=((0.00159999897600066)*npy);
IkReal x220=((0.000799999488000328)*pp);
IkReal x221=(pz*sj5);
IkReal x222=(cj5*pz);
IkReal x223=((0.999999680000154)*r10);
IkReal x224=((0.99999936000041)*cj5);
IkReal x225=((1.27999918080052e-6)*px);
IkReal x226=((0.999999680000154)*r00);
IkReal x227=((0.999999680000154)*r11);
IkReal x228=((6.39999590400262e-7)*r00);
IkReal x229=((0.000799999744000123)*r10);
IkReal x230=((0.000799999488000328)*cj5);
IkReal x231=((0.00159999948800025)*npy);
IkReal x232=((1.99999936000031)*npy);
IkReal x233=((0.000799999488000328)*sj5);
IkReal x234=(sj3*x205);
IkReal x235=(cj3*x205);
IkReal x236=(cj3*x204);
IkReal x237=((0.99999936000041)*r20*sj5);
IkReal x238=(sj3*x204);
evalcond[0]=((((0.125714827021869)*x236))+(((0.125714827021869)*x234))+(((-0.00276114608)*x205))+(((0.01598112714)*x204))+(((0.0217204301666192)*x238))+x209+(((-0.0217204301666192)*x235))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.125714827021869)*x235))+(((0.01598112714)*x205))+(((0.0217204301666192)*x236))+(((0.0217204301666192)*x234))+(((-0.125714827021869)*x238))+(((1.00000031999995)*pz))+(((0.00276114608)*x204)));
evalcond[2]=((((0.000799999488000328)*r01*x218))+(((-0.999906250030051)*x238))+((x213*x217))+(((0.000799999488000328)*r00*x206))+(((-1.0)*r21*x224))+(((0.000799999488000328)*r11*x213))+(((-1.0)*x237))+(((-1.0)*r20*x230))+((x218*x228))+(((-1.0)*x211*x215))+((r21*x233))+(((0.999906250030051)*x235))+(((-6.39999590400262e-7)*r01*x206))+(((0.0136690356259093)*x236))+(((0.0136690356259093)*x234))+(((0.000799999488000328)*r10*x211)));
evalcond[3]=(((x206*x223))+(((0.000799999744000123)*r01*x211))+(((-1.0)*x206*x207))+(((-0.0136690356259093)*x235))+((x218*x229))+((x218*x227))+(((-0.999999680000154)*r01*x213))+(((-1.0)*x213*x216))+(((-1.0)*x211*x226))+(((0.999906250030051)*x236))+(((0.999906250030051)*x234))+(((0.0136690356259093)*x238)));
evalcond[4]=((((-1.0)*x204*x208))+((rxp1_2*x233))+(((-1.66692393599396e-5)*x238))+(((-1.27848976208334e-5)*x204))+(((-6.39999590400262e-7)*rxp1_0*x206))+(((-4.88466791204601e-5)*x234))+(((0.000799999488000328)*rxp0_1*x211))+(((2.20891615714694e-6)*x205))+(((0.000799999488000328)*rxp0_0*x206))+(((-1.0)*rxp0_2*x230))+(((6.39999590400262e-7)*rxp0_0*x218))+(((-1.0)*rxp1_2*x224))+(((0.000799999488000328)*rxp1_1*x213))+(((-0.99999936000041)*rxp0_2*sj5))+(((-6.39999590400262e-7)*rxp1_1*x211))+(((6.39999590400262e-7)*rxp0_1*x213))+(((0.000799999488000328)*rxp1_0*x218))+(((1.66692393599396e-5)*x235)));
evalcond[5]=((((0.000799999744000123)*rxp0_1*x218))+(((-0.999999680000154)*rxp0_0*x211))+((x205*x208))+(((1.27848976208334e-5)*x205))+(((0.000799999744000123)*rxp1_0*x211))+(((-0.000799999744000123)*rxp0_0*x213))+(((-4.88466791204601e-5)*x238))+(((-0.000799999744000123)*rxp1_1*x206))+(((2.20891615714694e-6)*x204))+(((0.999999680000154)*rxp1_1*x218))+(((0.999999680000154)*rxp0_1*x206))+(((-0.999999680000154)*rxp1_0*x213))+(((1.66692393599396e-5)*x236))+(((1.66692393599396e-5)*x234)));
evalcond[6]=(((r11*x213*x220))+((x210*x222))+((npy*x206*x225))+(((-1.0)*py*x213*x219))+(((-1.0)*pp*x211*x215))+((r00*x206*x220))+(((-6.39999590400262e-7)*x206*x212))+(((1.99999872000082)*npy*x222))+(((-1.0)*x219*x221))+(((-0.00133505358863162)*x204))+(((1.99999872000082)*npx*x221))+(((-1.0)*pp*x237))+((pp*x213*x217))+(((0.000799999488000328)*x212*x218))+((r21*sj5*x220))+(((-1.0)*px*x218*x219))+(((-1.0)*npx*x218*x225))+(((-0.00391679762618581)*x205))+(((-0.0156546151850724)*x235))+(((-1.0)*pp*r21*x224))+(((-0.00533592776102449)*x236))+(((-0.0051662130146932)*x234))+(((-1.0)*px*x206*x210))+((pp*x218*x228))+(((-1.27999918080052e-6)*x213*x214))+((r10*x211*x220))+(((-1.0)*py*x210*x211))+(((-1.0)*cj5*r20*x220))+(((1.27999918080052e-6)*npy*py*x211))+(((0.0151567045884037)*x238)));
evalcond[7]=((((0.00133505358863162)*x205))+((py*x206*x231))+(((0.00159999948800025)*cj5*npx*x209))+((cj5*x209*x232))+(((-1.0)*pp*x206*x207))+(((0.00533592776102449)*x235))+(((-1.0)*pp*x213*x216))+(((1.99999936000031)*npx*sj5*x209))+(((0.000799999744000123)*x211*x212))+(((-1.0)*py*x218*x232))+((pp*x206*x223))+(((-0.999999680000154)*x212*x213))+(((-0.0151567045884037)*x234))+(((-1.0)*pp*x211*x226))+(((-0.00391679762618581)*x204))+(((-0.0156546151850724)*x236))+(((-0.0051662130146932)*x238))+(((-1.99999936000031)*x206*x214))+(((-1.0)*sj5*x209*x231))+((pp*x218*x227))+((pp*x218*x229))+(((-0.00159999948800025)*x214*x218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x239=(px*sj0);
IkReal x240=((0.125714867250607)*pz);
IkReal x241=((0.125714827021869)*cj3);
IkReal x242=(cj0*py);
IkReal x243=((0.0217204301666192)*cj3);
IkReal x244=((0.0217204301666192)*sj3);
IkReal x245=((0.0217204371171557)*pz);
IkReal x246=((0.125714827021869)*sj3);
CheckValue<IkReal> x247=IKPowWithIntegerCheck(IKsign(((-0.0165390151721013)+(((-0.00413807582926013)*cj3))+(((9.160215548e-11)*sj3)))),-1);
if(!x247.valid){
continue;
}
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(((-1.1426726937472e-10)+(((-1.0)*x242*x244))+(((-1.0)*sj3*x240))+(((5.20258240147301e-9)*sj3))+(((-8.98878282015369e-10)*cj3))+((x239*x241))+((x239*x244))+(((-1.0)*x241*x242))+(((0.01598112714)*x239))+(((0.0027611469635666)*pz))+((cj3*x245))+(((-0.01598112714)*x242)))),IkReal(((-6.6136296556176e-10)+(((0.0159811322539599)*pz))+(((-1.0)*x242*x246))+(((0.00276114608)*x242))+(((-0.00276114608)*x239))+((sj3*x245))+((x239*x246))+((x242*x243))+(((-8.98878282015369e-10)*sj3))+(((-1.0)*x239*x243))+(((-5.20258240147301e-9)*cj3))+((cj3*x240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x247.value)))+(x248.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x249=IKsin(j1);
IkReal x250=IKcos(j1);
IkReal x251=(cj0*sj5);
IkReal x252=((0.000799999744000123)*r11);
IkReal x253=((4.88466791204601e-5)*cj3);
IkReal x254=(px*sj0);
IkReal x255=((0.00159999897600066)*npx);
IkReal x256=(sj0*sj5);
IkReal x257=(pp*r01);
IkReal x258=(cj5*sj0);
IkReal x259=(npx*py);
IkReal x260=((6.39999590400262e-7)*r11);
IkReal x261=((0.000799999744000123)*r00);
IkReal x262=((6.39999590400262e-7)*r10);
IkReal x263=(cj0*cj5);
IkReal x264=((0.00159999897600066)*npy);
IkReal x265=((0.000799999488000328)*pp);
IkReal x266=(pz*sj5);
IkReal x267=(cj5*pz);
IkReal x268=((0.999999680000154)*r10);
IkReal x269=((0.99999936000041)*cj5);
IkReal x270=((1.27999918080052e-6)*px);
IkReal x271=((0.999999680000154)*r00);
IkReal x272=((0.999999680000154)*r11);
IkReal x273=((6.39999590400262e-7)*r00);
IkReal x274=((0.000799999744000123)*r10);
IkReal x275=((0.000799999488000328)*cj5);
IkReal x276=((0.00159999948800025)*npy);
IkReal x277=((1.99999936000031)*npy);
IkReal x278=((0.000799999488000328)*sj5);
IkReal x279=(sj3*x250);
IkReal x280=(cj3*x250);
IkReal x281=(cj3*x249);
IkReal x282=((0.99999936000041)*r20*sj5);
IkReal x283=(sj3*x249);
evalcond[0]=((((0.01598112714)*x249))+(((-0.00276114608)*x250))+(((0.125714827021869)*x279))+(((0.125714827021869)*x281))+x254+(((-0.0217204301666192)*x280))+(((0.0217204301666192)*x283))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.00276114608)*x249))+(((0.125714827021869)*x280))+(((0.0217204301666192)*x281))+(((0.0217204301666192)*x279))+(((1.00000031999995)*pz))+(((-0.125714827021869)*x283))+(((0.01598112714)*x250)));
evalcond[2]=(((x258*x262))+(((0.0136690356259093)*x281))+(((0.999906250030051)*x280))+((x263*x273))+(((0.000799999488000328)*r00*x251))+((r21*x278))+(((0.0136690356259093)*x279))+(((-6.39999590400262e-7)*r01*x251))+(((0.000799999488000328)*r11*x258))+(((-0.999906250030051)*x283))+(((-1.0)*x282))+(((-1.0)*x256*x260))+(((0.000799999488000328)*r01*x263))+(((-1.0)*r21*x269))+(((-1.0)*r20*x275))+(((0.000799999488000328)*r10*x256)));
evalcond[3]=((((0.999906250030051)*x279))+(((-1.0)*x258*x261))+(((-1.0)*x251*x252))+(((0.0136690356259093)*x283))+(((-0.999999680000154)*r01*x258))+(((0.999906250030051)*x281))+((x263*x274))+((x263*x272))+(((0.000799999744000123)*r01*x256))+(((-0.0136690356259093)*x280))+((x251*x268))+(((-1.0)*x256*x271)));
evalcond[4]=(((rxp1_2*x278))+(((0.000799999488000328)*rxp0_1*x256))+(((-4.88466791204601e-5)*x279))+(((-1.0)*rxp0_2*x275))+(((0.000799999488000328)*rxp0_0*x251))+(((0.000799999488000328)*rxp1_0*x263))+(((6.39999590400262e-7)*rxp0_1*x258))+(((-6.39999590400262e-7)*rxp1_0*x251))+(((-1.0)*rxp1_2*x269))+(((1.66692393599396e-5)*x280))+(((-1.66692393599396e-5)*x283))+(((2.20891615714694e-6)*x250))+(((-1.0)*x249*x253))+(((0.000799999488000328)*rxp1_1*x258))+(((-6.39999590400262e-7)*rxp1_1*x256))+(((6.39999590400262e-7)*rxp0_0*x263))+(((-0.99999936000041)*rxp0_2*sj5))+(((-1.27848976208334e-5)*x249)));
evalcond[5]=((((0.000799999744000123)*rxp1_0*x256))+(((0.000799999744000123)*rxp0_1*x263))+(((1.66692393599396e-5)*x279))+(((0.999999680000154)*rxp1_1*x263))+(((1.27848976208334e-5)*x250))+(((0.999999680000154)*rxp0_1*x251))+((x250*x253))+(((-0.000799999744000123)*rxp0_0*x258))+(((1.66692393599396e-5)*x281))+(((-0.999999680000154)*rxp0_0*x256))+(((-4.88466791204601e-5)*x283))+(((-0.999999680000154)*rxp1_0*x258))+(((2.20891615714694e-6)*x249))+(((-0.000799999744000123)*rxp1_1*x251)));
evalcond[6]=((((1.27999918080052e-6)*npy*py*x256))+((pp*x263*x273))+(((-0.0051662130146932)*x279))+(((-0.00133505358863162)*x249))+(((-0.0156546151850724)*x280))+(((-1.0)*cj5*r20*x265))+(((0.0151567045884037)*x283))+(((-0.00533592776102449)*x281))+(((-1.0)*pp*r21*x269))+(((0.000799999488000328)*x257*x263))+(((-6.39999590400262e-7)*x251*x257))+((r21*sj5*x265))+((pp*x258*x262))+((npy*x251*x270))+((r10*x256*x265))+((x255*x267))+(((-1.0)*npx*x263*x270))+(((-0.00391679762618581)*x250))+((r11*x258*x265))+(((-1.27999918080052e-6)*x258*x259))+(((1.99999872000082)*npx*x266))+((r00*x251*x265))+(((1.99999872000082)*npy*x267))+(((-1.0)*py*x255*x256))+(((-1.0)*x264*x266))+(((-1.0)*py*x258*x264))+(((-1.0)*px*x263*x264))+(((-1.0)*pp*x256*x260))+(((-1.0)*px*x251*x255))+(((-1.0)*pp*x282)));
evalcond[7]=(((pp*x263*x274))+((pp*x263*x272))+(((0.00533592776102449)*x280))+(((-0.0156546151850724)*x281))+(((-0.0151567045884037)*x279))+(((-0.0051662130146932)*x283))+(((-1.0)*pp*x251*x252))+(((-1.0)*py*x263*x277))+(((-0.00159999948800025)*x259*x263))+(((-1.99999936000031)*x251*x259))+(((0.00159999948800025)*cj5*npx*x254))+(((0.000799999744000123)*x256*x257))+((pp*x251*x268))+(((1.99999936000031)*npx*sj5*x254))+(((-1.0)*sj5*x254*x276))+(((0.00133505358863162)*x250))+((cj5*x254*x277))+(((-0.999999680000154)*x257*x258))+(((-1.0)*pp*x256*x271))+((py*x251*x276))+(((-1.0)*pp*x258*x261))+(((-0.00391679762618581)*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.328503259145561)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x284=(npy*sj5);
IkReal x285=(npx*sj5);
IkReal x286=(cj5*npx);
IkReal x287=(cj5*npy);
if( IKabs(((-8.4014967404636)+(((-0.0133314306038031)*x284))+(((16.6642882547539)*x285))+(((16.6642882547539)*x287))+(((0.0133314306038031)*x286))+(((64.5029686737196)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.66685701656561)+(((2.94470282192554e-11)*x286))+(((10.2385682273821)*pp))+(((-2.94470282192554e-11)*x284))+(((3.68087852740693e-8)*x285))+(((3.68087852740693e-8)*x287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.4014967404636)+(((-0.0133314306038031)*x284))+(((16.6642882547539)*x285))+(((16.6642882547539)*x287))+(((0.0133314306038031)*x286))+(((64.5029686737196)*pp))))+IKsqr(((-1.66685701656561)+(((2.94470282192554e-11)*x286))+(((10.2385682273821)*pp))+(((-2.94470282192554e-11)*x284))+(((3.68087852740693e-8)*x285))+(((3.68087852740693e-8)*x287))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-8.4014967404636)+(((-0.0133314306038031)*x284))+(((16.6642882547539)*x285))+(((16.6642882547539)*x287))+(((0.0133314306038031)*x286))+(((64.5029686737196)*pp))), ((-1.66685701656561)+(((2.94470282192554e-11)*x286))+(((10.2385682273821)*pp))+(((-2.94470282192554e-11)*x284))+(((3.68087852740693e-8)*x285))+(((3.68087852740693e-8)*x287))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x288=IKcos(j3);
IkReal x289=IKsin(j3);
IkReal x290=(py*sj0);
IkReal x291=((0.000799999488000328)*cj5);
IkReal x292=(rxp0_1*sj0);
IkReal x293=(cj0*px);
IkReal x294=(pp*sj5);
IkReal x295=((0.99999936000041)*cj5);
IkReal x296=(cj0*pp);
IkReal x297=(npy*sj5);
IkReal x298=(rxp1_1*sj0);
IkReal x299=(cj5*npy);
IkReal x300=(cj0*rxp0_0);
IkReal x301=((0.99999936000041)*sj5);
IkReal x302=(r10*sj0);
IkReal x303=((6.39999590400262e-7)*cj5);
IkReal x304=((0.000799999488000328)*sj5);
IkReal x305=(cj5*npx);
IkReal x306=(r11*sj0);
IkReal x307=(npx*sj5);
IkReal x308=((0.00159999897600066)*pz);
IkReal x309=(cj0*rxp1_0);
IkReal x310=((1.27999918080052e-6)*pz);
IkReal x311=((1.99999872000082)*x307);
IkReal x312=((0.00159999897600066)*x305);
evalcond[0]=((0.162801769171753)+(((-2.157374264e-10)*x289))+(((-1.0)*pp))+(((0.0976699077163244)*x288)));
evalcond[1]=((0.125999981064013)+(((0.000799999744000123)*x305))+(((-0.0600085451372686)*x289))+(((0.378053768962813)*x288))+(((0.999999680000154)*x307))+(((0.999999680000154)*x299))+(((-0.000799999744000123)*x297)));
evalcond[2]=((-0.0199999936000031)+(((-1.0)*x298*x304))+((x291*x292))+((rxp1_2*x291))+(((-0.378053768962813)*x289))+((x291*x300))+(((-0.0600085451372686)*x288))+((x292*x301))+(((-6.39999590400262e-7)*rxp1_2*sj5))+((x295*x309))+((x295*x298))+((rxp0_2*x303))+((rxp0_2*x304))+(((-1.0)*x304*x309))+((x300*x301)));
evalcond[3]=((0.000117205415619287)+(((-1.99999872000082)*x290*x299))+(((-6.39999590400262e-7)*r21*x294))+(((-1.0)*x290*x312))+(((-1.0)*x290*x311))+((pp*r21*x291))+((x297*x310))+(((0.00159999897600066)*x293*x297))+(((-1.99999872000082)*x293*x299))+((pp*r20*x303))+(((-1.0)*x305*x310))+(((0.00159999897600066)*x290*x297))+(((6.20848390731193e-6)*x289))+(((-0.000799999488000328)*x294*x306))+(((-1.0)*x293*x312))+(((-1.0)*x293*x311))+((pp*x291*x302))+((r00*x291*x296))+(((-1.0)*x299*x308))+(((0.99999936000041)*x294*x302))+(((-1.0)*x307*x308))+((r01*x295*x296))+(((0.000799999488000328)*r20*x294))+(((0.99999936000041)*cj0*r00*x294))+((pp*x295*x306))+(((-0.000799999488000328)*cj0*r01*x294))+(((3.90224582326825e-5)*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
sj2=0.32262669;
cj2=0.94652629;
j2=0.346033286175404;
j1eval[0]=((-721177612.377074)+sj3+(((-432657165.51609)*cj3)));
j1eval[1]=IKsign(((-0.162801766425068)+(((2.25744343184e-10)*sj3))+(((-0.0976699076532808)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0.32262669;
cj2=0.94652629;
j2=0.346033286175404;
j1eval[0]=((-1.0)+(((-18.902694507902)*sj3))+(((-3.00042822071597)*cj3)));
j1eval[1]=IKsign(((-0.0199999935752335)+(((-0.37805376871264)*sj3))+(((-0.0600085451372686)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0.32262669;
cj2=0.94652629;
j2=0.346033286175404;
j1eval[0]=((-2.09969995499398)+sj3+(((-6.29999890595328)*cj3)));
j1eval[1]=IKsign(((-0.125999939523977)+(((0.0600085451372686)*sj3))+(((-0.37805376871264)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.74879844024662)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x313=(cj0*py);
IkReal x314=(px*sj0);
if( IKabs(((5.2631062982421e-8)+(((-1.27177362807748)*pz))+(((-2.29239355184228)*x313))+(((2.29239355184228)*x314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.48684147494407e-8)+(((-1.27177322111012)*x313))+(((1.27177322111012)*x314))+(((2.29239428540809)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.2631062982421e-8)+(((-1.27177362807748)*pz))+(((-2.29239355184228)*x313))+(((2.29239355184228)*x314))))+IKsqr(((-9.48684147494407e-8)+(((-1.27177322111012)*x313))+(((1.27177322111012)*x314))+(((2.29239428540809)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5.2631062982421e-8)+(((-1.27177362807748)*pz))+(((-2.29239355184228)*x313))+(((2.29239355184228)*x314))), ((-9.48684147494407e-8)+(((-1.27177322111012)*x313))+(((1.27177322111012)*x314))+(((2.29239428540809)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x315=IKsin(j1);
IkReal x316=IKcos(j1);
IkReal x317=(r10*sj5);
IkReal x318=((0.000116406311566519)*sj0);
IkReal x319=((0.145507936020666)*cj0);
IkReal x320=(px*sj0);
IkReal x321=((0.000799999744000123)*sj5);
IkReal x322=(cj0*r11);
IkReal x323=(cj5*sj0);
IkReal x324=(npx*py);
IkReal x325=(r01*sj0);
IkReal x326=(sj0*sj5);
IkReal x327=(cj0*sj5);
IkReal x328=(cj0*cj5);
IkReal x329=((0.00159999897600066)*npy);
IkReal x330=(pz*sj5);
IkReal x331=(cj5*pz);
IkReal x332=(cj5*r11);
IkReal x333=((0.000116406348816533)*sj5);
IkReal x334=((0.99999936000041)*sj5);
IkReal x335=((0.99999936000041)*cj5);
IkReal x336=(r21*sj5);
IkReal x337=((0.00159999897600066)*npx);
IkReal x338=((1.99999936000031)*npy);
IkReal x339=((0.000799999488000328)*cj5);
IkReal x340=((0.00159999948800025)*npy);
IkReal x341=((1.27999918080052e-6)*px);
evalcond[0]=((((-0.333561554502815)*x315))+x320+(((-1.0)*cj0*py))+(((-0.185053152094074)*x316)));
evalcond[1]=((-4.1384e-8)+(((-0.333561554502815)*x316))+(((1.00000031999995)*pz))+(((0.185053152094074)*x315)));
evalcond[2]=((((6.39999590400262e-7)*r10*x323))+(((0.874444887170904)*x315))+(((0.000799999488000328)*r11*x323))+(((-6.39999590400262e-7)*r01*x327))+(((-1.0)*r21*x335))+(((-6.39999590400262e-7)*r11*x326))+(((-1.0)*r20*x334))+(((-1.0)*r20*x339))+(((0.000799999488000328)*x336))+(((0.000799999488000328)*r00*x327))+(((0.000799999488000328)*sj0*x317))+(((6.39999590400262e-7)*r00*x328))+(((0.000799999488000328)*r01*x328))+(((0.485124202851839)*x316)));
evalcond[3]=((((-6.39999590400262e-7)*rxp1_1*x326))+(((-6.39999590400262e-7)*rxp1_0*x327))+(((-1.0)*rxp1_2*x335))+(((0.000102807440288324)*x316))+(((6.39999590400262e-7)*rxp0_0*x328))+(((0.000799999488000328)*rxp1_1*x323))+(((-1.0)*rxp0_2*x339))+(((-1.0)*rxp0_2*x334))+(((0.000799999488000328)*rxp1_0*x328))+(((6.39999590400262e-7)*rxp0_1*x323))+(((0.000799999488000328)*rxp0_0*x327))+(((0.000291944633224061)*x315))+(((0.000799999488000328)*rxp0_1*x326))+(((0.000799999488000328)*rxp1_2*sj5)));
evalcond[4]=((((0.999999680000154)*cj0*x317))+(((-1.0)*x321*x322))+(((-0.000799999744000123)*r00*x323))+(((-0.999999680000154)*r00*x326))+(((-0.999999680000154)*r01*x323))+(((0.000799999744000123)*r10*x328))+(((-0.874444887170904)*x316))+(((0.485124202851839)*x315))+((x321*x325))+(((0.999999680000154)*cj5*x322)));
evalcond[5]=((((-0.999999680000154)*rxp1_0*x323))+(((-0.000799999744000123)*rxp0_0*x323))+(((0.000799999744000123)*rxp0_1*x328))+((rxp1_0*sj0*x321))+(((0.000102807440288324)*x315))+(((0.999999680000154)*rxp0_1*x327))+(((-1.0)*cj0*rxp1_1*x321))+(((-0.999999680000154)*rxp0_0*x326))+(((-0.000291944633224061)*x316))+(((0.999999680000154)*rxp1_1*x328)));
evalcond[6]=(((x317*x318))+(((0.000116406311566519)*r00*x327))+(((9.31250492532152e-8)*r00*x328))+(((0.000116406311566519)*r01*x328))+(((-9.31250492532152e-8)*r11*x326))+(((-0.145507889458149)*r20*sj5))+((x331*x337))+(((-1.0)*x329*x330))+((x318*x332))+(((-0.145507889458149)*cj5*r21))+(((0.127238696165159)*x315))+(((-1.0)*px*x327*x337))+(((-9.31250492532152e-8)*r01*x327))+(((9.31250492532152e-8)*r10*x323))+(((-1.0)*py*x323*x329))+(((-1.27999918080052e-6)*x323*x324))+(((0.000116406311566519)*x336))+((npy*x327*x341))+(((-1.0)*npx*x328*x341))+(((1.99999872000082)*npy*x331))+(((0.0705894718993783)*x316))+(((-0.00159999897600066)*x324*x326))+(((1.99999872000082)*npx*x330))+(((1.27999918080052e-6)*npy*py*x326))+(((-0.000116406311566519)*cj5*r20))+(((-1.0)*px*x328*x329)));
evalcond[7]=((((-0.00159999948800025)*x324*x328))+((x317*x319))+(((-1.0)*sj5*x320*x340))+(((-1.99999936000031)*x324*x327))+((x319*x332))+((cj5*x320*x338))+(((0.000116406348816533)*r10*x328))+(((-0.145507936020666)*r01*x323))+(((-0.145507936020666)*r00*x326))+(((-0.127238696165159)*x316))+(((-0.000116406348816533)*r00*x323))+(((1.99999936000031)*npx*sj5*x320))+(((-1.0)*py*x328*x338))+(((-1.0)*x322*x333))+((x325*x333))+(((0.0705894718993783)*x315))+((py*x327*x340))+(((0.00159999948800025)*cj5*npx*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-4.21955306770505)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x342=(cj0*py);
IkReal x343=(px*sj0);
if( IKabs(((-1.98274231254548e-8)+(((0.479108579891485)*pz))+(((-2.88918748028318)*x342))+(((2.88918748028318)*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19566134684039e-7)+(((-0.479108426576813)*x343))+(((0.479108426576813)*x342))+(((2.88918840482303)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.98274231254548e-8)+(((0.479108579891485)*pz))+(((-2.88918748028318)*x342))+(((2.88918748028318)*x343))))+IKsqr(((-1.19566134684039e-7)+(((-0.479108426576813)*x343))+(((0.479108426576813)*x342))+(((2.88918840482303)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.98274231254548e-8)+(((0.479108579891485)*pz))+(((-2.88918748028318)*x342))+(((2.88918748028318)*x343))), ((-1.19566134684039e-7)+(((-0.479108426576813)*x343))+(((0.479108426576813)*x342))+(((2.88918840482303)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x344=IKcos(j1);
IkReal x345=IKsin(j1);
IkReal x346=(px*sj0);
IkReal x347=((0.000799999744000123)*sj5);
IkReal x348=(cj0*r11);
IkReal x349=(cj5*sj0);
IkReal x350=(npx*py);
IkReal x351=(r01*sj0);
IkReal x352=(sj0*sj5);
IkReal x353=(cj0*sj5);
IkReal x354=(cj0*cj5);
IkReal x355=((0.00159999897600066)*npy);
IkReal x356=(pz*sj5);
IkReal x357=(cj5*pz);
IkReal x358=(cj5*r20);
IkReal x359=(r21*sj5);
IkReal x360=((0.99999936000041)*sj5);
IkReal x361=((0.99999936000041)*cj5);
IkReal x362=((0.00159999897600066)*npx);
IkReal x363=((1.99999936000031)*npy);
IkReal x364=((0.00159999948800025)*npy);
IkReal x365=((9.32732310269249e-5)*sj5);
IkReal x366=((1.27999918080052e-6)*px);
evalcond[0]=((((0.0558600052869792)*x344))+(((-0.336854914193035)*x345))+x346+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((-0.336854914193035)*x344))+(((1.00000031999995)*pz))+(((-0.0558600052869792)*x345)));
evalcond[2]=((((-1.0)*r21*x361))+(((-1.0)*r20*x360))+(((0.000799999488000328)*x359))+(((-6.39999590400262e-7)*r01*x353))+(((0.163593952876273)*x344))+(((-6.39999590400262e-7)*r11*x352))+(((-0.986527434327627)*x345))+(((0.000799999488000328)*r00*x353))+(((0.000799999488000328)*r10*x352))+(((0.000799999488000328)*r11*x349))+(((0.000799999488000328)*r01*x354))+(((6.39999590400262e-7)*r00*x354))+(((6.39999590400262e-7)*r10*x349))+(((-0.000799999488000328)*x358)));
evalcond[3]=((((6.34507424833928e-6)*x344))+(((-6.39999590400262e-7)*rxp1_1*x352))+(((-0.000799999488000328)*cj5*rxp0_2))+(((-1.0)*rxp1_2*x361))+(((-6.39999590400262e-7)*rxp1_0*x353))+(((6.39999590400262e-7)*rxp0_0*x354))+(((6.39999590400262e-7)*rxp0_1*x349))+(((0.000277946560301901)*x345))+(((-1.0)*rxp0_2*x360))+(((0.000799999488000328)*rxp1_0*x354))+(((0.000799999488000328)*rxp0_0*x353))+(((0.000799999488000328)*rxp0_1*x352))+(((0.000799999488000328)*rxp1_1*x349))+(((0.000799999488000328)*rxp1_2*sj5)));
evalcond[4]=((((0.999999680000154)*cj5*x348))+(((0.163593952876273)*x345))+(((-0.999999680000154)*r00*x352))+(((-0.999999680000154)*r01*x349))+((x347*x351))+(((0.000799999744000123)*r10*x354))+(((-1.0)*x347*x348))+(((-0.000799999744000123)*r00*x349))+(((0.999999680000154)*r10*x353))+(((0.986527434327627)*x344)));
evalcond[5]=((((0.999999680000154)*rxp1_1*x354))+(((-1.0)*cj0*rxp1_1*x347))+(((0.000799999744000123)*rxp0_1*x354))+(((6.34507424833928e-6)*x345))+(((-0.999999680000154)*rxp1_0*x349))+(((0.999999680000154)*rxp0_1*x353))+((rxp1_0*sj0*x347))+(((-0.999999680000154)*rxp0_0*x352))+(((-0.000799999744000123)*rxp0_0*x349))+(((-0.000277946560301901)*x344)));
evalcond[6]=((((-1.0)*px*x354*x355))+(((-7.46185609436042e-8)*r01*x353))+(((1.27999918080052e-6)*npy*py*x352))+(((9.32732011795053e-5)*r00*x353))+(((9.32732011795053e-5)*x359))+(((-0.116591501474382)*r20*sj5))+(((-9.32732011795053e-5)*x358))+(((-0.00159999897600066)*x350*x352))+(((7.46185609436042e-8)*r10*x349))+(((-7.46185609436042e-8)*r11*x352))+(((9.32732011795053e-5)*r01*x354))+(((-1.0)*py*x349*x355))+(((-0.115020783828795)*x345))+(((1.99999872000082)*npy*x357))+((npy*x353*x366))+(((7.46185609436042e-8)*r00*x354))+(((0.0190737050919829)*x344))+(((1.99999872000082)*npx*x356))+(((9.32732011795053e-5)*r10*x352))+(((-1.27999918080052e-6)*x349*x350))+(((9.32732011795053e-5)*r11*x349))+(((-0.116591501474382)*cj5*r21))+(((-1.0)*px*x353*x362))+((x357*x362))+(((-1.0)*npx*x354*x366))+(((-1.0)*x355*x356)));
evalcond[7]=((((0.115020783828795)*x344))+((py*x353*x364))+((cj5*x346*x363))+(((-1.0)*py*x354*x363))+(((0.00159999948800025)*cj5*npx*x346))+(((0.116591538783656)*r10*x353))+(((1.99999936000031)*npx*sj5*x346))+(((-0.116591538783656)*r01*x349))+(((0.116591538783656)*cj5*x348))+(((0.0190737050919829)*x345))+(((-1.0)*sj5*x346*x364))+(((-1.99999936000031)*x350*x353))+(((-1.0)*x348*x365))+(((-0.116591538783656)*r00*x352))+(((9.32732310269249e-5)*r10*x354))+(((-9.32732310269249e-5)*r00*x349))+(((-0.00159999948800025)*x350*x354))+((x351*x365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.03644795430478)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x367=(cj0*py);
IkReal x368=(px*sj0);
if( IKabs(((3.57709368251701e-8)+(((-3.80529026328442)*x367))+(((-0.864366621686353)*pz))+(((3.80529026328442)*x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.57478132255762e-7)+(((3.80529148097711)*pz))+(((0.864366345089167)*x368))+(((-0.864366345089167)*x367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.57709368251701e-8)+(((-3.80529026328442)*x367))+(((-0.864366621686353)*pz))+(((3.80529026328442)*x368))))+IKsqr(((-1.57478132255762e-7)+(((3.80529148097711)*pz))+(((0.864366345089167)*x368))+(((-0.864366345089167)*x367))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.57709368251701e-8)+(((-3.80529026328442)*x367))+(((-0.864366621686353)*pz))+(((3.80529026328442)*x368))), ((-1.57478132255762e-7)+(((3.80529148097711)*pz))+(((0.864366345089167)*x368))+(((-0.864366345089167)*x367))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x369=IKsin(j1);
IkReal x370=IKcos(j1);
IkReal x371=(cj5*r21);
IkReal x372=(px*sj0);
IkReal x373=((0.000799999744000123)*sj5);
IkReal x374=(cj0*r11);
IkReal x375=(cj5*sj0);
IkReal x376=(npx*py);
IkReal x377=(r01*sj0);
IkReal x378=(sj0*sj5);
IkReal x379=(cj0*sj5);
IkReal x380=(cj0*cj5);
IkReal x381=((0.00159999897600066)*npy);
IkReal x382=(pz*sj5);
IkReal x383=(cj5*pz);
IkReal x384=((0.99999936000041)*sj5);
IkReal x385=(cj5*r20);
IkReal x386=((0.00159999897600066)*npx);
IkReal x387=((1.99999936000031)*npy);
IkReal x388=((0.00159999948800025)*npy);
IkReal x389=((1.27999918080052e-6)*px);
IkReal x390=(r21*sj5);
IkReal x391=((5.25369866904517e-5)*sj5);
evalcond[0]=((((-0.0567640198532954)*x370))+x372+(((-0.249898174865133)*x369))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.0567640198532954)*x369))+(((1.00000031999995)*pz))+(((-0.249898174865133)*x370)));
evalcond[2]=((((-0.99999936000041)*x371))+(((-6.39999590400262e-7)*r01*x379))+(((0.000799999488000328)*x390))+(((0.000799999488000328)*r10*x378))+(((-0.221505930280613)*x369))+(((0.000799999488000328)*r11*x375))+(((0.000799999488000328)*r01*x380))+(((6.39999590400262e-7)*r10*x375))+(((6.39999590400262e-7)*r00*x380))+(((-1.0)*r20*x384))+(((0.000799999488000328)*r00*x379))+(((-0.000799999488000328)*x385))+(((-6.39999590400262e-7)*r11*x378))+(((0.975158697431783)*x370)));
evalcond[3]=((((-6.39999590400262e-7)*rxp1_1*x378))+(((6.39999590400262e-7)*rxp0_0*x380))+(((-6.39999590400262e-7)*rxp1_0*x379))+(((-1.0)*rxp0_2*x384))+(((-0.99999936000041)*cj5*rxp1_2))+(((5.68697031244704e-5)*x370))+(((-0.000799999488000328)*cj5*rxp0_2))+(((6.39999590400262e-7)*rxp0_1*x375))+(((0.000799999488000328)*rxp0_0*x379))+(((0.000799999488000328)*rxp1_1*x375))+(((0.000799999488000328)*rxp0_1*x378))+(((0.000250363435336351)*x369))+(((0.000799999488000328)*rxp1_0*x380))+(((0.000799999488000328)*rxp1_2*sj5)));
evalcond[4]=((((0.999999680000154)*r10*x379))+(((-0.999999680000154)*r00*x378))+(((-0.999999680000154)*r01*x375))+(((0.000799999744000123)*r10*x380))+(((-1.0)*x373*x374))+(((0.975158697431783)*x369))+(((-0.000799999744000123)*r00*x375))+((x373*x377))+(((0.221505930280613)*x370))+(((0.999999680000154)*cj5*x374)));
evalcond[5]=((((0.000799999744000123)*rxp0_1*x380))+(((5.68697031244704e-5)*x369))+(((-0.000799999744000123)*rxp0_0*x375))+(((0.999999680000154)*rxp1_1*x380))+((rxp1_0*sj0*x373))+(((-1.0)*cj0*rxp1_1*x373))+(((-0.999999680000154)*rxp0_0*x378))+(((0.999999680000154)*rxp0_1*x379))+(((-0.999999680000154)*rxp1_0*x375))+(((-0.000250363435336351)*x370)));
evalcond[6]=((((5.2536969878624e-5)*x390))+(((5.2536969878624e-5)*r00*x379))+(((-4.20295759028992e-8)*r11*x378))+(((-1.0)*px*x380*x381))+(((-0.06567121234828)*x371))+(((-1.0)*x381*x382))+(((-1.0)*px*x379*x386))+((x383*x386))+(((-0.00159999897600066)*x376*x378))+(((-5.2536969878624e-5)*x385))+(((1.99999872000082)*npx*x382))+(((-4.20295759028992e-8)*r01*x379))+(((-1.0)*npx*x380*x389))+(((1.27999918080052e-6)*npy*py*x378))+(((4.20295759028992e-8)*r10*x375))+(((1.99999872000082)*npy*x383))+((npy*x379*x389))+(((0.0145465664394424)*x369))+(((4.20295759028992e-8)*r00*x380))+(((-1.27999918080052e-6)*x375*x376))+(((-0.06567121234828)*r20*sj5))+(((-0.0640398693551225)*x370))+(((5.2536969878624e-5)*r01*x380))+(((5.2536969878624e-5)*r11*x375))+(((5.2536969878624e-5)*r10*x378))+(((-1.0)*py*x375*x381)));
evalcond[7]=((((1.99999936000031)*npx*sj5*x372))+(((-1.99999936000031)*x376*x379))+(((-0.0656712333630646)*r01*x375))+(((-0.0656712333630646)*r00*x378))+(((-0.0145465664394424)*x370))+(((-1.0)*py*x380*x387))+(((-5.25369866904517e-5)*r00*x375))+((x377*x391))+(((0.0656712333630646)*cj5*x374))+(((5.25369866904517e-5)*r10*x380))+(((-1.0)*x374*x391))+(((0.00159999948800025)*cj5*npx*x372))+(((-0.00159999948800025)*x376*x380))+(((-0.0640398693551225)*x369))+(((0.0656712333630646)*r10*x379))+((cj5*x372*x387))+((py*x379*x388))+(((-1.0)*sj5*x372*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.07349620723669)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x392=(px*sj0);
IkReal x393=(cj0*py);
if( IKabs(((9.65137194118221e-9)+(((-1.95361056590105)*x393))+(((-0.233215132167522)*pz))+(((1.95361056590105)*x392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.0848219659249e-8)+(((1.95361119105633)*pz))+(((-0.233215057538716)*x393))+(((0.233215057538716)*x392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.65137194118221e-9)+(((-1.95361056590105)*x393))+(((-0.233215132167522)*pz))+(((1.95361056590105)*x392))))+IKsqr(((-8.0848219659249e-8)+(((1.95361119105633)*pz))+(((-0.233215057538716)*x393))+(((0.233215057538716)*x392))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((9.65137194118221e-9)+(((-1.95361056590105)*x393))+(((-0.233215132167522)*pz))+(((1.95361056590105)*x392))), ((-8.0848219659249e-8)+(((1.95361119105633)*pz))+(((-0.233215057538716)*x393))+(((0.233215057538716)*x392))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x394=IKsin(j1);
IkReal x395=IKcos(j1);
IkReal x396=(cj0*sj5);
IkReal x397=(px*sj0);
IkReal x398=(cj5*r21);
IkReal x399=(cj5*sj0);
IkReal x400=(npx*py);
IkReal x401=(sj0*sj5);
IkReal x402=(cj0*cj5);
IkReal x403=((0.00159999897600066)*npy);
IkReal x404=(pz*sj5);
IkReal x405=(cj5*pz);
IkReal x406=(r20*sj5);
IkReal x407=((0.00159999897600066)*npx);
IkReal x408=((1.99999936000031)*npy);
IkReal x409=(cj5*r20);
IkReal x410=((0.00159999948800025)*npy);
IkReal x411=((1.27999918080052e-6)*px);
IkReal x412=((0.000799999488000328)*sj5);
evalcond[0]=((((-0.504680674236982)*x394))+x397+(((-0.0602469778446198)*x395))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((-0.504680674236982)*x395))+(((1.00000031999995)*pz))+(((0.0602469778446198)*x394)));
evalcond[2]=((((0.000799999488000328)*r11*x399))+(((0.000799999488000328)*r10*x401))+(((6.39999590400262e-7)*r10*x399))+(((-0.000799999488000328)*x409))+(((-6.39999590400262e-7)*r01*x396))+(((0.118534777967711)*x394))+((r21*x412))+(((-6.39999590400262e-7)*r11*x401))+(((-0.992949580653036)*x395))+(((0.000799999488000328)*r00*x396))+(((6.39999590400262e-7)*r00*x402))+(((-0.99999936000041)*x406))+(((-0.99999936000041)*x398))+(((0.000799999488000328)*r01*x402)));
evalcond[3]=((((0.000352379128384213)*x394))+(((-6.39999590400262e-7)*rxp1_0*x396))+(((6.39999590400262e-7)*rxp0_1*x399))+(((-0.99999936000041)*cj5*rxp1_2))+(((0.000799999488000328)*rxp0_1*x401))+(((-0.000799999488000328)*cj5*rxp0_2))+(((0.000799999488000328)*rxp1_0*x402))+((rxp1_2*x412))+(((6.39999590400262e-7)*rxp0_0*x402))+(((-6.39999590400262e-7)*rxp1_1*x401))+(((0.000799999488000328)*rxp0_0*x396))+(((4.20657627882072e-5)*x395))+(((0.000799999488000328)*rxp1_1*x399))+(((-0.99999936000041)*rxp0_2*sj5)));
evalcond[4]=((((-0.999999680000154)*r01*x399))+(((0.999999680000154)*r10*x396))+(((0.000799999744000123)*r01*x401))+(((-0.000799999744000123)*r11*x396))+(((-0.992949580653036)*x394))+(((0.999999680000154)*r11*x402))+(((-0.118534777967711)*x395))+(((0.000799999744000123)*r10*x402))+(((-0.000799999744000123)*r00*x399))+(((-0.999999680000154)*r00*x401)));
evalcond[5]=((((0.000799999744000123)*rxp0_1*x402))+(((-0.000799999744000123)*rxp0_0*x399))+(((-0.000799999744000123)*rxp1_1*x396))+(((-0.000352379128384213)*x395))+(((0.000799999744000123)*rxp1_0*x401))+(((-0.999999680000154)*rxp0_0*x401))+(((4.20657627882072e-5)*x394))+(((0.999999680000154)*rxp0_1*x396))+(((0.999999680000154)*rxp1_1*x402))+(((-0.999999680000154)*rxp1_0*x399)));
evalcond[6]=(((npy*x396*x411))+((x405*x407))+(((-0.00159999897600066)*x400*x401))+(((-1.0)*px*x396*x407))+(((0.256510969280356)*x395))+(((-1.0)*py*x399*x403))+(((-1.0)*x403*x404))+(((-0.25833211868744)*x398))+(((1.27999918080052e-6)*npy*py*x401))+(((0.000206665694949952)*r10*x401))+(((0.000206665694949952)*r01*x402))+(((1.65332555959962e-7)*r10*x399))+(((-0.000206665694949952)*x409))+(((-1.65332555959962e-7)*r11*x401))+(((-1.27999918080052e-6)*x399*x400))+(((0.000206665694949952)*r21*sj5))+(((-1.65332555959962e-7)*r01*x396))+(((1.99999872000082)*npx*x404))+(((-1.0)*px*x402*x403))+(((-0.0306213640435371)*x394))+(((0.000206665694949952)*r11*x399))+(((1.99999872000082)*npy*x405))+(((-1.0)*npx*x402*x411))+(((0.000206665694949952)*r00*x396))+(((-0.25833211868744)*x406))+(((1.65332555959962e-7)*r00*x402)));
evalcond[7]=((((-0.000206665761082964)*r11*x396))+(((0.256510969280356)*x394))+(((0.258332201353705)*r11*x402))+(((-1.0)*sj5*x397*x410))+(((-0.258332201353705)*r00*x401))+(((0.00159999948800025)*cj5*npx*x397))+(((-1.99999936000031)*x396*x400))+((cj5*x397*x408))+(((-0.00159999948800025)*x400*x402))+(((0.000206665761082964)*r01*x401))+(((-0.000206665761082964)*r00*x399))+(((-0.258332201353705)*r01*x399))+(((-1.0)*py*x402*x408))+((py*x396*x410))+(((0.000206665761082964)*r10*x402))+(((0.258332201353705)*r10*x396))+(((0.0306213640435371)*x395))+(((1.99999936000031)*npx*sj5*x397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(((((4.17091517893429e-8)*cj5*r10*sj0))+(((5.21364397366786e-5)*r10*sj0*sj5))+(((-0.322626586759509)*cj0*py*sj3))+(((1.73763334291196e-5)*cj0*cj3*cj5*r01))+(((-0.0651705496708482)*r20*sj5))+(((-8.04574380493031e-8)*r11*sj0*sj3*sj5))+(((-0.000100571797561629)*cj5*r20*sj3))+(((-1.39010667432957e-8)*cj0*cj3*r01*sj5))+(((0.000100571797561629)*cj0*r00*sj3*sj5))+(((5.21364397366786e-5)*cj0*cj5*r01))+(((-0.125714746952036)*cj5*r21*sj3))+(((1.73763334291196e-5)*cj3*r21*sj5))+(((8.04574380493031e-8)*cj0*cj5*r00*sj3))+(((1.73763334291196e-5)*cj3*r10*sj0*sj5))+(((0.000100571797561629)*r10*sj0*sj3*sj5))+(((0.000100571797561629)*r21*sj3*sj5))+(((-0.0651705496708482)*cj5*r21))+(((-8.04574380493031e-8)*cj0*r01*sj3*sj5))+(((-0.0217204167863995)*cj3*r20*sj5))+(((-0.946525987111733)*cj3*px*sj0))+(((1.73763334291196e-5)*cj3*cj5*r11*sj0))+(((-5.21364397366786e-5)*cj5*r20))+(((0.322626586759509)*px*sj0*sj3))+(((5.21364397366786e-5)*cj0*r00*sj5))+(((1.73763334291196e-5)*cj0*cj3*r00*sj5))+(((-1.73763334291196e-5)*cj3*cj5*r20))+(((1.39010667432957e-8)*cj0*cj3*cj5*r00))+(((-1.39010667432957e-8)*cj3*r11*sj0*sj5))+(((1.39010667432957e-8)*cj3*cj5*r10*sj0))+(((-4.17091517893429e-8)*r11*sj0*sj5))+(((5.21364397366786e-5)*r21*sj5))+(((4.17091517893429e-8)*cj0*cj5*r00))+(((8.04574380493031e-8)*cj5*r10*sj0*sj3))+(((0.946525987111733)*cj0*cj3*py))+(((-0.0217204167863995)*cj3*cj5*r21))+(((5.21364397366786e-5)*cj5*r11*sj0))+(((0.000100571797561629)*cj0*cj5*r01*sj3))+(((-0.125714746952036)*r20*sj3*sj5))+(((-4.17091517893429e-8)*cj0*r01*sj5))+(((0.000100571797561629)*cj5*r11*sj0*sj3)))),IkReal(((((8.04574380493031e-8)*cj0*cj3*r01*sj5))+(((2.41406764270871e-7)*cj0*r01*sj5))+(((0.125714746952036)*cj3*r20*sj5))+(((1.39010667432957e-8)*cj5*r10*sj0*sj3))+(((1.73763334291196e-5)*cj0*cj5*r01*sj3))+(((-2.41406764270871e-7)*cj0*cj5*r00))+(((-0.000301758455338589)*r21*sj5))+(((-1.39010667432957e-8)*r11*sj0*sj3*sj5))+(((8.04574380493031e-8)*cj3*r11*sj0*sj5))+(((0.125714746952036)*cj3*cj5*r21))+(((-1.73763334291196e-5)*cj5*r20*sj3))+(((-0.000100571797561629)*cj3*r21*sj5))+(((-0.000301758455338589)*cj0*r00*sj5))+(((-0.322626586759509)*cj3*px*sj0))+(((-8.04574380493031e-8)*cj3*cj5*r10*sj0))+(((-8.04574380493031e-8)*cj0*cj3*cj5*r00))+(((-1.39010667432957e-8)*cj0*r01*sj3*sj5))+(((2.41406764270871e-7)*r11*sj0*sj5))+(((1.39010667432957e-8)*cj0*cj5*r00*sj3))+(((-0.000301758455338589)*cj0*cj5*r01))+(((-0.0217204167863995)*r20*sj3*sj5))+(((-0.946525987111733)*px*sj0*sj3))+(((-0.0217204167863995)*cj5*r21*sj3))+(((-0.000100571797561629)*cj0*cj3*r00*sj5))+(((1.73763334291196e-5)*cj0*r00*sj3*sj5))+(((1.73763334291196e-5)*r21*sj3*sj5))+(((0.322626586759509)*cj0*cj3*py))+(((-0.000100571797561629)*cj3*r10*sj0*sj5))+(((0.946525987111733)*cj0*py*sj3))+(((-0.000100571797561629)*cj0*cj3*cj5*r01))+(((0.377198069173236)*r20*sj5))+(((-0.000301758455338589)*cj5*r11*sj0))+(((-2.41406764270871e-7)*cj5*r10*sj0))+(((1.73763334291196e-5)*r10*sj0*sj3*sj5))+(((-0.000301758455338589)*r10*sj0*sj5))+(((0.000100571797561629)*cj3*cj5*r20))+(((1.73763334291196e-5)*cj5*r11*sj0*sj3))+(((-0.000100571797561629)*cj3*cj5*r11*sj0))+(((0.377198069173236)*cj5*r21))+(((0.000301758455338589)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414=IKPowWithIntegerCheck(IKsign(((-0.125999939523977)+(((0.0600085451372686)*sj3))+(((-0.37805376871264)*cj3)))),-1);
if(!x414.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x413.value)+(((1.5707963267949)*(x414.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x415=IKsin(j1);
IkReal x416=IKcos(j1);
IkReal x417=(px*sj0);
IkReal x418=(cj0*sj5);
IkReal x419=((0.000799999744000123)*r11);
IkReal x420=(sj0*sj5);
IkReal x421=(pp*r10);
IkReal x422=(cj5*sj0);
IkReal x423=(npx*py);
IkReal x424=((6.39999590400262e-7)*r11);
IkReal x425=((0.000799999744000123)*r00);
IkReal x426=(cj0*cj5);
IkReal x427=((0.00159999897600066)*npy);
IkReal x428=((0.000799999488000328)*pp);
IkReal x429=(pz*sj5);
IkReal x430=(cj5*pz);
IkReal x431=((0.99999936000041)*cj5);
IkReal x432=((1.27999918080052e-6)*px);
IkReal x433=((6.39999590400262e-7)*r01);
IkReal x434=((0.999999680000154)*r00);
IkReal x435=((0.00159999897600066)*npx);
IkReal x436=((1.99999936000031)*npy);
IkReal x437=((0.00159999948800025)*npy);
IkReal x438=((0.000799999744000123)*r01);
IkReal x439=((0.999999680000154)*pp);
IkReal x440=((6.39999590400262e-7)*r00);
IkReal x441=((0.000799999488000328)*cj5);
IkReal x442=((0.000799999488000328)*sj5);
IkReal x443=(sj3*x415);
IkReal x444=(cj3*x415);
IkReal x445=((0.946525987111733)*x416);
IkReal x446=(cj3*x416);
IkReal x447=((0.99999936000041)*r20*sj5);
IkReal x448=(sj3*x416);
evalcond[0]=((((-0.06517059138)*x416))+x417+(((-0.125714827409474)*x448))+(((-0.125714827409474)*x444))+(((0.0217204306874662)*x443))+(((-0.0217204306874662)*x446))+(((-1.0)*cj0*py))+(((-0.37719831058)*x415)));
evalcond[1]=((-4.1384e-8)+(((0.06517059138)*x415))+(((0.125714827409474)*x443))+(((-0.125714827409474)*x446))+(((0.0217204306874662)*x444))+(((0.0217204306874662)*x448))+(((1.00000031999995)*pz))+(((-0.37719831058)*x416)));
evalcond[2]=((((0.000799999488000328)*r00*x418))+(((-1.0)*x447))+(((-1.0)*x420*x424))+(((-1.0)*cj3*x445))+(((0.000799999488000328)*r11*x422))+((x426*x440))+(((0.000799999488000328)*r01*x426))+((r21*x442))+(((0.322626586759509)*x448))+(((0.322626586759509)*x444))+(((6.39999590400262e-7)*r10*x422))+(((-1.0)*r21*x431))+(((0.000799999488000328)*r10*x420))+(((-1.0)*r20*x441))+(((0.946525987111733)*x443))+(((-1.0)*x418*x433)));
evalcond[3]=((((-1.0)*x422*x425))+(((-1.0)*sj3*x445))+(((-1.0)*x418*x419))+(((-0.999999680000154)*r01*x422))+(((-1.0)*x420*x434))+(((-0.322626586759509)*x446))+(((0.999999680000154)*r10*x418))+(((0.322626586759509)*x443))+(((0.000799999744000123)*r10*x426))+((x420*x438))+(((0.999999680000154)*r11*x426))+(((-0.946525987111733)*x444)));
evalcond[4]=((((-1.0)*rxp0_2*x441))+(((6.39999590400262e-7)*rxp0_1*x422))+((rxp1_2*x442))+(((-6.39999590400262e-7)*rxp1_1*x420))+(((0.000799999488000328)*rxp1_1*x422))+(((0.000799999488000328)*rxp0_0*x418))+(((0.000799999488000328)*rxp0_1*x420))+(((-6.39999590400262e-7)*rxp1_0*x418))+(((-1.0)*rxp1_2*x431))+(((0.000799999488000328)*rxp1_0*x426))+(((5.16080404313091e-5)*x448))+(((5.16080404313091e-5)*x444))+(((6.86865656475985e-7)*x446))+(((0.000301758551901279)*x415))+(((5.21364564203366e-5)*x416))+(((6.39999590400262e-7)*rxp0_0*x426))+(((-0.99999936000041)*rxp0_2*sj5))+(((-6.86865656475985e-7)*x443)));
evalcond[5]=((((-0.999999680000154)*rxp1_0*x422))+(((0.000799999744000123)*rxp0_1*x426))+(((-0.000301758551901279)*x416))+(((0.000799999744000123)*rxp1_0*x420))+(((0.999999680000154)*rxp1_1*x426))+(((0.999999680000154)*rxp0_1*x418))+(((5.16080404313091e-5)*x443))+(((6.86865656475985e-7)*x448))+(((6.86865656475985e-7)*x444))+(((5.21364564203366e-5)*x415))+(((-0.000799999744000123)*rxp0_0*x422))+(((-0.999999680000154)*rxp0_0*x420))+(((-5.16080404313091e-5)*x446))+(((-0.000799999744000123)*rxp1_1*x418)));
evalcond[6]=((((-1.0)*cj5*r20*x428))+(((1.99999872000082)*npx*x429))+(((-1.0)*pp*x418*x433))+((pp*x426*x440))+(((-1.0)*x427*x429))+(((-1.0)*pp*r21*x431))+(((0.0976607828019318)*x416))+(((1.99999872000082)*npy*x430))+(((0.162786512399638)*x446))+((r00*x418*x428))+((r11*x422*x428))+(((-0.00133505896455705)*x415))+(((0.00178038770336351)*x448))+(((-1.0)*px*x418*x435))+(((-1.0)*npx*x426*x432))+(((6.39999590400262e-7)*x421*x422))+(((1.27999918080052e-6)*npy*py*x420))+(((-0.00222534399784255)*x444))+((x430*x435))+(((-1.0)*pp*x420*x424))+((r21*sj5*x428))+(((-1.0)*px*x426*x427))+(((-1.0)*py*x422*x427))+((r01*x426*x428))+(((0.000799999488000328)*x420*x421))+(((0.130237558364674)*x443))+((npy*x418*x432))+(((-0.00159999897600066)*x420*x423))+(((-1.27999918080052e-6)*x422*x423))+(((-1.0)*pp*x447)));
evalcond[7]=((((-1.0)*py*x426*x436))+((r11*x426*x439))+(((0.0976607828019318)*x415))+(((0.00133505896455705)*x416))+(((0.999999680000154)*x418*x421))+(((-1.0)*sj5*x417*x437))+(((0.162786512399638)*x444))+(((-0.00159999948800025)*x423*x426))+(((-1.0)*pp*x420*x434))+(((0.00178038770336351)*x443))+(((-0.130237558364674)*x448))+((cj5*x417*x436))+(((1.99999936000031)*npx*sj5*x417))+((pp*x420*x438))+(((0.00222534399784255)*x446))+((py*x418*x437))+(((-1.0)*pp*x418*x419))+(((-1.0)*r01*x422*x439))+(((-1.99999936000031)*x418*x423))+(((-1.0)*pp*x422*x425))+(((0.000799999744000123)*x421*x426))+(((0.00159999948800025)*cj5*npx*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x449 = IKatan2WithCheck(IkReal(((((3.91710314506319e-8)*cj3))+(((-0.000301758455338589)*cj5*r20))+(((-1.73763334291196e-5)*cj0*r00*sj3*sj5))+(((0.000100571797561629)*cj3*r21*sj5))+(((1.39010667432957e-8)*cj0*r01*sj3*sj5))+(((-1.73763334291196e-5)*cj5*r11*sj0*sj3))+(((0.32262669)*pz*sj3))+(((0.000100571797561629)*cj0*cj3*r00*sj5))+(((0.000100571797561629)*cj3*cj5*r11*sj0))+(((1.39010667432957e-8)*r11*sj0*sj3*sj5))+(((8.04574380493031e-8)*cj0*cj3*cj5*r00))+(((-8.04574380493031e-8)*cj0*cj3*r01*sj5))+(((-1.33515786664555e-8)*sj3))+(((-2.41406764270871e-7)*cj0*r01*sj5))+(((0.0217204167863995)*cj5*r21*sj3))+(((-0.94652629)*cj3*pz))+(((0.000301758455338589)*cj5*r11*sj0))+(((2.41406764270871e-7)*cj5*r10*sj0))+(((-1.73763334291196e-5)*cj0*cj5*r01*sj3))+(((-1.73763334291196e-5)*r10*sj0*sj3*sj5))+(((-0.377198069173236)*cj5*r21))+(((0.000301758455338589)*r10*sj0*sj5))+(((-0.125714746952036)*cj3*cj5*r21))+(((-1.39010667432957e-8)*cj0*cj5*r00*sj3))+(((0.000100571797561629)*cj3*r10*sj0*sj5))+(((0.000301758455338589)*r21*sj5))+(((0.0217204167863995)*r20*sj3*sj5))+(((8.04574380493031e-8)*cj3*cj5*r10*sj0))+(((0.000100571797561629)*cj0*cj3*cj5*r01))+(((-2.41406764270871e-7)*r11*sj0*sj5))+(((1.73763334291196e-5)*cj5*r20*sj3))+(((-1.39010667432957e-8)*cj5*r10*sj0*sj3))+(((-0.000100571797561629)*cj3*cj5*r20))+(((-0.377198069173236)*r20*sj5))+(((-8.04574380493031e-8)*cj3*r11*sj0*sj5))+(((-1.73763334291196e-5)*r21*sj3*sj5))+(((-0.125714746952036)*cj3*r20*sj5))+(((0.000301758455338589)*cj0*r00*sj5))+(((0.000301758455338589)*cj0*cj5*r01))+(((2.41406764270871e-7)*cj0*cj5*r00)))),IkReal(((((4.17091517893429e-8)*cj5*r10*sj0))+(((5.21364397366786e-5)*r10*sj0*sj5))+(((1.73763334291196e-5)*cj0*cj3*cj5*r01))+(((-0.0651705496708482)*r20*sj5))+(((-8.04574380493031e-8)*r11*sj0*sj3*sj5))+(((-0.000100571797561629)*cj5*r20*sj3))+(((-1.39010667432957e-8)*cj0*cj3*r01*sj5))+(((0.000100571797561629)*cj0*r00*sj3*sj5))+(((-0.94652629)*pz*sj3))+(((5.21364397366786e-5)*cj0*cj5*r01))+(((-0.125714746952036)*cj5*r21*sj3))+(((1.73763334291196e-5)*cj3*r21*sj5))+(((8.04574380493031e-8)*cj0*cj5*r00*sj3))+(((1.73763334291196e-5)*cj3*r10*sj0*sj5))+(((0.000100571797561629)*r10*sj0*sj3*sj5))+(((0.000100571797561629)*r21*sj3*sj5))+(((-0.0651705496708482)*cj5*r21))+(((-8.04574380493031e-8)*cj0*r01*sj3*sj5))+(((-0.0217204167863995)*cj3*r20*sj5))+(((-0.32262669)*cj3*pz))+(((1.73763334291196e-5)*cj3*cj5*r11*sj0))+(((-5.21364397366786e-5)*cj5*r20))+(((3.91710314506319e-8)*sj3))+(((5.21364397366786e-5)*cj0*r00*sj5))+(((1.73763334291196e-5)*cj0*cj3*r00*sj5))+(((-1.73763334291196e-5)*cj3*cj5*r20))+(((1.39010667432957e-8)*cj0*cj3*cj5*r00))+(((-1.39010667432957e-8)*cj3*r11*sj0*sj5))+(((1.39010667432957e-8)*cj3*cj5*r10*sj0))+(((-4.17091517893429e-8)*r11*sj0*sj5))+(((5.21364397366786e-5)*r21*sj5))+(((4.17091517893429e-8)*cj0*cj5*r00))+(((8.04574380493031e-8)*cj5*r10*sj0*sj3))+(((-0.0217204167863995)*cj3*cj5*r21))+(((1.33515786664555e-8)*cj3))+(((5.21364397366786e-5)*cj5*r11*sj0))+(((0.000100571797561629)*cj0*cj5*r01*sj3))+(((-0.125714746952036)*r20*sj3*sj5))+(((-4.17091517893429e-8)*cj0*r01*sj5))+(((0.000100571797561629)*cj5*r11*sj0*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450=IKPowWithIntegerCheck(IKsign(((-0.0199999935752335)+(((-0.37805376871264)*sj3))+(((-0.0600085451372686)*cj3)))),-1);
if(!x450.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x449.value)+(((1.5707963267949)*(x450.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x451=IKsin(j1);
IkReal x452=IKcos(j1);
IkReal x453=(px*sj0);
IkReal x454=(cj0*sj5);
IkReal x455=((0.000799999744000123)*r11);
IkReal x456=(sj0*sj5);
IkReal x457=(pp*r10);
IkReal x458=(cj5*sj0);
IkReal x459=(npx*py);
IkReal x460=((6.39999590400262e-7)*r11);
IkReal x461=((0.000799999744000123)*r00);
IkReal x462=(cj0*cj5);
IkReal x463=((0.00159999897600066)*npy);
IkReal x464=((0.000799999488000328)*pp);
IkReal x465=(pz*sj5);
IkReal x466=(cj5*pz);
IkReal x467=((0.99999936000041)*cj5);
IkReal x468=((1.27999918080052e-6)*px);
IkReal x469=((6.39999590400262e-7)*r01);
IkReal x470=((0.999999680000154)*r00);
IkReal x471=((0.00159999897600066)*npx);
IkReal x472=((1.99999936000031)*npy);
IkReal x473=((0.00159999948800025)*npy);
IkReal x474=((0.000799999744000123)*r01);
IkReal x475=((0.999999680000154)*pp);
IkReal x476=((6.39999590400262e-7)*r00);
IkReal x477=((0.000799999488000328)*cj5);
IkReal x478=((0.000799999488000328)*sj5);
IkReal x479=(sj3*x451);
IkReal x480=(cj3*x451);
IkReal x481=((0.946525987111733)*x452);
IkReal x482=(cj3*x452);
IkReal x483=((0.99999936000041)*r20*sj5);
IkReal x484=(sj3*x452);
evalcond[0]=((((0.0217204306874662)*x479))+(((-0.37719831058)*x451))+(((-0.125714827409474)*x480))+(((-0.125714827409474)*x484))+x453+(((-0.0217204306874662)*x482))+(((-0.06517059138)*x452))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.0217204306874662)*x480))+(((0.0217204306874662)*x484))+(((-0.37719831058)*x452))+(((-0.125714827409474)*x482))+(((0.125714827409474)*x479))+(((1.00000031999995)*pz))+(((0.06517059138)*x451)));
evalcond[2]=(((r21*x478))+(((0.946525987111733)*x479))+((x462*x476))+(((-1.0)*x483))+(((-1.0)*x456*x460))+(((0.000799999488000328)*r00*x454))+(((-1.0)*x454*x469))+(((0.000799999488000328)*r01*x462))+(((-1.0)*cj3*x481))+(((0.000799999488000328)*r10*x456))+(((0.000799999488000328)*r11*x458))+(((0.322626586759509)*x484))+(((0.322626586759509)*x480))+(((-1.0)*r21*x467))+(((6.39999590400262e-7)*r10*x458))+(((-1.0)*r20*x477)));
evalcond[3]=((((-0.946525987111733)*x480))+(((0.322626586759509)*x479))+(((-1.0)*x456*x470))+(((0.999999680000154)*r11*x462))+(((-1.0)*sj3*x481))+(((-1.0)*x454*x455))+(((0.000799999744000123)*r10*x462))+(((-0.322626586759509)*x482))+(((-1.0)*x458*x461))+(((0.999999680000154)*r10*x454))+(((-0.999999680000154)*r01*x458))+((x456*x474)));
evalcond[4]=((((6.39999590400262e-7)*rxp0_0*x462))+(((0.000799999488000328)*rxp1_1*x458))+(((0.000799999488000328)*rxp1_0*x462))+(((-6.86865656475985e-7)*x479))+(((-6.39999590400262e-7)*rxp1_0*x454))+(((0.000301758551901279)*x451))+(((5.21364564203366e-5)*x452))+(((-1.0)*rxp1_2*x467))+(((5.16080404313091e-5)*x480))+(((5.16080404313091e-5)*x484))+(((6.39999590400262e-7)*rxp0_1*x458))+((rxp1_2*x478))+(((0.000799999488000328)*rxp0_0*x454))+(((-1.0)*rxp0_2*x477))+(((-0.99999936000041)*rxp0_2*sj5))+(((-6.39999590400262e-7)*rxp1_1*x456))+(((6.86865656475985e-7)*x482))+(((0.000799999488000328)*rxp0_1*x456)));
evalcond[5]=((((-0.000799999744000123)*rxp0_0*x458))+(((0.999999680000154)*rxp0_1*x454))+(((0.000799999744000123)*rxp0_1*x462))+(((5.21364564203366e-5)*x451))+(((-0.999999680000154)*rxp0_0*x456))+(((-0.000799999744000123)*rxp1_1*x454))+(((-0.999999680000154)*rxp1_0*x458))+(((0.999999680000154)*rxp1_1*x462))+(((-0.000301758551901279)*x452))+(((-5.16080404313091e-5)*x482))+(((0.000799999744000123)*rxp1_0*x456))+(((5.16080404313091e-5)*x479))+(((6.86865656475985e-7)*x480))+(((6.86865656475985e-7)*x484)));
evalcond[6]=((((0.130237558364674)*x479))+(((-1.0)*py*x458*x463))+(((-1.0)*px*x462*x463))+((r21*sj5*x464))+(((0.0976607828019318)*x452))+(((-1.0)*x463*x465))+((r01*x462*x464))+(((-0.00159999897600066)*x456*x459))+(((-1.0)*cj5*r20*x464))+((x466*x471))+(((-1.27999918080052e-6)*x458*x459))+((npy*x454*x468))+(((0.162786512399638)*x482))+(((6.39999590400262e-7)*x457*x458))+(((-1.0)*pp*x454*x469))+(((-0.00222534399784255)*x480))+(((-1.0)*pp*x483))+(((0.000799999488000328)*x456*x457))+((r00*x454*x464))+(((-1.0)*pp*x456*x460))+((pp*x462*x476))+(((-1.0)*pp*r21*x467))+(((-1.0)*px*x454*x471))+((r11*x458*x464))+(((1.99999872000082)*npy*x466))+(((1.27999918080052e-6)*npy*py*x456))+(((1.99999872000082)*npx*x465))+(((-0.00133505896455705)*x451))+(((0.00178038770336351)*x484))+(((-1.0)*npx*x462*x468)));
evalcond[7]=((((0.000799999744000123)*x457*x462))+((cj5*x453*x472))+(((0.00178038770336351)*x479))+(((0.0976607828019318)*x451))+(((-1.0)*pp*x458*x461))+(((0.00222534399784255)*x482))+(((1.99999936000031)*npx*sj5*x453))+(((-1.99999936000031)*x454*x459))+(((-1.0)*r01*x458*x475))+(((0.162786512399638)*x480))+(((-1.0)*pp*x456*x470))+(((-1.0)*pp*x454*x455))+((py*x454*x473))+(((0.00159999948800025)*cj5*npx*x453))+(((-0.130237558364674)*x484))+(((0.999999680000154)*x454*x457))+(((0.00133505896455705)*x452))+(((-1.0)*sj5*x453*x473))+(((-0.00159999948800025)*x459*x462))+(((-1.0)*py*x462*x472))+((r11*x462*x475))+((pp*x456*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x485=((0.125714867638213)*pz);
IkReal x486=((0.0217204376380029)*pz);
IkReal x487=(px*sj0);
IkReal x488=(cj0*py);
IkReal x489=((0.0217204306874662)*cj3);
IkReal x490=(sj3*x488);
IkReal x491=((0.125714827409474)*x487);
CheckValue<IkReal> x492=IKPowWithIntegerCheck(IKsign(((-0.162801766425068)+(((2.25744343184e-10)*sj3))+(((-0.0976699076532808)*cj3)))),-1);
if(!x492.valid){
continue;
}
CheckValue<IkReal> x493 = IKatan2WithCheck(IkReal(((-2.69701975366992e-9)+((cj3*x486))+(((-1.0)*cj3*x491))+(((0.125714827409474)*cj3*x488))+(((-5.20258241751368e-9)*sj3))+(((-0.37719831058)*x487))+(((0.0217204306874662)*sj3*x487))+(((0.0651706122345859)*pz))+((sj3*x485))+(((-0.0217204306874662)*x490))+(((-8.98878303570101e-10)*cj3))+(((0.37719831058)*x488)))),IkReal(((1.56099748850427e-8)+(((5.20258241751368e-9)*cj3))+(((-1.0)*sj3*x491))+((x488*x489))+(((-0.06517059138)*x487))+(((-1.0)*cj3*x485))+(((-1.0)*x487*x489))+(((0.125714827409474)*x490))+(((0.06517059138)*x488))+(((-0.37719843128344)*pz))+((sj3*x486))+(((-8.98878303570101e-10)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x493.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x492.value)))+(x493.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x494=IKsin(j1);
IkReal x495=IKcos(j1);
IkReal x496=(px*sj0);
IkReal x497=(cj0*sj5);
IkReal x498=((0.000799999744000123)*r11);
IkReal x499=(sj0*sj5);
IkReal x500=(pp*r10);
IkReal x501=(cj5*sj0);
IkReal x502=(npx*py);
IkReal x503=((6.39999590400262e-7)*r11);
IkReal x504=((0.000799999744000123)*r00);
IkReal x505=(cj0*cj5);
IkReal x506=((0.00159999897600066)*npy);
IkReal x507=((0.000799999488000328)*pp);
IkReal x508=(pz*sj5);
IkReal x509=(cj5*pz);
IkReal x510=((0.99999936000041)*cj5);
IkReal x511=((1.27999918080052e-6)*px);
IkReal x512=((6.39999590400262e-7)*r01);
IkReal x513=((0.999999680000154)*r00);
IkReal x514=((0.00159999897600066)*npx);
IkReal x515=((1.99999936000031)*npy);
IkReal x516=((0.00159999948800025)*npy);
IkReal x517=((0.000799999744000123)*r01);
IkReal x518=((0.999999680000154)*pp);
IkReal x519=((6.39999590400262e-7)*r00);
IkReal x520=((0.000799999488000328)*cj5);
IkReal x521=((0.000799999488000328)*sj5);
IkReal x522=(sj3*x494);
IkReal x523=(cj3*x494);
IkReal x524=((0.946525987111733)*x495);
IkReal x525=(cj3*x495);
IkReal x526=((0.99999936000041)*r20*sj5);
IkReal x527=(sj3*x495);
evalcond[0]=((((-0.06517059138)*x495))+(((0.0217204306874662)*x522))+x496+(((-0.125714827409474)*x527))+(((-0.125714827409474)*x523))+(((-0.37719831058)*x494))+(((-0.0217204306874662)*x525))+(((-1.0)*cj0*py)));
evalcond[1]=((-4.1384e-8)+(((0.06517059138)*x494))+(((0.0217204306874662)*x527))+(((0.0217204306874662)*x523))+(((0.125714827409474)*x522))+(((-0.125714827409474)*x525))+(((-0.37719831058)*x495))+(((1.00000031999995)*pz)));
evalcond[2]=(((r21*x521))+(((-1.0)*x499*x503))+(((0.000799999488000328)*r10*x499))+(((0.322626586759509)*x527))+(((0.322626586759509)*x523))+(((-1.0)*cj3*x524))+(((0.000799999488000328)*r01*x505))+(((-1.0)*x526))+(((0.000799999488000328)*r11*x501))+(((-1.0)*r20*x520))+(((-1.0)*r21*x510))+(((0.946525987111733)*x522))+(((0.000799999488000328)*r00*x497))+(((-1.0)*x497*x512))+((x505*x519))+(((6.39999590400262e-7)*r10*x501)));
evalcond[3]=((((0.000799999744000123)*r10*x505))+(((-0.946525987111733)*x523))+(((-1.0)*sj3*x524))+(((0.322626586759509)*x522))+((x499*x517))+(((-1.0)*x497*x498))+(((-1.0)*x501*x504))+(((-1.0)*x499*x513))+(((-0.999999680000154)*r01*x501))+(((0.999999680000154)*r10*x497))+(((0.999999680000154)*r11*x505))+(((-0.322626586759509)*x525)));
evalcond[4]=((((0.000799999488000328)*rxp0_1*x499))+(((6.86865656475985e-7)*x525))+(((0.000799999488000328)*rxp0_0*x497))+(((-1.0)*rxp0_2*x520))+(((-6.86865656475985e-7)*x522))+(((5.21364564203366e-5)*x495))+(((-6.39999590400262e-7)*rxp1_0*x497))+(((-6.39999590400262e-7)*rxp1_1*x499))+(((-1.0)*rxp1_2*x510))+(((6.39999590400262e-7)*rxp0_0*x505))+(((0.000799999488000328)*rxp1_1*x501))+(((0.000799999488000328)*rxp1_0*x505))+((rxp1_2*x521))+(((-0.99999936000041)*rxp0_2*sj5))+(((0.000301758551901279)*x494))+(((6.39999590400262e-7)*rxp0_1*x501))+(((5.16080404313091e-5)*x523))+(((5.16080404313091e-5)*x527)));
evalcond[5]=((((-0.000799999744000123)*rxp0_0*x501))+(((-0.999999680000154)*rxp0_0*x499))+(((0.000799999744000123)*rxp0_1*x505))+(((6.86865656475985e-7)*x523))+(((6.86865656475985e-7)*x527))+(((-5.16080404313091e-5)*x525))+(((5.21364564203366e-5)*x494))+(((0.999999680000154)*rxp1_1*x505))+(((0.000799999744000123)*rxp1_0*x499))+(((-0.000799999744000123)*rxp1_1*x497))+(((-0.000301758551901279)*x495))+(((-0.999999680000154)*rxp1_0*x501))+(((0.999999680000154)*rxp0_1*x497))+(((5.16080404313091e-5)*x522)));
evalcond[6]=((((0.00178038770336351)*x527))+(((0.0976607828019318)*x495))+(((-1.0)*x506*x508))+(((-0.00133505896455705)*x494))+(((-0.00222534399784255)*x523))+((npy*x497*x511))+((r01*x505*x507))+(((-1.0)*pp*r21*x510))+(((-1.0)*pp*x499*x503))+(((-1.0)*py*x501*x506))+((r21*sj5*x507))+(((-1.0)*cj5*r20*x507))+(((-0.00159999897600066)*x499*x502))+(((-1.27999918080052e-6)*x501*x502))+(((1.27999918080052e-6)*npy*py*x499))+(((-1.0)*px*x505*x506))+((r11*x501*x507))+(((-1.0)*pp*x497*x512))+((pp*x505*x519))+(((-1.0)*npx*x505*x511))+(((-1.0)*pp*x526))+(((1.99999872000082)*npy*x509))+((r00*x497*x507))+(((1.99999872000082)*npx*x508))+(((6.39999590400262e-7)*x500*x501))+(((-1.0)*px*x497*x514))+((x509*x514))+(((0.130237558364674)*x522))+(((0.000799999488000328)*x499*x500))+(((0.162786512399638)*x525)));
evalcond[7]=((((0.00178038770336351)*x522))+(((0.0976607828019318)*x494))+((cj5*x496*x515))+(((1.99999936000031)*npx*sj5*x496))+(((0.999999680000154)*x497*x500))+((pp*x499*x517))+(((0.000799999744000123)*x500*x505))+((py*x497*x516))+(((-1.0)*sj5*x496*x516))+(((0.00159999948800025)*cj5*npx*x496))+(((0.00133505896455705)*x495))+(((-1.0)*pp*x499*x513))+(((0.00222534399784255)*x525))+(((-1.0)*pp*x501*x504))+(((-1.99999936000031)*x497*x502))+((r11*x505*x518))+(((-1.0)*py*x505*x515))+(((-1.0)*pp*x497*x498))+(((-0.00159999948800025)*x502*x505))+(((-1.0)*r01*x501*x518))+(((-0.130237558364674)*x527))+(((0.162786512399638)*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x528=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x528.valid){
continue;
}
CheckValue<IkReal> x529=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x530.valid){
continue;
}
CheckValue<IkReal> x531=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x533.valid){
continue;
}
CheckValue<IkReal> x534=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x535.valid){
continue;
}
CheckValue<IkReal> x536=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x541.valid){
continue;
}
CheckValue<IkReal> x542=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x542.valid){
continue;
}
CheckValue<IkReal> x543=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x550.valid){
continue;
}
CheckValue<IkReal> x551=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x552.valid){
continue;
}
CheckValue<IkReal> x553=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x553.valid){
continue;
}
CheckValue<IkReal> x554=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x558.valid){
continue;
}
CheckValue<IkReal> x559=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x561.valid){
continue;
}
CheckValue<IkReal> x562=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x563.valid){
continue;
}
CheckValue<IkReal> x564=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x564.valid){
continue;
}
CheckValue<IkReal> x565=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x566.valid){
continue;
}
CheckValue<IkReal> x567=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x568.valid){
continue;
}
CheckValue<IkReal> x569=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x569.valid){
continue;
}
CheckValue<IkReal> x570=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x572.valid){
continue;
}
CheckValue<IkReal> x573=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x576.valid){
continue;
}
CheckValue<IkReal> x577=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x578.valid){
continue;
}
CheckValue<IkReal> x579=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x579.valid){
continue;
}
CheckValue<IkReal> x580=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x580.valid){
continue;
}
CheckValue<IkReal> x581=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x581.valid){
continue;
}
CheckValue<IkReal> x582=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x585.valid){
continue;
}
CheckValue<IkReal> x586=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x587.valid){
continue;
}
CheckValue<IkReal> x588=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x589.valid){
continue;
}
CheckValue<IkReal> x590=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x590.valid){
continue;
}
CheckValue<IkReal> x591=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x591.valid){
continue;
}
CheckValue<IkReal> x592=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x594.valid){
continue;
}
CheckValue<IkReal> x595=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x595.valid){
continue;
}
CheckValue<IkReal> x596=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x596.valid){
continue;
}
CheckValue<IkReal> x597=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x601.valid){
continue;
}
CheckValue<IkReal> x602=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x602.valid){
continue;
}
CheckValue<IkReal> x603=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x603.valid){
continue;
}
CheckValue<IkReal> x604=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x605.valid){
continue;
}
CheckValue<IkReal> x606=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x609.valid){
continue;
}
CheckValue<IkReal> x610=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x613.valid){
continue;
}
CheckValue<IkReal> x614=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x614.valid){
continue;
}
CheckValue<IkReal> x615=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x615.valid){
continue;
}
CheckValue<IkReal> x616=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x619.valid){
continue;
}
CheckValue<IkReal> x620=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x620.valid){
continue;
}
CheckValue<IkReal> x621=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x622.valid){
continue;
}
CheckValue<IkReal> x623=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x625.valid){
continue;
}
CheckValue<IkReal> x626=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x632.valid){
continue;
}
CheckValue<IkReal> x633=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x635.valid){
continue;
}
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x643.valid){
continue;
}
CheckValue<IkReal> x644=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x647.valid){
continue;
}
CheckValue<IkReal> x648=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x650.valid){
continue;
}
CheckValue<IkReal> x651=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x656.valid){
continue;
}
CheckValue<IkReal> x657=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x657.valid){
continue;
}
CheckValue<IkReal> x658=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x661.valid){
continue;
}
CheckValue<IkReal> x662=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x662.valid){
continue;
}
CheckValue<IkReal> x663=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x665.valid){
continue;
}
CheckValue<IkReal> x666=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x668.valid){
continue;
}
CheckValue<IkReal> x669=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x669.valid){
continue;
}
CheckValue<IkReal> x670=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x670.valid){
continue;
}
CheckValue<IkReal> x671=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x673.valid){
continue;
}
CheckValue<IkReal> x674=IKPowWithIntegerCheck(((0.00808)+(((0.00744)*cj2))+(((-0.04687199256)*sj2))),-1);
if(!x674.valid){
continue;
}
CheckValue<IkReal> x675=IKPowWithIntegerCheck(((-59377.5095757939)+(((-59175.909543282)*cj2))),-1);
if(!x675.valid){
continue;
}
if( IKabs(((((59175.909543282)*cj2*pp*(x528.value)*(x529.value)))+(((7268.30103296419)*cj5*rxp1_1*sj0*sj2*(x530.value)*(x531.value)))+(((4324.50138383978)*cj2*pp*sj2*(x532.value)*(x533.value)))+(((5.81464082637135)*cj0*cj5*rxp0_0*sj2*(x534.value)*(x535.value)))+(((-7792.28362876712)*cj2*(x536.value)*(x537.value)))+(((6692.59402045217)*cj0*cj2*rxp0_0*sj2*sj5*(x538.value)*(x539.value)))+(((-1.893628499424)*cj2*cj5*rxp1_2*(x540.value)*(x541.value)))+(((-5.35407521636174)*cj0*cj2*rxp1_0*sj2*sj5*(x542.value)*(x543.value)))+(((-0.00428326017308939)*cj2*rxp1_2*sj2*sj5*(x544.value)*(x545.value)))+(((1.893628499424)*cj2*rxp1_1*sj0*sj5*(x546.value)*(x547.value)))+(((4696.50150287976)*pp*sj2*(x548.value)*(x549.value)))+(((-1.893628499424)*cj0*cj2*cj5*rxp0_0*(x550.value)*(x551.value)))+(((-2367.03562428)*cj0*cj2*cj5*rxp1_0*(x552.value)*(x553.value)))+(((-0.0916759976359933)*(x554.value)))+(((5.35407521636174)*cj2*rxp0_2*sj2*sj5*(x555.value)*(x556.value)))+(((5.35407521636174)*cj2*cj5*rxp0_1*sj0*sj2*(x557.value)*(x558.value)))+(((-883.21881081578)*cj2*sj2*(x559.value)*(x560.value)))+(((7268.30103296419)*rxp0_1*sj0*sj2*sj5*(x561.value)*(x562.value)))+(((-195.55196896)*cj5*rxp1_1*sj0*(x563.value)*(x564.value)))+(((-575.922527851847)*sj2*(x565.value)*(x566.value)))+(((-324.960331987256)*sj2*(cj2*cj2)*(x567.value)*(x568.value)))+(((-195.55196896)*cj0*rxp0_0*sj5*(x569.value)*(x570.value)))+(((5.35407521636174)*cj0*cj2*cj5*rxp0_0*sj2*(x571.value)*(x572.value)))+(((-2367.03562428)*cj0*cj2*rxp0_0*sj5*(x573.value)*(x574.value)))+(((0.00428326017308939)*cj2*cj5*rxp0_2*sj2*(x575.value)*(x576.value)))+(((1.893628499424)*cj0*cj2*rxp1_0*sj5*(x577.value)*(x578.value)))+(((-1.743638123232)*cj5*rxp0_1*sj0*(cj2*cj2)*(x579.value)*(x580.value)))+(((-2367.03562428)*cj2*rxp0_1*sj0*sj5*(x581.value)*(x582.value)))+(((-2367.03562428)*cj2*cj5*rxp1_1*sj0*(x583.value)*(x584.value)))+(((-1.743638123232)*cj0*cj5*rxp0_0*(cj2*cj2)*(x585.value)*(x586.value)))+(((1.743638123232)*rxp1_1*sj0*sj5*(cj2*cj2)*(x587.value)*(x588.value)))+(((7268.30103296419)*cj0*cj5*rxp1_0*sj2*(x589.value)*(x590.value)))+(((-195.55196896)*cj0*cj5*rxp1_0*(x591.value)*(x592.value)))+(((-2047.24976655938)*(cj2*cj2*cj2)*(x593.value)*(x594.value)))+(((0.0013949104985856)*rxp1_2*sj5*(cj2*cj2)*(x595.value)*(x596.value)))+(((-2179.54765404)*rxp0_1*sj0*sj5*(cj2*cj2)*(x597.value)*(x598.value)))+(((7268.30103296419)*cj0*rxp0_0*sj2*sj5*(x599.value)*(x600.value)))+(((-2941.92801788091)*(x601.value)*(x602.value)))+(((-0.0001251532601344)*cj5*rxp0_2*(x603.value)*(x604.value)))+(((6692.59402045217)*cj2*cj5*rxp1_1*sj0*sj2*(x605.value)*(x606.value)))+(((5.35407521636174)*cj2*cj5*rxp1_2*sj2*(x607.value)*(x608.value)))+(((-0.156441575168)*cj5*rxp1_2*(x609.value)*(x610.value)))+(((5.81464082637135)*cj5*rxp0_1*sj0*sj2*(x611.value)*(x612.value)))+(((6692.59402045217)*cj0*cj2*cj5*rxp1_0*sj2*(x613.value)*(x614.value)))+(((-0.00465171266109708)*rxp1_2*sj2*sj5*(x615.value)*(x616.value)))+(((-0.0015149027995392)*cj2*cj5*rxp0_2*(x617.value)*(x618.value)))+(((-1.893628499424)*cj2*cj5*rxp0_1*sj0*(x619.value)*(x620.value)))+(((0.0015149027995392)*cj2*rxp1_2*sj5*(x621.value)*(x622.value)))+(((-6900.77694868049)*(cj2*cj2)*(x623.value)*(x624.value)))+(((-2179.54765404)*cj5*rxp1_1*sj0*(cj2*cj2)*(x625.value)*(x626.value)))+(((-0.156441575168)*cj5*rxp0_1*sj0*(x627.value)*(x628.value)))+(((-1.743638123232)*rxp0_2*sj5*(cj2*cj2)*(x629.value)*(x630.value)))+(((-0.156441575168)*cj0*cj5*rxp0_0*(x631.value)*(x632.value)))+(((-0.0013949104985856)*cj5*rxp0_2*(cj2*cj2)*(x633.value)*(x634.value)))+(((-5.35407521636174)*cj2*rxp1_1*sj0*sj2*sj5*(x635.value)*(x636.value)))+(((6692.59402045217)*cj2*rxp0_1*sj0*sj2*sj5*(x637.value)*(x638.value)))+(((-195.55196896)*rxp0_1*sj0*sj5*(x639.value)*(x640.value)))+(((27244.3543936892)*pp*(cj2*cj2)*(x641.value)*(x642.value)))+(((-5.81464082637135)*cj0*rxp1_0*sj2*sj5*(x643.value)*(x644.value)))+(((0.00465171266109708)*cj5*rxp0_2*sj2*(x645.value)*(x646.value)))+((pp*(x647.value)))+(((1.743638123232)*cj0*rxp1_0*sj5*(cj2*cj2)*(x648.value)*(x649.value)))+(((-1.743638123232)*cj5*rxp1_2*(cj2*cj2)*(x650.value)*(x651.value)))+(((-5.81464082637135)*rxp1_1*sj0*sj2*sj5*(x652.value)*(x653.value)))+(((0.156441575168)*rxp1_1*sj0*sj5*(x654.value)*(x655.value)))+(((-0.075144)*cj2*(x656.value)))+(((0.0001251532601344)*rxp1_2*sj5*(x657.value)*(x658.value)))+(((0.156441575168)*cj0*rxp1_0*sj5*(x659.value)*(x660.value)))+(((32133.1551821047)*pp*(x661.value)*(x662.value)))+(((5.81464082637135)*rxp0_2*sj2*sj5*(x663.value)*(x664.value)))+(((-0.156441575168)*rxp0_2*sj5*(x665.value)*(x666.value)))+(((-2179.54765404)*cj0*cj5*rxp1_0*(cj2*cj2)*(x667.value)*(x668.value)))+(((-2179.54765404)*cj0*rxp0_0*sj5*(cj2*cj2)*(x669.value)*(x670.value)))+(((-1.893628499424)*cj2*rxp0_2*sj5*(x671.value)*(x672.value)))+(((5.81464082637135)*cj5*rxp1_2*sj2*(x673.value)*(x674.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x675.value)*(((57365.4918646694)+(((-117.1799814)*cj5*rxp0_1*sj0*sj2))+(((0.09374398512)*rxp1_2*sj2*sj5))+(((18.6)*cj2*rxp0_2*sj5))+(((-18.6)*cj2*rxp1_1*sj0*sj5))+(((23250.0)*cj0*cj2*cj5*rxp1_0))+(((18.6)*cj2*cj5*rxp0_1*sj0))+(((25250.0)*cj0*rxp0_0*sj5))+(((-117.1799814)*cj5*rxp1_2*sj2))+(((-0.01488)*cj2*rxp1_2*sj5))+(((-146474.97675)*cj0*cj5*rxp1_0*sj2))+(((-146474.97675)*rxp0_1*sj0*sj2*sj5))+(((-581250.18599997)*cj2*pp))+(((20.2)*cj0*cj5*rxp0_0))+(((-117.1799814)*rxp0_2*sj2*sj5))+(((0.01488)*cj2*cj5*rxp0_2))+(((117.1799814)*rxp1_1*sj0*sj2*sj5))+(((100256.35570794)*cj2))+(((43677.4639767818)*(cj2*cj2)))+(((18.6)*cj0*cj2*cj5*rxp0_0))+(((-0.01616)*rxp1_2*sj5))+(((2929.5004724397)*sj2))+(((25250.0)*rxp0_1*sj0*sj5))+(((20.2)*rxp0_2*sj5))+(((-146474.97675)*cj0*rxp0_0*sj2*sj5))+(((23250.0)*cj2*cj5*rxp1_1*sj0))+(((-146474.97675)*cj5*rxp1_1*sj0*sj2))+(((0.01616)*cj5*rxp0_2))+(((18.6)*cj2*cj5*rxp1_2))+(((23250.0)*cj2*rxp0_1*sj0*sj5))+(((117.1799814)*cj0*rxp1_0*sj2*sj5))+(((-631250.201999968)*pp))+(((-117.1799814)*cj0*cj5*rxp0_0*sj2))+(((-0.09374398512)*cj5*rxp0_2*sj2))+(((-20.2)*cj0*rxp1_0*sj5))+(((20.2)*cj5*rxp1_2))+(((20.2)*cj5*rxp0_1*sj0))+(((-18.6)*cj0*cj2*rxp1_0*sj5))+(((-20.2)*rxp1_1*sj0*sj5))+(((25250.0)*cj0*cj5*rxp1_0))+(((25250.0)*cj5*rxp1_1*sj0))+(((23250.0)*cj0*cj2*rxp0_0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((59175.909543282)*cj2*pp*(x528.value)*(x529.value)))+(((7268.30103296419)*cj5*rxp1_1*sj0*sj2*(x530.value)*(x531.value)))+(((4324.50138383978)*cj2*pp*sj2*(x532.value)*(x533.value)))+(((5.81464082637135)*cj0*cj5*rxp0_0*sj2*(x534.value)*(x535.value)))+(((-7792.28362876712)*cj2*(x536.value)*(x537.value)))+(((6692.59402045217)*cj0*cj2*rxp0_0*sj2*sj5*(x538.value)*(x539.value)))+(((-1.893628499424)*cj2*cj5*rxp1_2*(x540.value)*(x541.value)))+(((-5.35407521636174)*cj0*cj2*rxp1_0*sj2*sj5*(x542.value)*(x543.value)))+(((-0.00428326017308939)*cj2*rxp1_2*sj2*sj5*(x544.value)*(x545.value)))+(((1.893628499424)*cj2*rxp1_1*sj0*sj5*(x546.value)*(x547.value)))+(((4696.50150287976)*pp*sj2*(x548.value)*(x549.value)))+(((-1.893628499424)*cj0*cj2*cj5*rxp0_0*(x550.value)*(x551.value)))+(((-2367.03562428)*cj0*cj2*cj5*rxp1_0*(x552.value)*(x553.value)))+(((-0.0916759976359933)*(x554.value)))+(((5.35407521636174)*cj2*rxp0_2*sj2*sj5*(x555.value)*(x556.value)))+(((5.35407521636174)*cj2*cj5*rxp0_1*sj0*sj2*(x557.value)*(x558.value)))+(((-883.21881081578)*cj2*sj2*(x559.value)*(x560.value)))+(((7268.30103296419)*rxp0_1*sj0*sj2*sj5*(x561.value)*(x562.value)))+(((-195.55196896)*cj5*rxp1_1*sj0*(x563.value)*(x564.value)))+(((-575.922527851847)*sj2*(x565.value)*(x566.value)))+(((-324.960331987256)*sj2*(cj2*cj2)*(x567.value)*(x568.value)))+(((-195.55196896)*cj0*rxp0_0*sj5*(x569.value)*(x570.value)))+(((5.35407521636174)*cj0*cj2*cj5*rxp0_0*sj2*(x571.value)*(x572.value)))+(((-2367.03562428)*cj0*cj2*rxp0_0*sj5*(x573.value)*(x574.value)))+(((0.00428326017308939)*cj2*cj5*rxp0_2*sj2*(x575.value)*(x576.value)))+(((1.893628499424)*cj0*cj2*rxp1_0*sj5*(x577.value)*(x578.value)))+(((-1.743638123232)*cj5*rxp0_1*sj0*(cj2*cj2)*(x579.value)*(x580.value)))+(((-2367.03562428)*cj2*rxp0_1*sj0*sj5*(x581.value)*(x582.value)))+(((-2367.03562428)*cj2*cj5*rxp1_1*sj0*(x583.value)*(x584.value)))+(((-1.743638123232)*cj0*cj5*rxp0_0*(cj2*cj2)*(x585.value)*(x586.value)))+(((1.743638123232)*rxp1_1*sj0*sj5*(cj2*cj2)*(x587.value)*(x588.value)))+(((7268.30103296419)*cj0*cj5*rxp1_0*sj2*(x589.value)*(x590.value)))+(((-195.55196896)*cj0*cj5*rxp1_0*(x591.value)*(x592.value)))+(((-2047.24976655938)*(cj2*cj2*cj2)*(x593.value)*(x594.value)))+(((0.0013949104985856)*rxp1_2*sj5*(cj2*cj2)*(x595.value)*(x596.value)))+(((-2179.54765404)*rxp0_1*sj0*sj5*(cj2*cj2)*(x597.value)*(x598.value)))+(((7268.30103296419)*cj0*rxp0_0*sj2*sj5*(x599.value)*(x600.value)))+(((-2941.92801788091)*(x601.value)*(x602.value)))+(((-0.0001251532601344)*cj5*rxp0_2*(x603.value)*(x604.value)))+(((6692.59402045217)*cj2*cj5*rxp1_1*sj0*sj2*(x605.value)*(x606.value)))+(((5.35407521636174)*cj2*cj5*rxp1_2*sj2*(x607.value)*(x608.value)))+(((-0.156441575168)*cj5*rxp1_2*(x609.value)*(x610.value)))+(((5.81464082637135)*cj5*rxp0_1*sj0*sj2*(x611.value)*(x612.value)))+(((6692.59402045217)*cj0*cj2*cj5*rxp1_0*sj2*(x613.value)*(x614.value)))+(((-0.00465171266109708)*rxp1_2*sj2*sj5*(x615.value)*(x616.value)))+(((-0.0015149027995392)*cj2*cj5*rxp0_2*(x617.value)*(x618.value)))+(((-1.893628499424)*cj2*cj5*rxp0_1*sj0*(x619.value)*(x620.value)))+(((0.0015149027995392)*cj2*rxp1_2*sj5*(x621.value)*(x622.value)))+(((-6900.77694868049)*(cj2*cj2)*(x623.value)*(x624.value)))+(((-2179.54765404)*cj5*rxp1_1*sj0*(cj2*cj2)*(x625.value)*(x626.value)))+(((-0.156441575168)*cj5*rxp0_1*sj0*(x627.value)*(x628.value)))+(((-1.743638123232)*rxp0_2*sj5*(cj2*cj2)*(x629.value)*(x630.value)))+(((-0.156441575168)*cj0*cj5*rxp0_0*(x631.value)*(x632.value)))+(((-0.0013949104985856)*cj5*rxp0_2*(cj2*cj2)*(x633.value)*(x634.value)))+(((-5.35407521636174)*cj2*rxp1_1*sj0*sj2*sj5*(x635.value)*(x636.value)))+(((6692.59402045217)*cj2*rxp0_1*sj0*sj2*sj5*(x637.value)*(x638.value)))+(((-195.55196896)*rxp0_1*sj0*sj5*(x639.value)*(x640.value)))+(((27244.3543936892)*pp*(cj2*cj2)*(x641.value)*(x642.value)))+(((-5.81464082637135)*cj0*rxp1_0*sj2*sj5*(x643.value)*(x644.value)))+(((0.00465171266109708)*cj5*rxp0_2*sj2*(x645.value)*(x646.value)))+((pp*(x647.value)))+(((1.743638123232)*cj0*rxp1_0*sj5*(cj2*cj2)*(x648.value)*(x649.value)))+(((-1.743638123232)*cj5*rxp1_2*(cj2*cj2)*(x650.value)*(x651.value)))+(((-5.81464082637135)*rxp1_1*sj0*sj2*sj5*(x652.value)*(x653.value)))+(((0.156441575168)*rxp1_1*sj0*sj5*(x654.value)*(x655.value)))+(((-0.075144)*cj2*(x656.value)))+(((0.0001251532601344)*rxp1_2*sj5*(x657.value)*(x658.value)))+(((0.156441575168)*cj0*rxp1_0*sj5*(x659.value)*(x660.value)))+(((32133.1551821047)*pp*(x661.value)*(x662.value)))+(((5.81464082637135)*rxp0_2*sj2*sj5*(x663.value)*(x664.value)))+(((-0.156441575168)*rxp0_2*sj5*(x665.value)*(x666.value)))+(((-2179.54765404)*cj0*cj5*rxp1_0*(cj2*cj2)*(x667.value)*(x668.value)))+(((-2179.54765404)*cj0*rxp0_0*sj5*(cj2*cj2)*(x669.value)*(x670.value)))+(((-1.893628499424)*cj2*rxp0_2*sj5*(x671.value)*(x672.value)))+(((5.81464082637135)*cj5*rxp1_2*sj2*(x673.value)*(x674.value)))))+IKsqr(((x675.value)*(((57365.4918646694)+(((-117.1799814)*cj5*rxp0_1*sj0*sj2))+(((0.09374398512)*rxp1_2*sj2*sj5))+(((18.6)*cj2*rxp0_2*sj5))+(((-18.6)*cj2*rxp1_1*sj0*sj5))+(((23250.0)*cj0*cj2*cj5*rxp1_0))+(((18.6)*cj2*cj5*rxp0_1*sj0))+(((25250.0)*cj0*rxp0_0*sj5))+(((-117.1799814)*cj5*rxp1_2*sj2))+(((-0.01488)*cj2*rxp1_2*sj5))+(((-146474.97675)*cj0*cj5*rxp1_0*sj2))+(((-146474.97675)*rxp0_1*sj0*sj2*sj5))+(((-581250.18599997)*cj2*pp))+(((20.2)*cj0*cj5*rxp0_0))+(((-117.1799814)*rxp0_2*sj2*sj5))+(((0.01488)*cj2*cj5*rxp0_2))+(((117.1799814)*rxp1_1*sj0*sj2*sj5))+(((100256.35570794)*cj2))+(((43677.4639767818)*(cj2*cj2)))+(((18.6)*cj0*cj2*cj5*rxp0_0))+(((-0.01616)*rxp1_2*sj5))+(((2929.5004724397)*sj2))+(((25250.0)*rxp0_1*sj0*sj5))+(((20.2)*rxp0_2*sj5))+(((-146474.97675)*cj0*rxp0_0*sj2*sj5))+(((23250.0)*cj2*cj5*rxp1_1*sj0))+(((-146474.97675)*cj5*rxp1_1*sj0*sj2))+(((0.01616)*cj5*rxp0_2))+(((18.6)*cj2*cj5*rxp1_2))+(((23250.0)*cj2*rxp0_1*sj0*sj5))+(((117.1799814)*cj0*rxp1_0*sj2*sj5))+(((-631250.201999968)*pp))+(((-117.1799814)*cj0*cj5*rxp0_0*sj2))+(((-0.09374398512)*cj5*rxp0_2*sj2))+(((-20.2)*cj0*rxp1_0*sj5))+(((20.2)*cj5*rxp1_2))+(((20.2)*cj5*rxp0_1*sj0))+(((-18.6)*cj0*cj2*rxp1_0*sj5))+(((-20.2)*rxp1_1*sj0*sj5))+(((25250.0)*cj0*cj5*rxp1_0))+(((25250.0)*cj5*rxp1_1*sj0))+(((23250.0)*cj0*cj2*rxp0_0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((59175.909543282)*cj2*pp*(x528.value)*(x529.value)))+(((7268.30103296419)*cj5*rxp1_1*sj0*sj2*(x530.value)*(x531.value)))+(((4324.50138383978)*cj2*pp*sj2*(x532.value)*(x533.value)))+(((5.81464082637135)*cj0*cj5*rxp0_0*sj2*(x534.value)*(x535.value)))+(((-7792.28362876712)*cj2*(x536.value)*(x537.value)))+(((6692.59402045217)*cj0*cj2*rxp0_0*sj2*sj5*(x538.value)*(x539.value)))+(((-1.893628499424)*cj2*cj5*rxp1_2*(x540.value)*(x541.value)))+(((-5.35407521636174)*cj0*cj2*rxp1_0*sj2*sj5*(x542.value)*(x543.value)))+(((-0.00428326017308939)*cj2*rxp1_2*sj2*sj5*(x544.value)*(x545.value)))+(((1.893628499424)*cj2*rxp1_1*sj0*sj5*(x546.value)*(x547.value)))+(((4696.50150287976)*pp*sj2*(x548.value)*(x549.value)))+(((-1.893628499424)*cj0*cj2*cj5*rxp0_0*(x550.value)*(x551.value)))+(((-2367.03562428)*cj0*cj2*cj5*rxp1_0*(x552.value)*(x553.value)))+(((-0.0916759976359933)*(x554.value)))+(((5.35407521636174)*cj2*rxp0_2*sj2*sj5*(x555.value)*(x556.value)))+(((5.35407521636174)*cj2*cj5*rxp0_1*sj0*sj2*(x557.value)*(x558.value)))+(((-883.21881081578)*cj2*sj2*(x559.value)*(x560.value)))+(((7268.30103296419)*rxp0_1*sj0*sj2*sj5*(x561.value)*(x562.value)))+(((-195.55196896)*cj5*rxp1_1*sj0*(x563.value)*(x564.value)))+(((-575.922527851847)*sj2*(x565.value)*(x566.value)))+(((-324.960331987256)*sj2*(cj2*cj2)*(x567.value)*(x568.value)))+(((-195.55196896)*cj0*rxp0_0*sj5*(x569.value)*(x570.value)))+(((5.35407521636174)*cj0*cj2*cj5*rxp0_0*sj2*(x571.value)*(x572.value)))+(((-2367.03562428)*cj0*cj2*rxp0_0*sj5*(x573.value)*(x574.value)))+(((0.00428326017308939)*cj2*cj5*rxp0_2*sj2*(x575.value)*(x576.value)))+(((1.893628499424)*cj0*cj2*rxp1_0*sj5*(x577.value)*(x578.value)))+(((-1.743638123232)*cj5*rxp0_1*sj0*(cj2*cj2)*(x579.value)*(x580.value)))+(((-2367.03562428)*cj2*rxp0_1*sj0*sj5*(x581.value)*(x582.value)))+(((-2367.03562428)*cj2*cj5*rxp1_1*sj0*(x583.value)*(x584.value)))+(((-1.743638123232)*cj0*cj5*rxp0_0*(cj2*cj2)*(x585.value)*(x586.value)))+(((1.743638123232)*rxp1_1*sj0*sj5*(cj2*cj2)*(x587.value)*(x588.value)))+(((7268.30103296419)*cj0*cj5*rxp1_0*sj2*(x589.value)*(x590.value)))+(((-195.55196896)*cj0*cj5*rxp1_0*(x591.value)*(x592.value)))+(((-2047.24976655938)*(cj2*cj2*cj2)*(x593.value)*(x594.value)))+(((0.0013949104985856)*rxp1_2*sj5*(cj2*cj2)*(x595.value)*(x596.value)))+(((-2179.54765404)*rxp0_1*sj0*sj5*(cj2*cj2)*(x597.value)*(x598.value)))+(((7268.30103296419)*cj0*rxp0_0*sj2*sj5*(x599.value)*(x600.value)))+(((-2941.92801788091)*(x601.value)*(x602.value)))+(((-0.0001251532601344)*cj5*rxp0_2*(x603.value)*(x604.value)))+(((6692.59402045217)*cj2*cj5*rxp1_1*sj0*sj2*(x605.value)*(x606.value)))+(((5.35407521636174)*cj2*cj5*rxp1_2*sj2*(x607.value)*(x608.value)))+(((-0.156441575168)*cj5*rxp1_2*(x609.value)*(x610.value)))+(((5.81464082637135)*cj5*rxp0_1*sj0*sj2*(x611.value)*(x612.value)))+(((6692.59402045217)*cj0*cj2*cj5*rxp1_0*sj2*(x613.value)*(x614.value)))+(((-0.00465171266109708)*rxp1_2*sj2*sj5*(x615.value)*(x616.value)))+(((-0.0015149027995392)*cj2*cj5*rxp0_2*(x617.value)*(x618.value)))+(((-1.893628499424)*cj2*cj5*rxp0_1*sj0*(x619.value)*(x620.value)))+(((0.0015149027995392)*cj2*rxp1_2*sj5*(x621.value)*(x622.value)))+(((-6900.77694868049)*(cj2*cj2)*(x623.value)*(x624.value)))+(((-2179.54765404)*cj5*rxp1_1*sj0*(cj2*cj2)*(x625.value)*(x626.value)))+(((-0.156441575168)*cj5*rxp0_1*sj0*(x627.value)*(x628.value)))+(((-1.743638123232)*rxp0_2*sj5*(cj2*cj2)*(x629.value)*(x630.value)))+(((-0.156441575168)*cj0*cj5*rxp0_0*(x631.value)*(x632.value)))+(((-0.0013949104985856)*cj5*rxp0_2*(cj2*cj2)*(x633.value)*(x634.value)))+(((-5.35407521636174)*cj2*rxp1_1*sj0*sj2*sj5*(x635.value)*(x636.value)))+(((6692.59402045217)*cj2*rxp0_1*sj0*sj2*sj5*(x637.value)*(x638.value)))+(((-195.55196896)*rxp0_1*sj0*sj5*(x639.value)*(x640.value)))+(((27244.3543936892)*pp*(cj2*cj2)*(x641.value)*(x642.value)))+(((-5.81464082637135)*cj0*rxp1_0*sj2*sj5*(x643.value)*(x644.value)))+(((0.00465171266109708)*cj5*rxp0_2*sj2*(x645.value)*(x646.value)))+((pp*(x647.value)))+(((1.743638123232)*cj0*rxp1_0*sj5*(cj2*cj2)*(x648.value)*(x649.value)))+(((-1.743638123232)*cj5*rxp1_2*(cj2*cj2)*(x650.value)*(x651.value)))+(((-5.81464082637135)*rxp1_1*sj0*sj2*sj5*(x652.value)*(x653.value)))+(((0.156441575168)*rxp1_1*sj0*sj5*(x654.value)*(x655.value)))+(((-0.075144)*cj2*(x656.value)))+(((0.0001251532601344)*rxp1_2*sj5*(x657.value)*(x658.value)))+(((0.156441575168)*cj0*rxp1_0*sj5*(x659.value)*(x660.value)))+(((32133.1551821047)*pp*(x661.value)*(x662.value)))+(((5.81464082637135)*rxp0_2*sj2*sj5*(x663.value)*(x664.value)))+(((-0.156441575168)*rxp0_2*sj5*(x665.value)*(x666.value)))+(((-2179.54765404)*cj0*cj5*rxp1_0*(cj2*cj2)*(x667.value)*(x668.value)))+(((-2179.54765404)*cj0*rxp0_0*sj5*(cj2*cj2)*(x669.value)*(x670.value)))+(((-1.893628499424)*cj2*rxp0_2*sj5*(x671.value)*(x672.value)))+(((5.81464082637135)*cj5*rxp1_2*sj2*(x673.value)*(x674.value)))), ((x675.value)*(((57365.4918646694)+(((-117.1799814)*cj5*rxp0_1*sj0*sj2))+(((0.09374398512)*rxp1_2*sj2*sj5))+(((18.6)*cj2*rxp0_2*sj5))+(((-18.6)*cj2*rxp1_1*sj0*sj5))+(((23250.0)*cj0*cj2*cj5*rxp1_0))+(((18.6)*cj2*cj5*rxp0_1*sj0))+(((25250.0)*cj0*rxp0_0*sj5))+(((-117.1799814)*cj5*rxp1_2*sj2))+(((-0.01488)*cj2*rxp1_2*sj5))+(((-146474.97675)*cj0*cj5*rxp1_0*sj2))+(((-146474.97675)*rxp0_1*sj0*sj2*sj5))+(((-581250.18599997)*cj2*pp))+(((20.2)*cj0*cj5*rxp0_0))+(((-117.1799814)*rxp0_2*sj2*sj5))+(((0.01488)*cj2*cj5*rxp0_2))+(((117.1799814)*rxp1_1*sj0*sj2*sj5))+(((100256.35570794)*cj2))+(((43677.4639767818)*(cj2*cj2)))+(((18.6)*cj0*cj2*cj5*rxp0_0))+(((-0.01616)*rxp1_2*sj5))+(((2929.5004724397)*sj2))+(((25250.0)*rxp0_1*sj0*sj5))+(((20.2)*rxp0_2*sj5))+(((-146474.97675)*cj0*rxp0_0*sj2*sj5))+(((23250.0)*cj2*cj5*rxp1_1*sj0))+(((-146474.97675)*cj5*rxp1_1*sj0*sj2))+(((0.01616)*cj5*rxp0_2))+(((18.6)*cj2*cj5*rxp1_2))+(((23250.0)*cj2*rxp0_1*sj0*sj5))+(((117.1799814)*cj0*rxp1_0*sj2*sj5))+(((-631250.201999968)*pp))+(((-117.1799814)*cj0*cj5*rxp0_0*sj2))+(((-0.09374398512)*cj5*rxp0_2*sj2))+(((-20.2)*cj0*rxp1_0*sj5))+(((20.2)*cj5*rxp1_2))+(((20.2)*cj5*rxp0_1*sj0))+(((-18.6)*cj0*cj2*rxp1_0*sj5))+(((-20.2)*rxp1_1*sj0*sj5))+(((25250.0)*cj0*cj5*rxp1_0))+(((25250.0)*cj5*rxp1_1*sj0))+(((23250.0)*cj0*cj2*rxp0_0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x676=IKsin(j3);
IkReal x677=IKcos(j3);
IkReal x678=((1.99999872000082)*sj5);
IkReal x679=((0.000799999488000328)*cj5);
IkReal x680=(rxp0_1*sj0);
IkReal x681=((0.00159999897600066)*npx);
IkReal x682=((1.99999872000082)*npy);
IkReal x683=(pp*sj5);
IkReal x684=(npy*sj5);
IkReal x685=(cj5*npy);
IkReal x686=(cj0*rxp0_0);
IkReal x687=((0.99999936000041)*sj5);
IkReal x688=(cj0*pp);
IkReal x689=((0.99999936000041)*sj0);
IkReal x690=(cj0*px);
IkReal x691=((6.39999590400262e-7)*cj5);
IkReal x692=((0.000799999488000328)*sj5);
IkReal x693=((0.99999936000041)*cj5);
IkReal x694=(cj0*rxp1_0);
IkReal x695=((1.27999918080052e-6)*pz);
IkReal x696=(cj5*npx);
IkReal x697=(py*sj0);
IkReal x698=(npx*x697);
IkReal x699=(cj5*x690);
IkReal x700=(sj2*x676);
IkReal x701=((0.185999940480029)*x677);
IkReal x702=(cj2*x677);
IkReal x703=(sj2*x677);
IkReal x704=(cj2*x676);
evalcond[0]=((0.0916759976359933)+(((-0.04687199256)*x700))+(((0.04687199256)*x702))+(((-1.0)*pp))+(((0.05090399192)*x677))+(((0.00808)*x676))+(((0.00744)*x704))+(((0.00744)*x703))+(((0.075144)*cj2)));
evalcond[1]=((0.125999981064013)+(((0.201999935360031)*x677))+(((0.000799999744000123)*x696))+(((-0.000799999744000123)*x684))+(((-0.185999940480029)*x700))+((cj2*x701))+(((0.999999680000154)*x685))+(((0.999999680000154)*npx*sj5)));
evalcond[2]=((-0.0199999936000031)+((rxp0_2*x692))+((rxp0_2*x691))+((x686*x687))+(((-1.0)*rxp1_1*sj0*x692))+(((-0.201999935360031)*x676))+(((-0.185999940480029)*x704))+(((-6.39999590400262e-7)*rxp1_2*sj5))+((x693*x694))+((x679*x686))+((x679*x680))+(((-1.0)*x692*x694))+((rxp1_2*x679))+((x680*x687))+((cj5*rxp1_1*x689))+(((-1.0)*sj2*x701)));
evalcond[3]=((6.03048165988678e-5)+((pp*r10*sj0*x679))+(((1.98242671922355e-5)*x677))+(((-0.000799999488000328)*cj0*r01*x683))+((cj5*pp*r11*x689))+((r00*x679*x688))+((pp*r20*x691))+((x684*x695))+(((0.000799999488000328)*r20*x683))+((r01*x688*x693))+(((6.46399793152099e-6)*x676))+(((-1.0)*x682*x699))+(((0.99999936000041)*cj0*r00*x683))+((r10*x683*x689))+(((-0.000799999488000328)*r11*sj0*x683))+(((5.95199809536091e-6)*x703))+(((5.95199809536091e-6)*x704))+(((-1.82540282067119e-5)*x700))+(((1.82540282067119e-5)*x702))+(((-6.39999590400262e-7)*r21*x683))+(((-1.0)*x695*x696))+(((-1.0)*cj5*x682*x697))+(((-1.0)*pz*sj5*x681))+(((-1.0)*npx*x678*x690))+(((-0.00159999897600066)*pz*x685))+(((6.01151807631452e-5)*cj2))+(((-1.0)*cj5*x681*x697))+(((-1.0)*x678*x698))+(((0.00159999897600066)*x684*x697))+(((0.00159999897600066)*x684*x690))+((pp*r21*x679))+(((-1.0)*x681*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x705=(sj2*sj3);
IkReal x706=(cj2*cj3);
IkReal x707=(cj2*sj3);
IkReal x708=(cj3*sj2);
j1eval[0]=((-12.3220423333334)+(((-10.1)*cj2))+(((-1.08602150537634)*sj3))+(((-1.0)*x707))+(((-1.0)*x708))+(((-6.299999)*x706))+(((6.299999)*x705))+(((-6.84193439784946)*cj3)));
j1eval[1]=IKsign(((-0.0916759949600004)+(((-0.04687199256)*x706))+(((-0.075144)*cj2))+(((0.04687199256)*x705))+(((-0.00744)*x707))+(((-0.00744)*x708))+(((-0.00808)*sj3))+(((-0.05090399192)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x709=(cj3*sj2);
IkReal x710=(cj2*sj3);
j1eval[0]=((-1.0)+(((-10.1)*sj3))+(((-9.3)*x710))+(((-9.3)*x709)));
j1eval[1]=IKsign(((-0.0199999936000031)+(((-0.185999940480029)*x709))+(((-0.185999940480029)*x710))+(((-0.201999935360031)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x711=(sj2*sj3);
IkReal x712=(cj2*cj3);
j1eval[0]=((-1.0)+(((1.47619071050646)*x711))+(((-1.47619071050646)*x712))+(((-1.6031748576468)*cj3)));
j1eval[1]=IKsign(((-0.125999939680026)+(((0.185999940480029)*x711))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*x712))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j4]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-0.999999680000154)*cj2*cj3*px*sj0))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((-0.201999870720083)*r20*sj2*sj5))+(((0.999999680000154)*cj0*cj2*cj3*py))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((0.999999680000154)*px*sj0*sj2*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.999999680000154)*cj0*py*sj2*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IkReal(((((8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((0.999999680000154)*cj0*cj3*py*sj2))+(((-8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((-1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.19039923814449e-7)*r11*sj0*sj5))+(((-1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-0.000100799919488052)*cj5*r20*sj2*sj3))+(((0.0199999872000082)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.0199999872000082)*cj2*cj5*r21*sj3))+(((-1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.0199999872000082)*cj3*cj5*r21*sj2))+(((-0.000148799904768061)*r10*sj0*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((-0.000161599896576066)*cj0*cj2*r00*sj5))+(((-0.000161599896576066)*cj2*r21*sj5))+(((0.125999899360064)*cj2*cj3*cj5*r21))+(((0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000148799904768061)*cj0*cj5*r01))+(((-1.19039923814449e-7)*cj0*cj5*r00))+(((-0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000148799904768061)*cj5*r11*sj0))+(((0.000148799904768061)*cj5*r20))+(((-0.000148799904768061)*cj0*r00*sj5))+(((-0.125999899360064)*cj5*r21*sj2*sj3))+(((0.0199999872000082)*cj2*r20*sj3*sj5))+(((0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((1.19039923814449e-7)*cj0*r01*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((-0.999999680000154)*cj3*px*sj0*sj2))+(((-0.999999680000154)*cj2*px*sj0*sj3))+(((-1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000161599896576066)*cj0*cj2*cj5*r01))+(((-1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((-0.000148799904768061)*r21*sj5))+(((8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3))+(((0.185999880960076)*r20*sj5))+(((0.201999870720083)*cj2*r20*sj5))+(((0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((0.000100799919488052)*r21*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((-1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((0.201999870720083)*cj2*cj5*r21))+(((-0.000161599896576066)*cj2*cj5*r11*sj0))+(((-8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((0.999999680000154)*cj0*cj2*py*sj3))+(((8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*r20*sj2*sj3*sj5))+(((-1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((-1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.19039923814449e-7)*cj5*r10*sj0))+(((-1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((0.185999880960076)*cj5*r21))+(((-1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000161599896576066)*cj2*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.29279917260853e-7)*cj0*cj2*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714=IKPowWithIntegerCheck(IKsign(((-0.125999939680026)+(((0.185999940480029)*sj2*sj3))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*cj2*cj3)))),-1);
if(!x714.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x713.value)+(((1.5707963267949)*(x714.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x715=IKcos(j1);
IkReal x716=IKsin(j1);
IkReal x717=((0.12599998)*sj3);
IkReal x718=(px*sj0);
IkReal x719=(sj0*sj5);
IkReal x720=(pp*r01);
IkReal x721=(cj5*sj0);
IkReal x722=(npx*py);
IkReal x723=(cj0*sj5);
IkReal x724=((6.39999590400262e-7)*r11);
IkReal x725=((0.000799999744000123)*r00);
IkReal x726=((1.59999948800025e-5)*cj3);
IkReal x727=((4.90699682976127e-5)*sj3);
IkReal x728=((6.39999590400262e-7)*r10);
IkReal x729=((0.0216839957738963)*cj3);
IkReal x730=(cj0*cj5);
IkReal x731=((0.00159999897600066)*npy);
IkReal x732=((0.000799999488000328)*pp);
IkReal x733=((0.999999680000154)*sj3);
IkReal x734=(pz*sj5);
IkReal x735=(cj5*pz);
IkReal x736=((0.999999680000154)*r10);
IkReal x737=((0.0050399992425605)*cj3);
IkReal x738=((0.999999680000154)*cj3);
IkReal x739=((0.0908759736324669)*cj3);
IkReal x740=((0.02)*sj3);
IkReal x741=((1.27999918080052e-6)*px);
IkReal x742=((1.59999948800025e-5)*sj3);
IkReal x743=((0.999999680000154)*r00);
IkReal x744=((0.00159999897600066)*npx);
IkReal x745=((0.12599998)*cj3);
IkReal x746=((0.0092679997470144)*sj3);
IkReal x747=((1.99999936000031)*npy);
IkReal x748=((0.99999936000041)*cj5);
IkReal x749=((0.00159999948800025)*npy);
IkReal x750=((0.02)*cj3);
IkReal x751=((0.999999680000154)*r11);
IkReal x752=((6.39999590400262e-7)*r00);
IkReal x753=((0.000799999744000123)*r10);
IkReal x754=((0.000799999488000328)*cj5);
IkReal x755=((4.90699682976127e-5)*cj3);
IkReal x756=((0.0050399992425605)*sj3);
IkReal x757=((0.000799999488000328)*sj5);
IkReal x758=(cj2*x716);
IkReal x759=(sj2*x716);
IkReal x760=((0.0751439759539315)*x716);
IkReal x761=(sj2*x715);
IkReal x762=(cj2*x715);
IkReal x763=((0.0751439759539315)*x715);
IkReal x764=((0.99999936000041)*r20*sj5);
IkReal x765=((0.000799999744000123)*r11*x723);
IkReal x766=(sj3*x762);
evalcond[0]=((((-0.202)*x758))+(((-1.0)*x745*x758))+(((-1.0)*x740*x761))+(((-1.0)*x750*x759))+(((-0.202)*x761))+(((-0.186)*x716))+(((-1.0)*x745*x761))+(((-1.0)*x717*x762))+x718+((x717*x759))+((x750*x762))+(((-1.0)*cj0*py))+(((-1.0)*x740*x758)));
evalcond[1]=(((x745*x759))+(((-1.0)*x740*x762))+(((-1.0)*x750*x758))+(((-1.0)*x750*x761))+(((-0.000799999744000123)*py*sj0))+(((-0.202)*x762))+(((-0.186)*x715))+(((-1.0)*x745*x762))+((x740*x759))+(((0.202)*x759))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+((x717*x758))+((x717*x761)));
evalcond[2]=(((x721*x728))+(((-1.0)*r21*x748))+((x738*x759))+(((-1.0)*x764))+(((-1.0)*x738*x762))+((r21*x757))+((x730*x752))+((x733*x761))+(((0.000799999488000328)*r10*x719))+(((-6.39999590400262e-7)*r01*x723))+((x733*x758))+(((-1.0)*x719*x724))+(((0.000799999488000328)*r01*x730))+(((0.000799999488000328)*r00*x723))+(((0.000799999488000328)*r11*x721))+(((-1.0)*r20*x754)));
evalcond[3]=((((-0.999999680000154)*r01*x721))+((x723*x736))+(((0.000799999744000123)*r01*x719))+(((-1.0)*x765))+(((-1.0)*x738*x761))+(((-1.0)*x733*x762))+((x730*x751))+((x730*x753))+(((-1.0)*x719*x743))+(((-1.0)*x721*x725))+((x733*x759))+(((-1.0)*x738*x758)));
evalcond[4]=((((-6.39999590400262e-7)*rxp1_1*x719))+(((-1.0)*rxp0_2*x754))+(((6.39999590400262e-7)*rxp0_0*x730))+(((0.000799999488000328)*rxp0_0*x723))+(((0.000799999488000328)*rxp0_1*x719))+(((-1.0)*rxp1_2*x748))+(((-1.0)*x727*x759))+(((6.39999590400262e-7)*rxp0_1*x721))+(((0.000161599948288025)*x761))+(((0.000161599948288025)*x758))+((rxp1_2*x757))+(((0.000799999488000328)*rxp1_0*x730))+(((0.000799999488000328)*rxp1_1*x721))+((x755*x758))+(((-1.0)*x726*x762))+((x727*x762))+((x726*x759))+(((-0.99999936000041)*rxp0_2*sj5))+((x755*x761))+((x742*x758))+(((0.000148799952384023)*x716))+((x742*x761))+(((-6.39999590400262e-7)*rxp1_0*x723)));
evalcond[5]=(((x727*x758))+(((0.999999680000154)*rxp0_1*x723))+(((0.999999680000154)*rxp1_1*x730))+(((0.000799999744000123)*rxp1_0*x719))+(((-0.000161599948288025)*x762))+(((-0.000799999744000123)*rxp1_1*x723))+(((-0.999999680000154)*rxp1_0*x721))+(((-0.000148799952384023)*x715))+(((-1.0)*x755*x762))+(((0.000799999744000123)*rxp0_1*x730))+(((-1.0)*x726*x758))+(((-1.0)*x742*x762))+(((0.000161599948288025)*x759))+((x755*x759))+(((-1.0)*x726*x761))+((x727*x761))+(((-0.000799999744000123)*rxp0_0*x721))+((x742*x759))+(((-0.999999680000154)*rxp0_0*x719)));
evalcond[6]=(((cj3*x763))+((sj3*x760))+((x739*x762))+(((-6.39999590400262e-7)*x720*x723))+((r11*x721*x732))+(((-1.0)*pp*x764))+((r21*sj5*x732))+(((-1.0)*py*x721*x731))+(((-1.0)*x731*x734))+(((-1.0)*pp*r21*x748))+(((0.000799999488000328)*x720*x730))+(((-0.00159999897600066)*x719*x722))+(((1.27999918080052e-6)*npy*py*x719))+(((-1.0)*x729*x759))+((r00*x723*x732))+((npy*x723*x741))+(((0.00743999761920114)*x716))+((x737*x758))+((pp*x730*x752))+(((-0.0509039923498611)*x759))+(((0.0509039923498611)*x762))+(((-1.0)*x746*x761))+(((-1.0)*px*x723*x744))+(((-1.0)*cj5*r20*x732))+(((1.99999872000082)*npx*x734))+((x756*x762))+(((0.00807999741440124)*x758))+(((-1.27999918080052e-6)*x721*x722))+(((1.99999872000082)*npy*x735))+(((-1.0)*x756*x759))+(((0.0468719929558127)*x715))+(((-1.0)*pp*x719*x724))+(((0.0599239781115562)*sj3*x758))+((pp*x721*x728))+(((-1.0)*px*x730*x731))+(((0.00807999741440124)*x761))+((x735*x744))+(((-1.0)*npx*x730*x741))+((x737*x761))+((r10*x719*x732)));
evalcond[7]=(((cj3*x760))+((x756*x758))+(((0.0509039923498611)*x758))+(((-0.00159999948800025)*x722*x730))+((x739*x758))+(((-1.0)*pp*x765))+(((-0.999999680000154)*x720*x721))+(((-1.99999936000031)*x722*x723))+(((1.99999936000031)*npx*sj5*x718))+(((-0.00807999741440124)*x762))+(((-1.0)*pp*x719*x743))+((x737*x759))+(((-1.0)*pp*x721*x725))+((cj5*x718*x747))+((pp*x730*x751))+((pp*x730*x753))+(((-1.0)*x746*x759))+(((0.0509039923498611)*x761))+((x756*x761))+(((-1.0)*sj5*x718*x749))+(((0.00807999741440124)*x759))+(((0.0468719929558127)*x716))+(((0.00159999948800025)*cj5*npx*x718))+((pp*x723*x736))+((py*x723*x749))+(((-1.0)*py*x730*x747))+(((-1.0)*x737*x762))+(((-0.0599239781115562)*x766))+(((-0.00743999761920114)*x715))+((x729*x761))+(((0.000799999744000123)*x719*x720))+(((-1.0)*sj3*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign(((-0.0199999936000031)+(((-0.185999940480029)*cj2*sj3))+(((-0.201999935360031)*sj3))+(((-0.185999940480029)*cj3*sj2)))),-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(((((-0.0199999872000082)*cj2*cj5*r21*sj3))+(((0.000148799904768061)*r10*sj0*sj5))+(((-0.125999899360064)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((0.000148799904768061)*cj0*cj5*r01))+(((0.000148799904768061)*r21*sj5))+(((-1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.19039923814449e-7)*r11*sj0*sj5))+(((-1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.29279917260853e-7)*cj0*cj2*r01*sj5))+(((1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.000148799904768061)*cj5*r11*sj0))+(((1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((-0.99999936000041)*cj2*cj3*pz))+(((1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj5*r20*sj2*sj3))+(((-0.185999880960076)*cj5*r21))+(((1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000799999488000328)*cj0*cj2*cj3*px))+(((-0.000799999488000328)*cj0*px*sj2*sj3))+(((1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((0.000161599896576066)*cj2*r21*sj5))+(((0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((0.000799999488000328)*cj2*cj3*py*sj0))+(((1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((0.000148799904768061)*cj0*r00*sj5))+(((-0.0199999872000082)*cj3*r20*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((-0.201999870720083)*cj2*r20*sj5))+(((8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*cj5*r11*sj0))+(((-0.0199999872000082)*cj3*cj5*r21*sj2))+(((-1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((1.19039923814449e-7)*cj5*r10*sj0))+(((0.125999899360064)*r20*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r20))+(((0.99999936000041)*pz*sj2*sj3))+(((-1.19039923814449e-7)*cj0*r01*sj5))+(((0.000161599896576066)*cj0*cj2*cj5*r01))+(((-8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000100799919488052)*r21*sj2*sj3*sj5))+(((-0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((-8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((0.125999899360064)*cj5*r21*sj2*sj3))+(((-0.000148799904768061)*cj5*r20))+(((-0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-0.0199999872000082)*cj2*r20*sj3*sj5))+(((-0.201999870720083)*cj2*cj5*r21))+(((0.000161599896576066)*cj0*cj2*r00*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((-1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((-0.000799999488000328)*py*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((1.19039923814449e-7)*cj0*cj5*r00))+(((8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-0.000161599896576066)*cj2*cj5*r20))+(((0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((-0.185999880960076)*r20*sj5))+(((-8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3)))),IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((0.000799999488000328)*cj3*py*sj0*sj2))+(((0.000799999488000328)*cj0*cj3*px*sj2))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000799999488000328)*cj0*cj2*px*sj3))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((0.000799999488000328)*cj2*py*sj0*sj3))+(((-0.201999870720083)*r20*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((-0.99999936000041)*cj2*pz*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((-0.99999936000041)*cj3*pz*sj2))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x767.value)))+(x768.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x769=IKcos(j1);
IkReal x770=IKsin(j1);
IkReal x771=((0.12599998)*sj3);
IkReal x772=(px*sj0);
IkReal x773=(sj0*sj5);
IkReal x774=(pp*r01);
IkReal x775=(cj5*sj0);
IkReal x776=(npx*py);
IkReal x777=(cj0*sj5);
IkReal x778=((6.39999590400262e-7)*r11);
IkReal x779=((0.000799999744000123)*r00);
IkReal x780=((1.59999948800025e-5)*cj3);
IkReal x781=((4.90699682976127e-5)*sj3);
IkReal x782=((6.39999590400262e-7)*r10);
IkReal x783=((0.0216839957738963)*cj3);
IkReal x784=(cj0*cj5);
IkReal x785=((0.00159999897600066)*npy);
IkReal x786=((0.000799999488000328)*pp);
IkReal x787=((0.999999680000154)*sj3);
IkReal x788=(pz*sj5);
IkReal x789=(cj5*pz);
IkReal x790=((0.999999680000154)*r10);
IkReal x791=((0.0050399992425605)*cj3);
IkReal x792=((0.999999680000154)*cj3);
IkReal x793=((0.0908759736324669)*cj3);
IkReal x794=((0.02)*sj3);
IkReal x795=((1.27999918080052e-6)*px);
IkReal x796=((1.59999948800025e-5)*sj3);
IkReal x797=((0.999999680000154)*r00);
IkReal x798=((0.00159999897600066)*npx);
IkReal x799=((0.12599998)*cj3);
IkReal x800=((0.0092679997470144)*sj3);
IkReal x801=((1.99999936000031)*npy);
IkReal x802=((0.99999936000041)*cj5);
IkReal x803=((0.00159999948800025)*npy);
IkReal x804=((0.02)*cj3);
IkReal x805=((0.999999680000154)*r11);
IkReal x806=((6.39999590400262e-7)*r00);
IkReal x807=((0.000799999744000123)*r10);
IkReal x808=((0.000799999488000328)*cj5);
IkReal x809=((4.90699682976127e-5)*cj3);
IkReal x810=((0.0050399992425605)*sj3);
IkReal x811=((0.000799999488000328)*sj5);
IkReal x812=(cj2*x770);
IkReal x813=(sj2*x770);
IkReal x814=((0.0751439759539315)*x770);
IkReal x815=(sj2*x769);
IkReal x816=(cj2*x769);
IkReal x817=((0.0751439759539315)*x769);
IkReal x818=((0.99999936000041)*r20*sj5);
IkReal x819=((0.000799999744000123)*r11*x777);
IkReal x820=(sj3*x816);
evalcond[0]=((((-1.0)*x771*x816))+(((-1.0)*x794*x815))+(((-1.0)*x794*x812))+(((-0.186)*x770))+((x771*x813))+((x804*x816))+(((-1.0)*x804*x813))+(((-1.0)*x799*x815))+(((-1.0)*x799*x812))+x772+(((-1.0)*cj0*py))+(((-0.202)*x812))+(((-0.202)*x815)));
evalcond[1]=(((x799*x813))+((x794*x813))+(((-1.0)*x794*x816))+(((-0.186)*x769))+(((-0.000799999744000123)*py*sj0))+((x771*x815))+((x771*x812))+(((-1.0)*x804*x815))+(((-1.0)*x804*x812))+(((-1.0)*x799*x816))+(((0.202)*x813))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+(((-0.202)*x816)));
evalcond[2]=((((-1.0)*x792*x816))+(((0.000799999488000328)*r00*x777))+((x792*x813))+(((0.000799999488000328)*r11*x775))+(((0.000799999488000328)*r01*x784))+((x775*x782))+((x787*x812))+((x787*x815))+(((-1.0)*x818))+(((-6.39999590400262e-7)*r01*x777))+(((0.000799999488000328)*r10*x773))+(((-1.0)*r21*x802))+(((-1.0)*r20*x808))+(((-1.0)*x773*x778))+((r21*x811))+((x784*x806)));
evalcond[3]=((((-1.0)*x792*x812))+(((-1.0)*x792*x815))+(((-1.0)*x773*x797))+((x787*x813))+(((-1.0)*x819))+(((-1.0)*x775*x779))+(((-1.0)*x787*x816))+(((0.000799999744000123)*r01*x773))+(((-0.999999680000154)*r01*x775))+((x777*x790))+((x784*x807))+((x784*x805)));
evalcond[4]=((((6.39999590400262e-7)*rxp0_1*x775))+((x780*x813))+(((6.39999590400262e-7)*rxp0_0*x784))+(((0.000148799952384023)*x770))+((x809*x812))+((x809*x815))+(((-1.0)*rxp1_2*x802))+(((0.000799999488000328)*rxp1_0*x784))+((x796*x815))+((x796*x812))+(((0.000799999488000328)*rxp1_1*x775))+(((-1.0)*rxp0_2*x808))+(((-1.0)*x780*x816))+((x781*x816))+(((-6.39999590400262e-7)*rxp1_0*x777))+(((0.000799999488000328)*rxp0_1*x773))+(((0.000799999488000328)*rxp0_0*x777))+((rxp1_2*x811))+(((-6.39999590400262e-7)*rxp1_1*x773))+(((-0.99999936000041)*rxp0_2*sj5))+(((-1.0)*x781*x813))+(((0.000161599948288025)*x812))+(((0.000161599948288025)*x815)));
evalcond[5]=((((-0.999999680000154)*rxp1_0*x775))+(((0.000799999744000123)*rxp1_0*x773))+((x809*x813))+(((-0.000799999744000123)*rxp0_0*x775))+(((-0.000161599948288025)*x816))+((x796*x813))+(((-1.0)*x809*x816))+(((0.999999680000154)*rxp0_1*x777))+(((-1.0)*x796*x816))+(((0.000799999744000123)*rxp0_1*x784))+(((-0.999999680000154)*rxp0_0*x773))+(((-0.000148799952384023)*x769))+(((-0.000799999744000123)*rxp1_1*x777))+(((-1.0)*x780*x815))+(((-1.0)*x780*x812))+((x781*x815))+((x781*x812))+(((0.999999680000154)*rxp1_1*x784))+(((0.000161599948288025)*x813)));
evalcond[6]=((((1.99999872000082)*npx*x788))+((x791*x812))+((x791*x815))+(((-1.0)*pp*x818))+(((0.00743999761920114)*x770))+(((-1.0)*cj5*r20*x786))+(((1.99999872000082)*npy*x789))+(((-1.0)*pp*r21*x802))+((cj3*x817))+((npy*x777*x795))+(((-1.0)*py*x775*x785))+(((-0.0509039923498611)*x813))+((r00*x777*x786))+((x810*x816))+(((0.0599239781115562)*sj3*x812))+((r10*x773*x786))+(((-1.0)*x783*x813))+(((1.27999918080052e-6)*npy*py*x773))+(((0.00807999741440124)*x812))+(((0.00807999741440124)*x815))+(((-1.0)*npx*x784*x795))+(((-1.0)*x810*x813))+(((-1.0)*px*x777*x798))+((sj3*x814))+((pp*x775*x782))+(((-1.27999918080052e-6)*x775*x776))+((pp*x784*x806))+((x793*x816))+(((0.0509039923498611)*x816))+(((0.000799999488000328)*x774*x784))+(((-1.0)*pp*x773*x778))+((r11*x775*x786))+(((0.0468719929558127)*x769))+((r21*sj5*x786))+(((-1.0)*px*x784*x785))+(((-0.00159999897600066)*x773*x776))+(((-1.0)*x785*x788))+(((-6.39999590400262e-7)*x774*x777))+(((-1.0)*x800*x815))+((x789*x798)));
evalcond[7]=(((x791*x813))+(((-1.0)*pp*x819))+((cj3*x814))+(((-0.00159999948800025)*x776*x784))+(((-0.999999680000154)*x774*x775))+(((-1.99999936000031)*x776*x777))+((py*x777*x803))+(((-1.0)*py*x784*x801))+((x810*x812))+((x810*x815))+((x783*x815))+(((0.00807999741440124)*x813))+(((-0.00743999761920114)*x769))+(((-1.0)*pp*x773*x797))+(((0.0468719929558127)*x770))+((pp*x784*x805))+((pp*x784*x807))+((x793*x812))+(((0.0509039923498611)*x812))+(((0.0509039923498611)*x815))+(((-0.0599239781115562)*x820))+((cj5*x772*x801))+((pp*x777*x790))+(((0.000799999744000123)*x773*x774))+(((1.99999936000031)*npx*sj5*x772))+(((-1.0)*x800*x813))+(((-1.0)*sj3*x817))+(((-1.0)*sj5*x772*x803))+(((0.00159999948800025)*cj5*npx*x772))+(((-1.0)*pp*x775*x779))+(((-1.0)*x791*x816))+(((-0.00807999741440124)*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x821=((0.02)*cj3);
IkReal x822=((1.59999948800025e-5)*sj3);
IkReal x823=((0.12599998)*sj3);
IkReal x824=(px*sj0);
IkReal x825=(cj0*py);
IkReal x826=((0.02)*sj3);
IkReal x827=((0.000100799951744021)*cj3);
IkReal x828=((0.000100799951744021)*sj3);
IkReal x829=((1.59999948800025e-5)*cj3);
IkReal x830=(py*sj0);
IkReal x831=(cj0*px);
IkReal x832=(sj2*sj3);
IkReal x833=(cj2*cj3);
IkReal x834=((0.12599998)*cj3);
IkReal x835=((0.201999935360031)*pz);
IkReal x836=((0.125999939680026)*pz);
IkReal x837=(cj3*sj2);
IkReal x838=((0.000161599948288025)*sj2);
IkReal x839=((0.0199999936000031)*pz);
IkReal x840=((0.202)*cj2);
IkReal x841=(cj2*sj3);
IkReal x842=(sj2*x824);
IkReal x843=(cj2*x831);
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((-0.0916759949600004)+(((-0.04687199256)*x833))+(((-0.075144)*cj2))+(((-0.00744)*x837))+(((0.04687199256)*x832))+(((-0.00744)*x841))+(((-0.00808)*sj3))+(((-0.05090399192)*cj3)))),-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal(((((-0.12599998)*x824*x833))+(((-1.0)*sj2*x823*x825))+(((-1.0)*x828*x843))+((sj2*x821*x825))+(((-0.186)*x824))+(((0.12599998)*x825*x833))+((x832*x839))+(((-1.0)*sj2*x827*x830))+(((-1.0)*sj2*x827*x831))+(((-1.0)*x833*x839))+(((0.186)*x825))+((x836*x837))+(((-1.0)*x830*x838))+(((-1.0)*x824*x840))+((x836*x841))+((x829*x843))+((cj2*x829*x830))+((x823*x842))+((cj2*x825*x826))+(((-1.0)*cj2*x828*x830))+(((-1.0)*sj2*x822*x831))+(((-1.0)*sj2*x822*x830))+((sj2*x835))+(((-1.0)*cj2*x824*x826))+((x825*x840))+(((-1.0)*x831*x838))+(((-1.0)*x821*x842)))),IkReal(((((-1.0)*cj2*x821*x825))+(((-1.0)*x826*x842))+((sj2*x829*x831))+((sj2*x829*x830))+(((-0.185999940480029)*pz))+((x832*x836))+((sj2*x825*x826))+((cj2*x827*x830))+(((-1.0)*x833*x836))+(((-1.0)*x837*x839))+(((0.000148799952384023)*x830))+(((0.000148799952384023)*x831))+(((-1.0)*cj2*x823*x824))+((x827*x843))+(((-1.0)*x834*x842))+((sj2*x825*x834))+(((0.000161599948288025)*x843))+(((-1.0)*sj2*x828*x831))+(((-1.0)*sj2*x828*x830))+((cj2*x822*x830))+((x822*x843))+(((-1.0)*x839*x841))+(((-0.202)*x842))+(((0.000161599948288025)*cj2*x830))+(((0.202)*sj2*x825))+((cj2*x823*x825))+((cj2*x821*x824))+(((-1.0)*cj2*x835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x844.value)))+(x845.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x846=IKcos(j1);
IkReal x847=IKsin(j1);
IkReal x848=((0.12599998)*sj3);
IkReal x849=(px*sj0);
IkReal x850=(sj0*sj5);
IkReal x851=(pp*r01);
IkReal x852=(cj5*sj0);
IkReal x853=(npx*py);
IkReal x854=(cj0*sj5);
IkReal x855=((6.39999590400262e-7)*r11);
IkReal x856=((0.000799999744000123)*r00);
IkReal x857=((1.59999948800025e-5)*cj3);
IkReal x858=((4.90699682976127e-5)*sj3);
IkReal x859=((6.39999590400262e-7)*r10);
IkReal x860=((0.0216839957738963)*cj3);
IkReal x861=(cj0*cj5);
IkReal x862=((0.00159999897600066)*npy);
IkReal x863=((0.000799999488000328)*pp);
IkReal x864=((0.999999680000154)*sj3);
IkReal x865=(pz*sj5);
IkReal x866=(cj5*pz);
IkReal x867=((0.999999680000154)*r10);
IkReal x868=((0.0050399992425605)*cj3);
IkReal x869=((0.999999680000154)*cj3);
IkReal x870=((0.0908759736324669)*cj3);
IkReal x871=((0.02)*sj3);
IkReal x872=((1.27999918080052e-6)*px);
IkReal x873=((1.59999948800025e-5)*sj3);
IkReal x874=((0.999999680000154)*r00);
IkReal x875=((0.00159999897600066)*npx);
IkReal x876=((0.12599998)*cj3);
IkReal x877=((0.0092679997470144)*sj3);
IkReal x878=((1.99999936000031)*npy);
IkReal x879=((0.99999936000041)*cj5);
IkReal x880=((0.00159999948800025)*npy);
IkReal x881=((0.02)*cj3);
IkReal x882=((0.999999680000154)*r11);
IkReal x883=((6.39999590400262e-7)*r00);
IkReal x884=((0.000799999744000123)*r10);
IkReal x885=((0.000799999488000328)*cj5);
IkReal x886=((4.90699682976127e-5)*cj3);
IkReal x887=((0.0050399992425605)*sj3);
IkReal x888=((0.000799999488000328)*sj5);
IkReal x889=(cj2*x847);
IkReal x890=(sj2*x847);
IkReal x891=((0.0751439759539315)*x847);
IkReal x892=(sj2*x846);
IkReal x893=(cj2*x846);
IkReal x894=((0.0751439759539315)*x846);
IkReal x895=((0.99999936000041)*r20*sj5);
IkReal x896=((0.000799999744000123)*r11*x854);
IkReal x897=(sj3*x893);
evalcond[0]=(((x881*x893))+(((-1.0)*x848*x893))+((x848*x890))+(((-1.0)*x881*x890))+(((-1.0)*x876*x889))+(((-1.0)*x876*x892))+(((-0.186)*x847))+(((-1.0)*x871*x889))+(((-1.0)*x871*x892))+x849+(((-0.202)*x889))+(((-1.0)*cj0*py))+(((-0.202)*x892)));
evalcond[1]=(((x876*x890))+((x848*x892))+((x848*x889))+(((-0.000799999744000123)*py*sj0))+(((-1.0)*x881*x892))+(((-1.0)*x881*x889))+(((-1.0)*x876*x893))+(((-0.186)*x846))+((x871*x890))+(((-1.0)*x871*x893))+(((0.202)*x890))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+(((-0.202)*x893)));
evalcond[2]=((((0.000799999488000328)*r10*x850))+(((-6.39999590400262e-7)*r01*x854))+(((0.000799999488000328)*r00*x854))+(((-1.0)*x850*x855))+(((0.000799999488000328)*r01*x861))+(((-1.0)*x895))+((x864*x892))+(((0.000799999488000328)*r11*x852))+((x864*x889))+((x869*x890))+((x852*x859))+((x861*x883))+(((-1.0)*r21*x879))+(((-1.0)*x869*x893))+((r21*x888))+(((-1.0)*r20*x885)));
evalcond[3]=((((-1.0)*x850*x874))+(((-1.0)*x852*x856))+(((-1.0)*x896))+((x864*x890))+(((-0.999999680000154)*r01*x852))+(((-1.0)*x864*x893))+(((-1.0)*x869*x889))+((x861*x882))+((x861*x884))+(((-1.0)*x869*x892))+((x854*x867))+(((0.000799999744000123)*r01*x850)));
evalcond[4]=(((x886*x892))+((x873*x892))+(((-1.0)*rxp0_2*x885))+((x886*x889))+(((0.000799999488000328)*rxp0_0*x854))+(((-6.39999590400262e-7)*rxp1_1*x850))+(((6.39999590400262e-7)*rxp0_1*x852))+(((0.000799999488000328)*rxp0_1*x850))+(((-6.39999590400262e-7)*rxp1_0*x854))+(((0.000148799952384023)*x847))+((x857*x890))+(((-1.0)*x857*x893))+((rxp1_2*x888))+(((0.000799999488000328)*rxp1_1*x852))+((x858*x893))+(((0.000799999488000328)*rxp1_0*x861))+(((6.39999590400262e-7)*rxp0_0*x861))+(((-0.99999936000041)*rxp0_2*sj5))+(((0.000161599948288025)*x892))+(((-1.0)*rxp1_2*x879))+((x873*x889))+(((-1.0)*x858*x890))+(((0.000161599948288025)*x889)));
evalcond[5]=(((x886*x890))+((x873*x890))+(((0.000799999744000123)*rxp0_1*x861))+(((0.000799999744000123)*rxp1_0*x850))+(((-0.000161599948288025)*x893))+(((-0.000799999744000123)*rxp1_1*x854))+(((-1.0)*x873*x893))+(((-0.000148799952384023)*x846))+(((-0.999999680000154)*rxp1_0*x852))+(((-1.0)*x857*x889))+(((0.999999680000154)*rxp1_1*x861))+(((-1.0)*x857*x892))+((x858*x889))+((x858*x892))+(((-0.999999680000154)*rxp0_0*x850))+(((0.000161599948288025)*x890))+(((0.999999680000154)*rxp0_1*x854))+(((-0.000799999744000123)*rxp0_0*x852))+(((-1.0)*x886*x893)));
evalcond[6]=((((-1.0)*pp*x895))+((r11*x852*x863))+((cj3*x894))+((npy*x854*x872))+((x868*x889))+((pp*x861*x883))+(((-1.0)*py*x852*x862))+((x868*x892))+(((-0.0509039923498611)*x890))+(((-1.0)*px*x854*x875))+(((0.0468719929558127)*x846))+(((-1.0)*npx*x861*x872))+(((-1.0)*x862*x865))+(((-1.27999918080052e-6)*x852*x853))+((pp*x852*x859))+(((-1.0)*x877*x892))+(((0.0599239781115562)*sj3*x889))+(((1.27999918080052e-6)*npy*py*x850))+((x866*x875))+((r00*x854*x863))+(((-1.0)*cj5*r20*x863))+(((0.00807999741440124)*x892))+(((0.000799999488000328)*x851*x861))+(((0.00743999761920114)*x847))+(((0.00807999741440124)*x889))+((sj3*x891))+(((-6.39999590400262e-7)*x851*x854))+(((0.0509039923498611)*x893))+(((-1.0)*px*x861*x862))+(((-1.0)*pp*x850*x855))+((x870*x893))+((r21*sj5*x863))+(((-0.00159999897600066)*x850*x853))+((r10*x850*x863))+(((1.99999872000082)*npx*x865))+(((-1.0)*x860*x890))+(((1.99999872000082)*npy*x866))+((x887*x893))+(((-1.0)*pp*r21*x879))+(((-1.0)*x887*x890)));
evalcond[7]=(((x887*x889))+(((-1.0)*pp*x852*x856))+(((-1.0)*pp*x896))+((cj3*x891))+((pp*x854*x867))+(((-0.00159999948800025)*x853*x861))+((pp*x861*x882))+((pp*x861*x884))+((x868*x890))+(((-1.0)*py*x861*x878))+(((0.0468719929558127)*x847))+(((-1.0)*sj5*x849*x880))+(((-1.0)*x877*x890))+(((1.99999936000031)*npx*sj5*x849))+((cj5*x849*x878))+(((0.00807999741440124)*x890))+(((0.000799999744000123)*x850*x851))+(((-1.0)*pp*x850*x874))+(((-0.00743999761920114)*x846))+(((-0.999999680000154)*x851*x852))+((x870*x889))+((py*x854*x880))+(((0.0509039923498611)*x892))+(((0.00159999948800025)*cj5*npx*x849))+(((-0.0599239781115562)*x897))+(((0.0509039923498611)*x889))+((x860*x892))+(((-1.0)*x868*x893))+(((-1.0)*sj3*x894))+(((-0.00807999741440124)*x893))+((x887*x892))+(((-1.99999936000031)*x853*x854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x898=cj2*cj2*cj2;
IkReal x899=cj2*cj2;
IkReal x900=sj2*sj2*sj2;
IkReal x901=(cj5*npx);
IkReal x902=((272795.171287998)*cj2);
IkReal x903=(npy*sj5);
IkReal x904=(cj2*sj2);
IkReal x905=(cj5*npy);
IkReal x906=((9294822627.79996)*sj2);
IkReal x907=(pp*sj2);
IkReal x908=((117.180018897588)*sj2);
IkReal x909=(npx*sj5);
IkReal x910=((340993964.109997)*cj2);
IkReal x911=((23250.0074399988)*cj2);
IkReal x912=((7435858.10223997)*sj2);
IkReal x913=((146475.023621985)*sj2);
IkReal x914=((18.600005951999)*cj2);
IkReal x915=(sj2*x899);
IkReal x916=((80435.751478848)*x900);
IkReal x917=((4127521011.45001)*x899);
IkReal x918=((2026980.61552396)*x898);
IkReal x919=(sj2*x898);
IkReal x920=((2533725769.40495)*x898);
IkReal x921=((3302016.80916001)*x899);
IkReal x922=((100544689.34856)*x900);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((7313804.680832)+(((-235636496.554661)*cj2*x900))+(((81240108.9936365)*x898))+(((-235636496.554661)*x919))+(((-255906302.7099)*x900))+(((-301826823.210047)*sj2))+(((169745382.636975)*x899))+(((-833759244.312901)*x904))+(((-767718908.129701)*x915))+(((95818054.3235155)*cj2))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((9425.00301599952)+(((9393.00300575952)*cj2))),-1);
if(!x924.valid){
continue;
}
if( IKabs(((x923.value)*(((-202709700.759431)+(((-962152334.861026)*x898))+(((-377766506.82041)*(x899*x899)))+(((-1.0)*x905*x922))+((x909*x917))+((x909*x910))+((x901*x918))+(((-1.0)*x902*x903))+(((-12668633.0079662)*x900))+(((1001918.46219281)*x903))+(((2379928615.20207)*x919))+((x901*x902))+(((-13693758.4853132)*x901*x904))+(((-7880690217.41416)*x909*x915))+((x903*x912))+((x903*x916))+(((2253391151.50845)*sj2))+(((-7880690217.41416)*x905*x915))+(((-1.0)*x903*x921))+(((13693758.4853132)*x903*x904))+(((-1.0)*x909*x922))+(((10919369488.392)*pp*x899))+((x909*x920))+((x901*x921))+(((6304552.17393133)*x903*x915))+(((5027234467.428)*pp*x898))+(((-17117198106.6415)*x904*x905))+(((-17117198106.6415)*x904*x909))+((x905*x920))+(((-1252398077.74101)*x905))+(((-1252398077.74101)*x909))+(((-6304552.17393133)*x901*x915))+(((6380385333.444)*cj2*pp))+(((-1001918.46219281)*x901))+(((-31671572117.5619)*x899*x907))+(((489850313.504)*pp))+((x905*x910))+((x905*x917))+(((-68792016857.5001)*pp*x904))+(((6956798903.18583)*x904))+(((-1.0)*x905*x906))+(((-578772255.933808)*cj2))+(((-37354804852.7286)*x907))+(((-1.0)*x903*x918))+(((7079863149.40292)*x915))+(((-960424031.195068)*x899))+(((-1.0)*x906*x909))+(((-1.0)*x901*x916))+(((-1.0)*x901*x912)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x924.value)*(((-3181.50155802601)+(((-34830.8345690619)*sj2))+(((-1.0)*x903*x908))+((x909*x913))+((x901*x908))+(((581250.18599997)*x907))+((x903*x914))+(((-25250.0080799987)*x905))+(((-25250.0080799987)*x909))+(((-20.200006463999)*x901))+(((20.200006463999)*x903))+(((-1.0)*x905*x911))+(((-43677.4639767818)*x904))+(((-2929.50143461801)*cj2))+((x905*x913))+(((-1.0)*x909*x911))+(((-1.0)*x901*x914)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x923.value)*(((-202709700.759431)+(((-962152334.861026)*x898))+(((-377766506.82041)*(x899*x899)))+(((-1.0)*x905*x922))+((x909*x917))+((x909*x910))+((x901*x918))+(((-1.0)*x902*x903))+(((-12668633.0079662)*x900))+(((1001918.46219281)*x903))+(((2379928615.20207)*x919))+((x901*x902))+(((-13693758.4853132)*x901*x904))+(((-7880690217.41416)*x909*x915))+((x903*x912))+((x903*x916))+(((2253391151.50845)*sj2))+(((-7880690217.41416)*x905*x915))+(((-1.0)*x903*x921))+(((13693758.4853132)*x903*x904))+(((-1.0)*x909*x922))+(((10919369488.392)*pp*x899))+((x909*x920))+((x901*x921))+(((6304552.17393133)*x903*x915))+(((5027234467.428)*pp*x898))+(((-17117198106.6415)*x904*x905))+(((-17117198106.6415)*x904*x909))+((x905*x920))+(((-1252398077.74101)*x905))+(((-1252398077.74101)*x909))+(((-6304552.17393133)*x901*x915))+(((6380385333.444)*cj2*pp))+(((-1001918.46219281)*x901))+(((-31671572117.5619)*x899*x907))+(((489850313.504)*pp))+((x905*x910))+((x905*x917))+(((-68792016857.5001)*pp*x904))+(((6956798903.18583)*x904))+(((-1.0)*x905*x906))+(((-578772255.933808)*cj2))+(((-37354804852.7286)*x907))+(((-1.0)*x903*x918))+(((7079863149.40292)*x915))+(((-960424031.195068)*x899))+(((-1.0)*x906*x909))+(((-1.0)*x901*x916))+(((-1.0)*x901*x912))))))+IKsqr(((x924.value)*(((-3181.50155802601)+(((-34830.8345690619)*sj2))+(((-1.0)*x903*x908))+((x909*x913))+((x901*x908))+(((581250.18599997)*x907))+((x903*x914))+(((-25250.0080799987)*x905))+(((-25250.0080799987)*x909))+(((-20.200006463999)*x901))+(((20.200006463999)*x903))+(((-1.0)*x905*x911))+(((-43677.4639767818)*x904))+(((-2929.50143461801)*cj2))+((x905*x913))+(((-1.0)*x909*x911))+(((-1.0)*x901*x914))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x923.value)*(((-202709700.759431)+(((-962152334.861026)*x898))+(((-377766506.82041)*(x899*x899)))+(((-1.0)*x905*x922))+((x909*x917))+((x909*x910))+((x901*x918))+(((-1.0)*x902*x903))+(((-12668633.0079662)*x900))+(((1001918.46219281)*x903))+(((2379928615.20207)*x919))+((x901*x902))+(((-13693758.4853132)*x901*x904))+(((-7880690217.41416)*x909*x915))+((x903*x912))+((x903*x916))+(((2253391151.50845)*sj2))+(((-7880690217.41416)*x905*x915))+(((-1.0)*x903*x921))+(((13693758.4853132)*x903*x904))+(((-1.0)*x909*x922))+(((10919369488.392)*pp*x899))+((x909*x920))+((x901*x921))+(((6304552.17393133)*x903*x915))+(((5027234467.428)*pp*x898))+(((-17117198106.6415)*x904*x905))+(((-17117198106.6415)*x904*x909))+((x905*x920))+(((-1252398077.74101)*x905))+(((-1252398077.74101)*x909))+(((-6304552.17393133)*x901*x915))+(((6380385333.444)*cj2*pp))+(((-1001918.46219281)*x901))+(((-31671572117.5619)*x899*x907))+(((489850313.504)*pp))+((x905*x910))+((x905*x917))+(((-68792016857.5001)*pp*x904))+(((6956798903.18583)*x904))+(((-1.0)*x905*x906))+(((-578772255.933808)*cj2))+(((-37354804852.7286)*x907))+(((-1.0)*x903*x918))+(((7079863149.40292)*x915))+(((-960424031.195068)*x899))+(((-1.0)*x906*x909))+(((-1.0)*x901*x916))+(((-1.0)*x901*x912))))), ((x924.value)*(((-3181.50155802601)+(((-34830.8345690619)*sj2))+(((-1.0)*x903*x908))+((x909*x913))+((x901*x908))+(((581250.18599997)*x907))+((x903*x914))+(((-25250.0080799987)*x905))+(((-25250.0080799987)*x909))+(((-20.200006463999)*x901))+(((20.200006463999)*x903))+(((-1.0)*x905*x911))+(((-43677.4639767818)*x904))+(((-2929.50143461801)*cj2))+((x905*x913))+(((-1.0)*x909*x911))+(((-1.0)*x901*x914))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x925=IKsin(j3);
IkReal x926=IKcos(j3);
IkReal x927=((1.99999872000082)*sj5);
IkReal x928=((0.000799999488000328)*cj5);
IkReal x929=(rxp0_1*sj0);
IkReal x930=((0.00159999897600066)*npx);
IkReal x931=((1.99999872000082)*npy);
IkReal x932=(pp*sj5);
IkReal x933=(npy*sj5);
IkReal x934=(cj5*npy);
IkReal x935=(cj0*rxp0_0);
IkReal x936=((0.99999936000041)*sj5);
IkReal x937=(cj0*pp);
IkReal x938=((0.99999936000041)*sj0);
IkReal x939=(cj0*px);
IkReal x940=((6.39999590400262e-7)*cj5);
IkReal x941=((0.000799999488000328)*sj5);
IkReal x942=((0.99999936000041)*cj5);
IkReal x943=(cj0*rxp1_0);
IkReal x944=((1.27999918080052e-6)*pz);
IkReal x945=(cj5*npx);
IkReal x946=(py*sj0);
IkReal x947=(npx*x946);
IkReal x948=(cj5*x939);
IkReal x949=(sj2*x925);
IkReal x950=((0.185999940480029)*x926);
IkReal x951=(cj2*x926);
IkReal x952=(sj2*x926);
IkReal x953=(cj2*x925);
evalcond[0]=((0.0916759976359933)+(((-0.04687199256)*x949))+(((0.05090399192)*x926))+(((0.00808)*x925))+(((-1.0)*pp))+(((0.00744)*x952))+(((0.00744)*x953))+(((0.04687199256)*x951))+(((0.075144)*cj2)));
evalcond[1]=((0.125999981064013)+(((-0.000799999744000123)*x933))+(((0.000799999744000123)*x945))+((cj2*x950))+(((-0.185999940480029)*x949))+(((0.201999935360031)*x926))+(((0.999999680000154)*x934))+(((0.999999680000154)*npx*sj5)));
evalcond[2]=((-0.0199999936000031)+(((-0.185999940480029)*x953))+((cj5*rxp1_1*x938))+((x928*x929))+((x928*x935))+((rxp0_2*x941))+((rxp0_2*x940))+((x935*x936))+(((-1.0)*x941*x943))+(((-6.39999590400262e-7)*rxp1_2*sj5))+((x942*x943))+(((-0.201999935360031)*x925))+(((-1.0)*sj2*x950))+((rxp1_2*x928))+((x929*x936))+(((-1.0)*rxp1_1*sj0*x941)));
evalcond[3]=((6.03048165988678e-5)+(((1.82540282067119e-5)*x951))+(((1.98242671922355e-5)*x926))+(((-0.000799999488000328)*r11*sj0*x932))+((x933*x944))+((pp*r10*sj0*x928))+(((-0.00159999897600066)*pz*x934))+(((0.00159999897600066)*x933*x946))+(((-1.0)*x927*x947))+(((0.000799999488000328)*r20*x932))+(((0.00159999897600066)*x933*x939))+(((-1.0)*pz*sj5*x930))+(((-6.39999590400262e-7)*r21*x932))+((r01*x937*x942))+(((-1.0)*npx*x927*x939))+(((5.95199809536091e-6)*x952))+(((5.95199809536091e-6)*x953))+(((-1.0)*x944*x945))+((r10*x932*x938))+((pp*r20*x940))+(((-1.0)*cj5*x930*x946))+(((-1.82540282067119e-5)*x949))+(((-1.0)*cj5*x931*x946))+(((-1.0)*x931*x948))+(((6.46399793152099e-6)*x925))+(((6.01151807631452e-5)*cj2))+(((-0.000799999488000328)*cj0*r01*x932))+(((0.99999936000041)*cj0*r00*x932))+((pp*r21*x928))+(((-1.0)*x930*x948))+((cj5*pp*r11*x938))+((r00*x928*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x954=(sj2*sj3);
IkReal x955=(cj2*cj3);
IkReal x956=(cj2*sj3);
IkReal x957=(cj3*sj2);
j1eval[0]=((-12.3220423333334)+(((-10.1)*cj2))+(((-1.08602150537634)*sj3))+(((-1.0)*x957))+(((-1.0)*x956))+(((-6.299999)*x955))+(((6.299999)*x954))+(((-6.84193439784946)*cj3)));
j1eval[1]=IKsign(((-0.0916759949600004)+(((-0.00744)*x957))+(((-0.00744)*x956))+(((-0.075144)*cj2))+(((-0.04687199256)*x955))+(((-0.00808)*sj3))+(((-0.05090399192)*cj3))+(((0.04687199256)*x954))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x958=(cj3*sj2);
IkReal x959=(cj2*sj3);
j1eval[0]=((-1.0)+(((-10.1)*sj3))+(((-9.3)*x958))+(((-9.3)*x959)));
j1eval[1]=IKsign(((-0.0199999936000031)+(((-0.185999940480029)*x959))+(((-0.185999940480029)*x958))+(((-0.201999935360031)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x960=(sj2*sj3);
IkReal x961=(cj2*cj3);
j1eval[0]=((-1.0)+(((1.47619071050646)*x960))+(((-1.47619071050646)*x961))+(((-1.6031748576468)*cj3)));
j1eval[1]=IKsign(((-0.125999939680026)+(((0.185999940480029)*x960))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*x961))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j4]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x962 = IKatan2WithCheck(IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-0.999999680000154)*cj2*cj3*px*sj0))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((-0.201999870720083)*r20*sj2*sj5))+(((0.999999680000154)*cj0*cj2*cj3*py))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((0.999999680000154)*px*sj0*sj2*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.999999680000154)*cj0*py*sj2*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IkReal(((((8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((0.999999680000154)*cj0*cj3*py*sj2))+(((-8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((-1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.19039923814449e-7)*r11*sj0*sj5))+(((-1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-0.000100799919488052)*cj5*r20*sj2*sj3))+(((0.0199999872000082)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.0199999872000082)*cj2*cj5*r21*sj3))+(((-1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.0199999872000082)*cj3*cj5*r21*sj2))+(((-0.000148799904768061)*r10*sj0*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((-0.000161599896576066)*cj0*cj2*r00*sj5))+(((-0.000161599896576066)*cj2*r21*sj5))+(((0.125999899360064)*cj2*cj3*cj5*r21))+(((0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000148799904768061)*cj0*cj5*r01))+(((-1.19039923814449e-7)*cj0*cj5*r00))+(((-0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000148799904768061)*cj5*r11*sj0))+(((0.000148799904768061)*cj5*r20))+(((-0.000148799904768061)*cj0*r00*sj5))+(((-0.125999899360064)*cj5*r21*sj2*sj3))+(((0.0199999872000082)*cj2*r20*sj3*sj5))+(((0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((1.19039923814449e-7)*cj0*r01*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((-0.999999680000154)*cj3*px*sj0*sj2))+(((-0.999999680000154)*cj2*px*sj0*sj3))+(((-1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000161599896576066)*cj0*cj2*cj5*r01))+(((-1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((-0.000148799904768061)*r21*sj5))+(((8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3))+(((0.185999880960076)*r20*sj5))+(((0.201999870720083)*cj2*r20*sj5))+(((0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((0.000100799919488052)*r21*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((-1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((0.201999870720083)*cj2*cj5*r21))+(((-0.000161599896576066)*cj2*cj5*r11*sj0))+(((-8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((0.999999680000154)*cj0*cj2*py*sj3))+(((8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*r20*sj2*sj3*sj5))+(((-1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((-1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.19039923814449e-7)*cj5*r10*sj0))+(((-1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((0.185999880960076)*cj5*r21))+(((-1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000161599896576066)*cj2*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.29279917260853e-7)*cj0*cj2*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x962.valid){
continue;
}
CheckValue<IkReal> x963=IKPowWithIntegerCheck(IKsign(((-0.125999939680026)+(((0.185999940480029)*sj2*sj3))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*cj2*cj3)))),-1);
if(!x963.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x962.value)+(((1.5707963267949)*(x963.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x964=IKcos(j1);
IkReal x965=IKsin(j1);
IkReal x966=((0.12599998)*sj3);
IkReal x967=(px*sj0);
IkReal x968=(sj0*sj5);
IkReal x969=(pp*r01);
IkReal x970=(cj5*sj0);
IkReal x971=(npx*py);
IkReal x972=(cj0*sj5);
IkReal x973=((6.39999590400262e-7)*r11);
IkReal x974=((0.000799999744000123)*r00);
IkReal x975=((1.59999948800025e-5)*cj3);
IkReal x976=((4.90699682976127e-5)*sj3);
IkReal x977=((6.39999590400262e-7)*r10);
IkReal x978=((0.0216839957738963)*cj3);
IkReal x979=(cj0*cj5);
IkReal x980=((0.00159999897600066)*npy);
IkReal x981=((0.000799999488000328)*pp);
IkReal x982=((0.999999680000154)*sj3);
IkReal x983=(pz*sj5);
IkReal x984=(cj5*pz);
IkReal x985=((0.999999680000154)*r10);
IkReal x986=((0.0050399992425605)*cj3);
IkReal x987=((0.999999680000154)*cj3);
IkReal x988=((0.0908759736324669)*cj3);
IkReal x989=((0.02)*sj3);
IkReal x990=((1.27999918080052e-6)*px);
IkReal x991=((1.59999948800025e-5)*sj3);
IkReal x992=((0.999999680000154)*r00);
IkReal x993=((0.00159999897600066)*npx);
IkReal x994=((0.12599998)*cj3);
IkReal x995=((0.0092679997470144)*sj3);
IkReal x996=((1.99999936000031)*npy);
IkReal x997=((0.99999936000041)*cj5);
IkReal x998=((0.00159999948800025)*npy);
IkReal x999=((0.02)*cj3);
IkReal x1000=((0.999999680000154)*r11);
IkReal x1001=((6.39999590400262e-7)*r00);
IkReal x1002=((0.000799999744000123)*r10);
IkReal x1003=((0.000799999488000328)*cj5);
IkReal x1004=((4.90699682976127e-5)*cj3);
IkReal x1005=((0.0050399992425605)*sj3);
IkReal x1006=((0.000799999488000328)*sj5);
IkReal x1007=(cj2*x965);
IkReal x1008=(sj2*x965);
IkReal x1009=((0.0751439759539315)*x965);
IkReal x1010=(sj2*x964);
IkReal x1011=(cj2*x964);
IkReal x1012=((0.0751439759539315)*x964);
IkReal x1013=((0.99999936000041)*r20*sj5);
IkReal x1014=((0.000799999744000123)*r11*x972);
IkReal x1015=(sj3*x1011);
evalcond[0]=((((-1.0)*x1010*x989))+((x1008*x966))+((x1011*x999))+(((-1.0)*x1011*x966))+(((-0.186)*x965))+(((-1.0)*x1007*x994))+(((-1.0)*x1010*x994))+(((-0.202)*x1010))+(((-0.202)*x1007))+(((-1.0)*x1007*x989))+x967+(((-1.0)*cj0*py))+(((-1.0)*x1008*x999)));
evalcond[1]=((((-1.0)*x1011*x989))+((x1007*x966))+(((-0.000799999744000123)*py*sj0))+(((-0.186)*x964))+(((-1.0)*x1007*x999))+((x1010*x966))+(((-1.0)*x1011*x994))+(((-1.0)*x1010*x999))+(((-0.202)*x1011))+(((0.202)*x1008))+((x1008*x994))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+((x1008*x989)));
evalcond[2]=((((-1.0)*x1011*x987))+(((0.000799999488000328)*r00*x972))+((x1001*x979))+(((-1.0)*x1013))+(((0.000799999488000328)*r01*x979))+((x1010*x982))+(((-1.0)*r20*x1003))+((x1007*x982))+(((0.000799999488000328)*r11*x970))+((r21*x1006))+(((0.000799999488000328)*r10*x968))+((x970*x977))+(((-1.0)*r21*x997))+(((-6.39999590400262e-7)*r01*x972))+(((-1.0)*x968*x973))+((x1008*x987)));
evalcond[3]=(((x972*x985))+(((-1.0)*x968*x992))+(((-1.0)*x1010*x987))+(((-1.0)*x1011*x982))+(((-1.0)*x1014))+((x1002*x979))+(((-0.999999680000154)*r01*x970))+(((0.000799999744000123)*r01*x968))+(((-1.0)*x970*x974))+(((-1.0)*x1007*x987))+((x1000*x979))+((x1008*x982)));
evalcond[4]=((((-6.39999590400262e-7)*rxp1_1*x968))+(((-1.0)*x1011*x975))+(((-6.39999590400262e-7)*rxp1_0*x972))+((rxp1_2*x1006))+((x1010*x991))+(((-1.0)*rxp0_2*x1003))+((x1011*x976))+(((6.39999590400262e-7)*rxp0_1*x970))+(((-1.0)*x1008*x976))+(((0.000799999488000328)*rxp0_0*x972))+((x1007*x991))+(((0.000799999488000328)*rxp0_1*x968))+(((0.000799999488000328)*rxp1_1*x970))+((x1004*x1007))+(((0.000799999488000328)*rxp1_0*x979))+((x1004*x1010))+(((6.39999590400262e-7)*rxp0_0*x979))+(((-1.0)*rxp1_2*x997))+(((0.000148799952384023)*x965))+(((0.000161599948288025)*x1007))+(((-0.99999936000041)*rxp0_2*sj5))+((x1008*x975))+(((0.000161599948288025)*x1010)));
evalcond[5]=((((-0.000799999744000123)*rxp0_0*x970))+(((-1.0)*x1010*x975))+(((0.999999680000154)*rxp1_1*x979))+(((-1.0)*x1004*x1011))+(((-0.000161599948288025)*x1011))+((x1007*x976))+((x1010*x976))+(((0.999999680000154)*rxp0_1*x972))+(((-1.0)*x1011*x991))+(((0.000799999744000123)*rxp0_1*x979))+((x1004*x1008))+(((-0.999999680000154)*rxp0_0*x968))+(((-0.000148799952384023)*x964))+((x1008*x991))+(((0.000799999744000123)*rxp1_0*x968))+(((0.000161599948288025)*x1008))+(((-1.0)*x1007*x975))+(((-0.000799999744000123)*rxp1_1*x972))+(((-0.999999680000154)*rxp1_0*x970)));
evalcond[6]=((((-1.0)*px*x979*x980))+((r21*sj5*x981))+(((1.99999872000082)*npx*x983))+(((-1.0)*pp*x1013))+(((1.99999872000082)*npy*x984))+(((-0.0509039923498611)*x1008))+(((0.0599239781115562)*sj3*x1007))+((cj3*x1012))+(((-1.27999918080052e-6)*x970*x971))+((x1010*x986))+(((-1.0)*py*x970*x980))+((x1011*x988))+((x1007*x986))+((npy*x972*x990))+(((0.00807999741440124)*x1007))+(((-1.0)*x1008*x978))+(((-1.0)*px*x972*x993))+(((0.000799999488000328)*x969*x979))+((sj3*x1009))+((r11*x970*x981))+(((0.00807999741440124)*x1010))+(((-1.0)*x1010*x995))+(((-1.0)*x1005*x1008))+((x1005*x1011))+((r10*x968*x981))+((r00*x972*x981))+(((-1.0)*npx*x979*x990))+(((-1.0)*cj5*r20*x981))+(((0.0468719929558127)*x964))+(((1.27999918080052e-6)*npy*py*x968))+(((0.0509039923498611)*x1011))+(((-1.0)*pp*x968*x973))+(((0.00743999761920114)*x965))+(((-1.0)*x980*x983))+(((-0.00159999897600066)*x968*x971))+(((-6.39999590400262e-7)*x969*x972))+((pp*x1001*x979))+((pp*x970*x977))+((x984*x993))+(((-1.0)*pp*r21*x997)));
evalcond[7]=((((1.99999936000031)*npx*sj5*x967))+(((-1.0)*pp*x1014))+((py*x972*x998))+((cj3*x1009))+(((-1.0)*x1011*x986))+(((0.000799999744000123)*x968*x969))+(((-1.0)*pp*x970*x974))+(((-0.0599239781115562)*x1015))+(((0.00159999948800025)*cj5*npx*x967))+(((-1.99999936000031)*x971*x972))+((cj5*x967*x996))+((x1007*x988))+((x1010*x978))+(((0.00807999741440124)*x1008))+(((-0.999999680000154)*x969*x970))+((x1005*x1010))+(((0.0468719929558127)*x965))+(((-1.0)*py*x979*x996))+(((-0.00159999948800025)*x971*x979))+(((0.0509039923498611)*x1010))+((x1005*x1007))+((pp*x972*x985))+((pp*x1002*x979))+(((-1.0)*pp*x968*x992))+(((-1.0)*sj3*x1012))+(((0.0509039923498611)*x1007))+((pp*x1000*x979))+(((-0.00807999741440124)*x1011))+(((-0.00743999761920114)*x964))+(((-1.0)*sj5*x967*x998))+(((-1.0)*x1008*x995))+((x1008*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1016=IKPowWithIntegerCheck(IKsign(((-0.0199999936000031)+(((-0.185999940480029)*cj2*sj3))+(((-0.201999935360031)*sj3))+(((-0.185999940480029)*cj3*sj2)))),-1);
if(!x1016.valid){
continue;
}
CheckValue<IkReal> x1017 = IKatan2WithCheck(IkReal(((((-0.0199999872000082)*cj2*cj5*r21*sj3))+(((0.000148799904768061)*r10*sj0*sj5))+(((-0.125999899360064)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((0.000148799904768061)*cj0*cj5*r01))+(((0.000148799904768061)*r21*sj5))+(((-1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.19039923814449e-7)*r11*sj0*sj5))+(((-1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.29279917260853e-7)*cj0*cj2*r01*sj5))+(((1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.000148799904768061)*cj5*r11*sj0))+(((1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((-0.99999936000041)*cj2*cj3*pz))+(((1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj5*r20*sj2*sj3))+(((-0.185999880960076)*cj5*r21))+(((1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000799999488000328)*cj0*cj2*cj3*px))+(((-0.000799999488000328)*cj0*px*sj2*sj3))+(((1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((0.000161599896576066)*cj2*r21*sj5))+(((0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((0.000799999488000328)*cj2*cj3*py*sj0))+(((1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((0.000148799904768061)*cj0*r00*sj5))+(((-0.0199999872000082)*cj3*r20*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((-0.201999870720083)*cj2*r20*sj5))+(((8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*cj5*r11*sj0))+(((-0.0199999872000082)*cj3*cj5*r21*sj2))+(((-1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((1.19039923814449e-7)*cj5*r10*sj0))+(((0.125999899360064)*r20*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r20))+(((0.99999936000041)*pz*sj2*sj3))+(((-1.19039923814449e-7)*cj0*r01*sj5))+(((0.000161599896576066)*cj0*cj2*cj5*r01))+(((-8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000100799919488052)*r21*sj2*sj3*sj5))+(((-0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((-8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((0.125999899360064)*cj5*r21*sj2*sj3))+(((-0.000148799904768061)*cj5*r20))+(((-0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-0.0199999872000082)*cj2*r20*sj3*sj5))+(((-0.201999870720083)*cj2*cj5*r21))+(((0.000161599896576066)*cj0*cj2*r00*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((-1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((-0.000799999488000328)*py*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((1.19039923814449e-7)*cj0*cj5*r00))+(((8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-0.000161599896576066)*cj2*cj5*r20))+(((0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((-0.185999880960076)*r20*sj5))+(((-8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3)))),IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((0.000799999488000328)*cj3*py*sj0*sj2))+(((0.000799999488000328)*cj0*cj3*px*sj2))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000799999488000328)*cj0*cj2*px*sj3))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((0.000799999488000328)*cj2*py*sj0*sj3))+(((-0.201999870720083)*r20*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((-0.99999936000041)*cj2*pz*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((-0.99999936000041)*cj3*pz*sj2))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1017.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1016.value)))+(x1017.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1018=IKcos(j1);
IkReal x1019=IKsin(j1);
IkReal x1020=((0.12599998)*sj3);
IkReal x1021=(px*sj0);
IkReal x1022=(sj0*sj5);
IkReal x1023=(pp*r01);
IkReal x1024=(cj5*sj0);
IkReal x1025=(npx*py);
IkReal x1026=(cj0*sj5);
IkReal x1027=((6.39999590400262e-7)*r11);
IkReal x1028=((0.000799999744000123)*r00);
IkReal x1029=((1.59999948800025e-5)*cj3);
IkReal x1030=((4.90699682976127e-5)*sj3);
IkReal x1031=((6.39999590400262e-7)*r10);
IkReal x1032=((0.0216839957738963)*cj3);
IkReal x1033=(cj0*cj5);
IkReal x1034=((0.00159999897600066)*npy);
IkReal x1035=((0.000799999488000328)*pp);
IkReal x1036=((0.999999680000154)*sj3);
IkReal x1037=(pz*sj5);
IkReal x1038=(cj5*pz);
IkReal x1039=((0.999999680000154)*r10);
IkReal x1040=((0.0050399992425605)*cj3);
IkReal x1041=((0.999999680000154)*cj3);
IkReal x1042=((0.0908759736324669)*cj3);
IkReal x1043=((0.02)*sj3);
IkReal x1044=((1.27999918080052e-6)*px);
IkReal x1045=((1.59999948800025e-5)*sj3);
IkReal x1046=((0.999999680000154)*r00);
IkReal x1047=((0.00159999897600066)*npx);
IkReal x1048=((0.12599998)*cj3);
IkReal x1049=((0.0092679997470144)*sj3);
IkReal x1050=((1.99999936000031)*npy);
IkReal x1051=((0.99999936000041)*cj5);
IkReal x1052=((0.00159999948800025)*npy);
IkReal x1053=((0.02)*cj3);
IkReal x1054=((0.999999680000154)*r11);
IkReal x1055=((6.39999590400262e-7)*r00);
IkReal x1056=((0.000799999744000123)*r10);
IkReal x1057=((0.000799999488000328)*cj5);
IkReal x1058=((4.90699682976127e-5)*cj3);
IkReal x1059=((0.0050399992425605)*sj3);
IkReal x1060=((0.000799999488000328)*sj5);
IkReal x1061=(cj2*x1019);
IkReal x1062=(sj2*x1019);
IkReal x1063=((0.0751439759539315)*x1019);
IkReal x1064=(sj2*x1018);
IkReal x1065=(cj2*x1018);
IkReal x1066=((0.0751439759539315)*x1018);
IkReal x1067=((0.99999936000041)*r20*sj5);
IkReal x1068=((0.000799999744000123)*r11*x1026);
IkReal x1069=(sj3*x1065);
evalcond[0]=((((-0.202)*x1064))+(((-0.202)*x1061))+x1021+(((-0.186)*x1019))+(((-1.0)*x1043*x1064))+(((-1.0)*x1043*x1061))+((x1020*x1062))+(((-1.0)*x1048*x1061))+(((-1.0)*x1048*x1064))+((x1053*x1065))+(((-1.0)*x1020*x1065))+(((-1.0)*x1053*x1062))+(((-1.0)*cj0*py)));
evalcond[1]=((((-0.202)*x1065))+((x1043*x1062))+(((-0.186)*x1018))+(((-1.0)*x1043*x1065))+((x1020*x1064))+((x1020*x1061))+((x1048*x1062))+(((-0.000799999744000123)*py*sj0))+(((-1.0)*x1048*x1065))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+(((-1.0)*x1053*x1061))+(((-1.0)*x1053*x1064))+(((0.202)*x1062)));
evalcond[2]=((((0.000799999488000328)*r11*x1024))+(((0.000799999488000328)*r01*x1033))+(((-1.0)*x1022*x1027))+(((0.000799999488000328)*r00*x1026))+(((-6.39999590400262e-7)*r01*x1026))+((x1041*x1062))+(((-1.0)*x1041*x1065))+((x1024*x1031))+(((0.000799999488000328)*r10*x1022))+((r21*x1060))+((x1036*x1064))+((x1036*x1061))+(((-1.0)*x1067))+(((-1.0)*r20*x1057))+((x1033*x1055))+(((-1.0)*r21*x1051)));
evalcond[3]=((((-1.0)*x1036*x1065))+((x1026*x1039))+(((0.000799999744000123)*r01*x1022))+(((-1.0)*x1041*x1064))+(((-1.0)*x1041*x1061))+(((-1.0)*x1022*x1046))+((x1036*x1062))+(((-1.0)*x1068))+(((-1.0)*x1024*x1028))+((x1033*x1056))+((x1033*x1054))+(((-0.999999680000154)*r01*x1024)));
evalcond[4]=((((-1.0)*x1030*x1062))+(((0.000799999488000328)*rxp0_0*x1026))+(((0.000161599948288025)*x1061))+(((0.000161599948288025)*x1064))+(((-6.39999590400262e-7)*rxp1_1*x1022))+(((6.39999590400262e-7)*rxp0_1*x1024))+(((0.000799999488000328)*rxp0_1*x1022))+(((-6.39999590400262e-7)*rxp1_0*x1026))+((x1030*x1065))+(((0.000148799952384023)*x1019))+(((6.39999590400262e-7)*rxp0_0*x1033))+(((-1.0)*rxp0_2*x1057))+((rxp1_2*x1060))+(((-1.0)*x1029*x1065))+(((-1.0)*rxp1_2*x1051))+((x1045*x1061))+((x1045*x1064))+((x1029*x1062))+(((-0.99999936000041)*rxp0_2*sj5))+(((0.000799999488000328)*rxp1_1*x1024))+(((0.000799999488000328)*rxp1_0*x1033))+((x1058*x1064))+((x1058*x1061)));
evalcond[5]=((((-0.999999680000154)*rxp0_0*x1022))+(((-0.999999680000154)*rxp1_0*x1024))+(((0.000161599948288025)*x1062))+(((0.000799999744000123)*rxp0_1*x1033))+(((-0.000799999744000123)*rxp1_1*x1026))+(((0.000799999744000123)*rxp1_0*x1022))+(((-1.0)*x1058*x1065))+((x1030*x1061))+((x1030*x1064))+(((-1.0)*x1045*x1065))+(((-0.000799999744000123)*rxp0_0*x1024))+(((0.999999680000154)*rxp0_1*x1026))+(((-1.0)*x1029*x1061))+(((-1.0)*x1029*x1064))+((x1045*x1062))+(((-0.000148799952384023)*x1018))+(((0.999999680000154)*rxp1_1*x1033))+(((-0.000161599948288025)*x1065))+((x1058*x1062)));
evalcond[6]=((((0.00807999741440124)*x1061))+(((0.00807999741440124)*x1064))+((x1038*x1047))+((r11*x1024*x1035))+(((0.0509039923498611)*x1065))+(((0.00743999761920114)*x1019))+(((-1.0)*x1059*x1062))+((r10*x1022*x1035))+(((-1.0)*x1034*x1037))+((sj3*x1063))+((pp*x1033*x1055))+(((-1.0)*pp*r21*x1051))+((x1040*x1064))+((x1040*x1061))+(((1.99999872000082)*npy*x1038))+((cj3*x1066))+(((-1.0)*pp*x1022*x1027))+(((1.99999872000082)*npx*x1037))+((r00*x1026*x1035))+(((-1.27999918080052e-6)*x1024*x1025))+(((0.000799999488000328)*x1023*x1033))+(((-1.0)*x1049*x1064))+(((-1.0)*px*x1026*x1047))+(((-1.0)*cj5*r20*x1035))+((npy*x1026*x1044))+(((-0.00159999897600066)*x1022*x1025))+((pp*x1024*x1031))+(((0.0468719929558127)*x1018))+((x1059*x1065))+(((0.0599239781115562)*sj3*x1061))+(((-1.0)*pp*x1067))+(((-6.39999590400262e-7)*x1023*x1026))+(((-1.0)*x1032*x1062))+(((-1.0)*px*x1033*x1034))+(((-1.0)*npx*x1033*x1044))+(((-0.0509039923498611)*x1062))+(((1.27999918080052e-6)*npy*py*x1022))+((x1042*x1065))+((r21*sj5*x1035))+(((-1.0)*py*x1024*x1034)));
evalcond[7]=((((-1.0)*pp*x1024*x1028))+(((0.00807999741440124)*x1062))+(((0.0509039923498611)*x1061))+(((0.0509039923498611)*x1064))+(((-0.999999680000154)*x1023*x1024))+(((-1.0)*sj5*x1021*x1052))+((py*x1026*x1052))+(((1.99999936000031)*npx*sj5*x1021))+((pp*x1033*x1054))+((pp*x1033*x1056))+(((-0.0599239781115562)*x1069))+(((-1.0)*sj3*x1066))+((x1040*x1062))+(((-0.00807999741440124)*x1065))+((cj3*x1063))+(((0.000799999744000123)*x1022*x1023))+(((0.00159999948800025)*cj5*npx*x1021))+(((-1.0)*x1040*x1065))+(((-0.00159999948800025)*x1025*x1033))+(((-0.00743999761920114)*x1018))+(((-1.0)*py*x1033*x1050))+((x1032*x1064))+(((-1.0)*x1049*x1062))+(((0.0468719929558127)*x1019))+((x1059*x1064))+((x1059*x1061))+(((-1.0)*pp*x1068))+((cj5*x1021*x1050))+(((-1.99999936000031)*x1025*x1026))+(((-1.0)*pp*x1022*x1046))+((pp*x1026*x1039))+((x1042*x1061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1070=((0.02)*cj3);
IkReal x1071=((1.59999948800025e-5)*sj3);
IkReal x1072=((0.12599998)*sj3);
IkReal x1073=(px*sj0);
IkReal x1074=(cj0*py);
IkReal x1075=((0.02)*sj3);
IkReal x1076=((0.000100799951744021)*cj3);
IkReal x1077=((0.000100799951744021)*sj3);
IkReal x1078=((1.59999948800025e-5)*cj3);
IkReal x1079=(py*sj0);
IkReal x1080=(cj0*px);
IkReal x1081=(sj2*sj3);
IkReal x1082=(cj2*cj3);
IkReal x1083=((0.12599998)*cj3);
IkReal x1084=((0.201999935360031)*pz);
IkReal x1085=((0.125999939680026)*pz);
IkReal x1086=(cj3*sj2);
IkReal x1087=((0.000161599948288025)*sj2);
IkReal x1088=((0.0199999936000031)*pz);
IkReal x1089=((0.202)*cj2);
IkReal x1090=(cj2*sj3);
IkReal x1091=(sj2*x1073);
IkReal x1092=(cj2*x1080);
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(IKsign(((-0.0916759949600004)+(((-0.075144)*cj2))+(((0.04687199256)*x1081))+(((-0.00808)*sj3))+(((-0.04687199256)*x1082))+(((-0.00744)*x1086))+(((-0.05090399192)*cj3))+(((-0.00744)*x1090)))),-1);
if(!x1093.valid){
continue;
}
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x1077*x1079))+((sj2*x1070*x1074))+(((0.12599998)*x1074*x1082))+(((-1.0)*x1070*x1091))+((x1081*x1088))+((x1085*x1090))+(((-1.0)*sj2*x1071*x1079))+((sj2*x1084))+(((-1.0)*sj2*x1071*x1080))+((cj2*x1074*x1075))+((x1072*x1091))+(((-1.0)*x1080*x1087))+(((0.186)*x1074))+(((-1.0)*sj2*x1072*x1074))+(((-1.0)*x1073*x1089))+(((-1.0)*sj2*x1076*x1079))+(((-0.12599998)*x1073*x1082))+(((-1.0)*x1079*x1087))+(((-1.0)*sj2*x1076*x1080))+(((-1.0)*cj2*x1073*x1075))+(((-1.0)*x1082*x1088))+(((-0.186)*x1073))+(((-1.0)*x1077*x1092))+((x1078*x1092))+((x1074*x1089))+((x1085*x1086))+((cj2*x1078*x1079)))),IkReal((((sj2*x1074*x1083))+((sj2*x1078*x1080))+((x1076*x1092))+((x1081*x1085))+(((-1.0)*x1088*x1090))+(((-0.185999940480029)*pz))+((sj2*x1078*x1079))+(((-1.0)*sj2*x1077*x1080))+(((-1.0)*x1083*x1091))+((cj2*x1072*x1074))+((sj2*x1074*x1075))+((cj2*x1071*x1079))+(((-0.202)*x1091))+(((0.000161599948288025)*x1092))+((cj2*x1070*x1073))+(((-1.0)*x1082*x1085))+(((-1.0)*x1075*x1091))+((x1071*x1092))+(((0.000161599948288025)*cj2*x1079))+(((-1.0)*sj2*x1077*x1079))+(((-1.0)*cj2*x1072*x1073))+(((0.000148799952384023)*x1080))+(((-1.0)*cj2*x1070*x1074))+(((-1.0)*x1086*x1088))+(((0.202)*sj2*x1074))+((cj2*x1076*x1079))+(((-1.0)*cj2*x1084))+(((0.000148799952384023)*x1079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1093.value)))+(x1094.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j1);
IkReal x1096=IKsin(j1);
IkReal x1097=((0.12599998)*sj3);
IkReal x1098=(px*sj0);
IkReal x1099=(sj0*sj5);
IkReal x1100=(pp*r01);
IkReal x1101=(cj5*sj0);
IkReal x1102=(npx*py);
IkReal x1103=(cj0*sj5);
IkReal x1104=((6.39999590400262e-7)*r11);
IkReal x1105=((0.000799999744000123)*r00);
IkReal x1106=((1.59999948800025e-5)*cj3);
IkReal x1107=((4.90699682976127e-5)*sj3);
IkReal x1108=((6.39999590400262e-7)*r10);
IkReal x1109=((0.0216839957738963)*cj3);
IkReal x1110=(cj0*cj5);
IkReal x1111=((0.00159999897600066)*npy);
IkReal x1112=((0.000799999488000328)*pp);
IkReal x1113=((0.999999680000154)*sj3);
IkReal x1114=(pz*sj5);
IkReal x1115=(cj5*pz);
IkReal x1116=((0.999999680000154)*r10);
IkReal x1117=((0.0050399992425605)*cj3);
IkReal x1118=((0.999999680000154)*cj3);
IkReal x1119=((0.0908759736324669)*cj3);
IkReal x1120=((0.02)*sj3);
IkReal x1121=((1.27999918080052e-6)*px);
IkReal x1122=((1.59999948800025e-5)*sj3);
IkReal x1123=((0.999999680000154)*r00);
IkReal x1124=((0.00159999897600066)*npx);
IkReal x1125=((0.12599998)*cj3);
IkReal x1126=((0.0092679997470144)*sj3);
IkReal x1127=((1.99999936000031)*npy);
IkReal x1128=((0.99999936000041)*cj5);
IkReal x1129=((0.00159999948800025)*npy);
IkReal x1130=((0.02)*cj3);
IkReal x1131=((0.999999680000154)*r11);
IkReal x1132=((6.39999590400262e-7)*r00);
IkReal x1133=((0.000799999744000123)*r10);
IkReal x1134=((0.000799999488000328)*cj5);
IkReal x1135=((4.90699682976127e-5)*cj3);
IkReal x1136=((0.0050399992425605)*sj3);
IkReal x1137=((0.000799999488000328)*sj5);
IkReal x1138=(cj2*x1096);
IkReal x1139=(sj2*x1096);
IkReal x1140=((0.0751439759539315)*x1096);
IkReal x1141=(sj2*x1095);
IkReal x1142=(cj2*x1095);
IkReal x1143=((0.0751439759539315)*x1095);
IkReal x1144=((0.99999936000041)*r20*sj5);
IkReal x1145=((0.000799999744000123)*r11*x1103);
IkReal x1146=(sj3*x1142);
evalcond[0]=((((-1.0)*x1120*x1141))+x1098+(((-0.186)*x1096))+(((-0.202)*x1141))+((x1097*x1139))+(((-1.0)*x1130*x1139))+((x1130*x1142))+(((-1.0)*x1125*x1141))+(((-1.0)*x1097*x1142))+(((-1.0)*x1120*x1138))+(((-1.0)*x1125*x1138))+(((-1.0)*cj0*py))+(((-0.202)*x1138)));
evalcond[1]=(((x1097*x1141))+(((-1.0)*x1120*x1142))+(((0.202)*x1139))+(((-0.186)*x1095))+((x1120*x1139))+(((-0.202)*x1142))+(((-0.000799999744000123)*py*sj0))+((x1097*x1138))+(((-1.0)*x1130*x1138))+((x1125*x1139))+(((-1.0)*x1125*x1142))+(((-1.0)*x1130*x1141))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px)));
evalcond[2]=((((-1.0)*x1118*x1142))+((x1113*x1141))+(((0.000799999488000328)*r00*x1103))+(((0.000799999488000328)*r11*x1101))+(((-1.0)*x1144))+(((0.000799999488000328)*r01*x1110))+((x1101*x1108))+((x1113*x1138))+((r21*x1137))+((x1110*x1132))+(((0.000799999488000328)*r10*x1099))+(((-1.0)*x1099*x1104))+(((-1.0)*r20*x1134))+(((-1.0)*r21*x1128))+(((-6.39999590400262e-7)*r01*x1103))+((x1118*x1139)));
evalcond[3]=((((-1.0)*x1118*x1141))+(((-1.0)*x1099*x1123))+(((-0.999999680000154)*r01*x1101))+(((-1.0)*x1145))+((x1113*x1139))+((x1110*x1131))+((x1110*x1133))+(((-1.0)*x1113*x1142))+(((0.000799999744000123)*r01*x1099))+(((-1.0)*x1118*x1138))+((x1103*x1116))+(((-1.0)*x1101*x1105)));
evalcond[4]=((((6.39999590400262e-7)*rxp0_0*x1110))+((rxp1_2*x1137))+(((-1.0)*x1106*x1142))+(((0.000799999488000328)*rxp1_1*x1101))+((x1135*x1138))+((x1107*x1142))+(((-1.0)*x1107*x1139))+(((0.000161599948288025)*x1138))+(((0.000799999488000328)*rxp0_0*x1103))+(((0.000799999488000328)*rxp1_0*x1110))+(((-6.39999590400262e-7)*rxp1_1*x1099))+((x1122*x1141))+(((0.000148799952384023)*x1096))+(((0.000799999488000328)*rxp0_1*x1099))+((x1106*x1139))+(((6.39999590400262e-7)*rxp0_1*x1101))+(((0.000161599948288025)*x1141))+(((-1.0)*rxp0_2*x1134))+((x1122*x1138))+(((-0.99999936000041)*rxp0_2*sj5))+(((-6.39999590400262e-7)*rxp1_0*x1103))+(((-1.0)*rxp1_2*x1128))+((x1135*x1141)));
evalcond[5]=((((-1.0)*x1135*x1142))+(((-0.000799999744000123)*rxp1_1*x1103))+(((-1.0)*x1106*x1141))+(((-0.000161599948288025)*x1142))+(((-0.999999680000154)*rxp1_0*x1101))+(((-0.000799999744000123)*rxp0_0*x1101))+((x1135*x1139))+(((-0.000148799952384023)*x1095))+((x1107*x1141))+(((0.000161599948288025)*x1139))+(((-1.0)*x1106*x1138))+(((0.999999680000154)*rxp1_1*x1110))+((x1107*x1138))+(((0.999999680000154)*rxp0_1*x1103))+((x1122*x1139))+(((0.000799999744000123)*rxp1_0*x1099))+(((0.000799999744000123)*rxp0_1*x1110))+(((-0.999999680000154)*rxp0_0*x1099))+(((-1.0)*x1122*x1142)));
evalcond[6]=((((-1.0)*pp*r21*x1128))+(((0.0509039923498611)*x1142))+((x1119*x1142))+((npy*x1103*x1121))+((r21*sj5*x1112))+(((-0.00159999897600066)*x1099*x1102))+(((0.00807999741440124)*x1141))+(((-1.0)*x1109*x1139))+((cj3*x1143))+(((1.27999918080052e-6)*npy*py*x1099))+(((-1.0)*npx*x1110*x1121))+(((0.000799999488000328)*x1100*x1110))+((sj3*x1140))+(((-1.0)*pp*x1099*x1104))+((pp*x1101*x1108))+(((-1.0)*py*x1101*x1111))+((x1117*x1141))+(((-6.39999590400262e-7)*x1100*x1103))+(((-1.27999918080052e-6)*x1101*x1102))+(((0.00807999741440124)*x1138))+((pp*x1110*x1132))+((r00*x1103*x1112))+(((0.0468719929558127)*x1095))+(((-1.0)*cj5*r20*x1112))+(((-1.0)*x1136*x1139))+(((-1.0)*px*x1110*x1111))+(((1.99999872000082)*npy*x1115))+(((-1.0)*x1126*x1141))+(((0.00743999761920114)*x1096))+((x1117*x1138))+(((-1.0)*px*x1103*x1124))+(((0.0599239781115562)*sj3*x1138))+(((1.99999872000082)*npx*x1114))+(((-0.0509039923498611)*x1139))+((r11*x1101*x1112))+(((-1.0)*x1111*x1114))+(((-1.0)*pp*x1144))+((x1136*x1142))+((r10*x1099*x1112))+((x1115*x1124)));
evalcond[7]=((((0.0509039923498611)*x1141))+((cj5*x1098*x1127))+(((-1.0)*py*x1110*x1127))+(((-1.0)*pp*x1101*x1105))+((pp*x1103*x1116))+(((0.000799999744000123)*x1099*x1100))+((x1119*x1138))+((x1109*x1141))+((x1136*x1138))+(((-0.0599239781115562)*x1146))+((cj3*x1140))+(((1.99999936000031)*npx*sj5*x1098))+(((-1.0)*x1126*x1139))+(((-0.00807999741440124)*x1142))+(((-0.00743999761920114)*x1095))+(((-0.00159999948800025)*x1102*x1110))+(((-0.999999680000154)*x1100*x1101))+(((-1.0)*sj5*x1098*x1129))+(((0.00807999741440124)*x1139))+((pp*x1110*x1133))+((pp*x1110*x1131))+(((-1.0)*pp*x1099*x1123))+(((0.0468719929558127)*x1096))+((py*x1103*x1129))+((x1117*x1139))+(((-1.0)*x1117*x1142))+(((0.0509039923498611)*x1138))+(((-1.0)*sj3*x1143))+(((-1.99999936000031)*x1102*x1103))+(((-1.0)*pp*x1145))+(((0.00159999948800025)*cj5*npx*x1098))+((x1136*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1147=(sj2*sj5);
IkReal x1148=(cj0*rxp1_0);
IkReal x1149=((1162500.0)*npx);
IkReal x1150=(cj2*sj5);
IkReal x1151=((929.999702400143)*rxp0_2);
IkReal x1152=(rxp1_1*sj0);
IkReal x1153=((1162499.62800018)*cj5);
IkReal x1154=((1009.99967680016)*sj5);
IkReal x1155=(rxp0_1*sj0);
IkReal x1156=((0.743999761920114)*rxp1_2);
IkReal x1157=(cj5*sj2);
IkReal x1158=(cj0*rxp0_0);
IkReal x1159=((1262499.59600019)*sj5);
IkReal x1160=(cj5*rxp0_2);
IkReal x1161=((1009.99967680016)*cj5);
IkReal x1162=((1162500.0)*npy);
IkReal x1163=((930.0)*npy);
IkReal x1164=(cj5*npx);
IkReal x1165=((1262499.59600019)*cj5);
IkReal x1166=((929.999702400143)*cj2*cj5);
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(((-25250.0)+(((1162499.62800018)*x1150*x1155))+(((1162499.62800018)*x1150*x1158))+(((0.807999741440124)*x1160))+((cj2*x1152*x1153))+(((146475.0248589)*sj2))+(((-1.0)*x1147*x1163))+(((0.743999761920114)*cj2*x1160))+((x1158*x1159))+((x1148*x1165))+((x1155*x1161))+((x1155*x1166))+(((930.0)*npx*x1157))+((x1157*x1162))+(((-0.807999741440124)*rxp1_2*sj5))+((x1150*x1151))+((rxp0_2*x1154))+(((-1.0)*x1152*x1154))+((x1147*x1149))+(((-929.999702400143)*x1150*x1152))+(((-1.0)*x1148*x1154))+((rxp1_2*x1161))+((rxp1_2*x1166))+((x1152*x1165))+((x1158*x1166))+((x1158*x1161))+(((-929.999702400143)*x1148*x1150))+(((-23250.0)*cj2))+(((-1.0)*x1150*x1156))+((cj2*x1148*x1153))+((x1155*x1159)))),IkReal(((-159075.0269973)+((sj2*x1152*x1153))+(((-23250.0)*sj2))+(((929.999702400143)*x1157*x1158))+(((-929.999702400143)*x1147*x1148))+(((-1.0)*cj2*cj5*x1162))+(((-1.0)*x1149*x1150))+(((929.999702400143)*x1155*x1157))+((sj2*x1148*x1153))+(((-146475.0248589)*cj2))+(((1010.0)*npy*sj5))+(((-1.0)*x1147*x1156))+(((1162499.62800018)*x1147*x1158))+(((1162499.62800018)*x1147*x1155))+((x1147*x1151))+(((0.743999761920114)*rxp0_2*x1157))+(((-1262500.0)*npx*sj5))+(((-1010.0)*x1164))+(((929.999702400143)*rxp1_2*x1157))+(((-1262500.0)*cj5*npy))+(((-930.0)*cj2*x1164))+(((-929.999702400143)*x1147*x1152))+((x1150*x1163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(IKsign(((471250.0)+(((469650.0)*cj2)))),-1);
if(!x1168.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1167.value)+(((1.5707963267949)*(x1168.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1169=IKsin(j3);
IkReal x1170=IKcos(j3);
IkReal x1171=((1.99999872000082)*sj5);
IkReal x1172=((0.000799999488000328)*cj5);
IkReal x1173=(rxp0_1*sj0);
IkReal x1174=((0.00159999897600066)*npx);
IkReal x1175=((1.99999872000082)*npy);
IkReal x1176=(pp*sj5);
IkReal x1177=(npy*sj5);
IkReal x1178=(cj5*npy);
IkReal x1179=(cj0*rxp0_0);
IkReal x1180=((0.99999936000041)*sj5);
IkReal x1181=(cj0*pp);
IkReal x1182=((0.99999936000041)*sj0);
IkReal x1183=(cj0*px);
IkReal x1184=((6.39999590400262e-7)*cj5);
IkReal x1185=((0.000799999488000328)*sj5);
IkReal x1186=((0.99999936000041)*cj5);
IkReal x1187=(cj0*rxp1_0);
IkReal x1188=((1.27999918080052e-6)*pz);
IkReal x1189=(cj5*npx);
IkReal x1190=(py*sj0);
IkReal x1191=(npx*x1190);
IkReal x1192=(cj5*x1183);
IkReal x1193=(sj2*x1169);
IkReal x1194=((0.185999940480029)*x1170);
IkReal x1195=(cj2*x1170);
IkReal x1196=(sj2*x1170);
IkReal x1197=(cj2*x1169);
evalcond[0]=((0.0916759976359933)+(((-0.04687199256)*x1193))+(((0.00744)*x1197))+(((0.00744)*x1196))+(((0.04687199256)*x1195))+(((-1.0)*pp))+(((0.00808)*x1169))+(((0.075144)*cj2))+(((0.05090399192)*x1170)));
evalcond[1]=((0.125999981064013)+(((0.000799999744000123)*x1189))+(((-0.185999940480029)*x1193))+((cj2*x1194))+(((0.999999680000154)*x1178))+(((0.999999680000154)*npx*sj5))+(((-0.000799999744000123)*x1177))+(((0.201999935360031)*x1170)));
evalcond[2]=((-0.0199999936000031)+(((-0.201999935360031)*x1169))+(((-1.0)*sj2*x1194))+((x1186*x1187))+((x1179*x1180))+(((-1.0)*rxp1_1*sj0*x1185))+((x1173*x1180))+(((-6.39999590400262e-7)*rxp1_2*sj5))+((cj5*rxp1_1*x1182))+((x1172*x1173))+((x1172*x1179))+(((-1.0)*x1185*x1187))+(((-0.185999940480029)*x1197))+((rxp1_2*x1172))+((rxp0_2*x1184))+((rxp0_2*x1185)));
evalcond[3]=((6.03048165988678e-5)+((pp*r21*x1172))+(((0.99999936000041)*cj0*r00*x1176))+((cj5*pp*r11*x1182))+((pp*r20*x1184))+(((1.98242671922355e-5)*x1170))+(((0.00159999897600066)*x1177*x1190))+(((-1.0)*cj5*x1174*x1190))+(((-1.0)*x1188*x1189))+(((0.00159999897600066)*x1177*x1183))+((r10*x1176*x1182))+((pp*r10*sj0*x1172))+((x1177*x1188))+(((-1.0)*pz*sj5*x1174))+(((0.000799999488000328)*r20*x1176))+(((-1.0)*cj5*x1175*x1190))+(((-0.000799999488000328)*r11*sj0*x1176))+(((-0.000799999488000328)*cj0*r01*x1176))+(((6.46399793152099e-6)*x1169))+(((-0.00159999897600066)*pz*x1178))+((r01*x1181*x1186))+(((1.82540282067119e-5)*x1195))+(((6.01151807631452e-5)*cj2))+(((-1.0)*x1174*x1192))+((r00*x1172*x1181))+(((-1.0)*x1171*x1191))+(((-1.82540282067119e-5)*x1193))+(((5.95199809536091e-6)*x1196))+(((5.95199809536091e-6)*x1197))+(((-1.0)*npx*x1171*x1183))+(((-6.39999590400262e-7)*r21*x1176))+(((-1.0)*x1175*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1198=(sj2*sj3);
IkReal x1199=(cj2*cj3);
IkReal x1200=(cj2*sj3);
IkReal x1201=(cj3*sj2);
j1eval[0]=((-12.3220423333334)+(((-10.1)*cj2))+(((-1.08602150537634)*sj3))+(((-1.0)*x1200))+(((-1.0)*x1201))+(((6.299999)*x1198))+(((-6.84193439784946)*cj3))+(((-6.299999)*x1199)));
j1eval[1]=IKsign(((-0.0916759949600004)+(((-0.04687199256)*x1199))+(((-0.075144)*cj2))+(((0.04687199256)*x1198))+(((-0.00744)*x1200))+(((-0.00744)*x1201))+(((-0.00808)*sj3))+(((-0.05090399192)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1202=(cj3*sj2);
IkReal x1203=(cj2*sj3);
j1eval[0]=((-1.0)+(((-10.1)*sj3))+(((-9.3)*x1203))+(((-9.3)*x1202)));
j1eval[1]=IKsign(((-0.0199999936000031)+(((-0.201999935360031)*sj3))+(((-0.185999940480029)*x1203))+(((-0.185999940480029)*x1202))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1204=(sj2*sj3);
IkReal x1205=(cj2*cj3);
j1eval[0]=((-1.0)+(((1.47619071050646)*x1204))+(((-1.47619071050646)*x1205))+(((-1.6031748576468)*cj3)));
j1eval[1]=IKsign(((-0.125999939680026)+(((0.185999940480029)*x1204))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*x1205))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j4]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1206 = IKatan2WithCheck(IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-0.999999680000154)*cj2*cj3*px*sj0))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((-0.201999870720083)*r20*sj2*sj5))+(((0.999999680000154)*cj0*cj2*cj3*py))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((0.999999680000154)*px*sj0*sj2*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.999999680000154)*cj0*py*sj2*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IkReal(((((8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((0.999999680000154)*cj0*cj3*py*sj2))+(((-8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((-1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.19039923814449e-7)*r11*sj0*sj5))+(((-1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-0.000100799919488052)*cj5*r20*sj2*sj3))+(((0.0199999872000082)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.0199999872000082)*cj2*cj5*r21*sj3))+(((-1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.0199999872000082)*cj3*cj5*r21*sj2))+(((-0.000148799904768061)*r10*sj0*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((-0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((-0.000161599896576066)*cj0*cj2*r00*sj5))+(((-0.000161599896576066)*cj2*r21*sj5))+(((0.125999899360064)*cj2*cj3*cj5*r21))+(((0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000148799904768061)*cj0*cj5*r01))+(((-1.19039923814449e-7)*cj0*cj5*r00))+(((-0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000148799904768061)*cj5*r11*sj0))+(((0.000148799904768061)*cj5*r20))+(((-0.000148799904768061)*cj0*r00*sj5))+(((-0.125999899360064)*cj5*r21*sj2*sj3))+(((0.0199999872000082)*cj2*r20*sj3*sj5))+(((0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((1.19039923814449e-7)*cj0*r01*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((-0.999999680000154)*cj3*px*sj0*sj2))+(((-0.999999680000154)*cj2*px*sj0*sj3))+(((-1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000161599896576066)*cj0*cj2*cj5*r01))+(((-1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((-0.000148799904768061)*r21*sj5))+(((8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3))+(((0.185999880960076)*r20*sj5))+(((0.201999870720083)*cj2*r20*sj5))+(((0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((0.000100799919488052)*r21*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((-1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((0.201999870720083)*cj2*cj5*r21))+(((-0.000161599896576066)*cj2*cj5*r11*sj0))+(((-8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((0.999999680000154)*cj0*cj2*py*sj3))+(((8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*r20*sj2*sj3*sj5))+(((-1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((-1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.19039923814449e-7)*cj5*r10*sj0))+(((-1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((0.185999880960076)*cj5*r21))+(((-1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000161599896576066)*cj2*cj5*r20))+(((-0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.29279917260853e-7)*cj0*cj2*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1206.valid){
continue;
}
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(IKsign(((-0.125999939680026)+(((0.185999940480029)*sj2*sj3))+(((-0.201999935360031)*cj3))+(((-0.185999940480029)*cj2*cj3)))),-1);
if(!x1207.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1206.value)+(((1.5707963267949)*(x1207.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1208=IKcos(j1);
IkReal x1209=IKsin(j1);
IkReal x1210=((0.12599998)*sj3);
IkReal x1211=(px*sj0);
IkReal x1212=(sj0*sj5);
IkReal x1213=(pp*r01);
IkReal x1214=(cj5*sj0);
IkReal x1215=(npx*py);
IkReal x1216=(cj0*sj5);
IkReal x1217=((6.39999590400262e-7)*r11);
IkReal x1218=((0.000799999744000123)*r00);
IkReal x1219=((1.59999948800025e-5)*cj3);
IkReal x1220=((4.90699682976127e-5)*sj3);
IkReal x1221=((6.39999590400262e-7)*r10);
IkReal x1222=((0.0216839957738963)*cj3);
IkReal x1223=(cj0*cj5);
IkReal x1224=((0.00159999897600066)*npy);
IkReal x1225=((0.000799999488000328)*pp);
IkReal x1226=((0.999999680000154)*sj3);
IkReal x1227=(pz*sj5);
IkReal x1228=(cj5*pz);
IkReal x1229=((0.999999680000154)*r10);
IkReal x1230=((0.0050399992425605)*cj3);
IkReal x1231=((0.999999680000154)*cj3);
IkReal x1232=((0.0908759736324669)*cj3);
IkReal x1233=((0.02)*sj3);
IkReal x1234=((1.27999918080052e-6)*px);
IkReal x1235=((1.59999948800025e-5)*sj3);
IkReal x1236=((0.999999680000154)*r00);
IkReal x1237=((0.00159999897600066)*npx);
IkReal x1238=((0.12599998)*cj3);
IkReal x1239=((0.0092679997470144)*sj3);
IkReal x1240=((1.99999936000031)*npy);
IkReal x1241=((0.99999936000041)*cj5);
IkReal x1242=((0.00159999948800025)*npy);
IkReal x1243=((0.02)*cj3);
IkReal x1244=((0.999999680000154)*r11);
IkReal x1245=((6.39999590400262e-7)*r00);
IkReal x1246=((0.000799999744000123)*r10);
IkReal x1247=((0.000799999488000328)*cj5);
IkReal x1248=((4.90699682976127e-5)*cj3);
IkReal x1249=((0.0050399992425605)*sj3);
IkReal x1250=((0.000799999488000328)*sj5);
IkReal x1251=(cj2*x1209);
IkReal x1252=(sj2*x1209);
IkReal x1253=((0.0751439759539315)*x1209);
IkReal x1254=(sj2*x1208);
IkReal x1255=(cj2*x1208);
IkReal x1256=((0.0751439759539315)*x1208);
IkReal x1257=((0.99999936000041)*r20*sj5);
IkReal x1258=((0.000799999744000123)*r11*x1216);
IkReal x1259=(sj3*x1255);
evalcond[0]=((((-1.0)*x1238*x1254))+(((-1.0)*x1238*x1251))+(((-0.186)*x1209))+(((-0.202)*x1251))+(((-0.202)*x1254))+x1211+(((-1.0)*x1233*x1254))+(((-1.0)*x1233*x1251))+((x1210*x1252))+((x1243*x1255))+(((-1.0)*x1210*x1255))+(((-1.0)*x1243*x1252))+(((-1.0)*cj0*py)));
evalcond[1]=((((-1.0)*x1238*x1255))+(((-0.186)*x1208))+(((-0.202)*x1255))+(((-1.0)*x1233*x1255))+((x1210*x1251))+((x1210*x1254))+(((0.202)*x1252))+((x1238*x1252))+(((-0.000799999744000123)*py*sj0))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+(((-1.0)*x1243*x1251))+(((-1.0)*x1243*x1254))+((x1233*x1252)));
evalcond[2]=(((x1214*x1221))+(((0.000799999488000328)*r01*x1223))+(((-1.0)*x1257))+(((0.000799999488000328)*r00*x1216))+((r21*x1250))+(((-6.39999590400262e-7)*r01*x1216))+(((-1.0)*r21*x1241))+(((0.000799999488000328)*r10*x1212))+(((-1.0)*x1212*x1217))+(((-1.0)*r20*x1247))+(((-1.0)*x1231*x1255))+(((0.000799999488000328)*r11*x1214))+((x1226*x1251))+((x1226*x1254))+((x1223*x1245))+((x1231*x1252)));
evalcond[3]=((((-1.0)*x1226*x1255))+(((-1.0)*x1258))+((x1216*x1229))+(((-1.0)*x1214*x1218))+(((-0.999999680000154)*r01*x1214))+(((-1.0)*x1231*x1254))+(((-1.0)*x1231*x1251))+(((0.000799999744000123)*r01*x1212))+((x1226*x1252))+((x1223*x1246))+((x1223*x1244))+(((-1.0)*x1212*x1236)));
evalcond[4]=((((-6.39999590400262e-7)*rxp1_1*x1212))+(((0.000161599948288025)*x1254))+(((0.000161599948288025)*x1251))+((x1220*x1255))+(((-6.39999590400262e-7)*rxp1_0*x1216))+(((-1.0)*x1219*x1255))+((x1235*x1251))+((x1235*x1254))+(((-1.0)*x1220*x1252))+(((0.000148799952384023)*x1209))+(((0.000799999488000328)*rxp0_0*x1216))+(((6.39999590400262e-7)*rxp0_0*x1223))+(((-1.0)*rxp1_2*x1241))+((rxp1_2*x1250))+(((0.000799999488000328)*rxp0_1*x1212))+(((6.39999590400262e-7)*rxp0_1*x1214))+(((-0.99999936000041)*rxp0_2*sj5))+((x1248*x1251))+((x1248*x1254))+((x1219*x1252))+(((-1.0)*rxp0_2*x1247))+(((0.000799999488000328)*rxp1_0*x1223))+(((0.000799999488000328)*rxp1_1*x1214)));
evalcond[5]=((((0.000161599948288025)*x1252))+(((-0.000799999744000123)*rxp1_1*x1216))+((x1220*x1251))+((x1220*x1254))+(((-0.999999680000154)*rxp1_0*x1214))+(((-1.0)*x1219*x1251))+(((-1.0)*x1219*x1254))+(((-0.999999680000154)*rxp0_0*x1212))+(((0.999999680000154)*rxp1_1*x1223))+(((-0.000161599948288025)*x1255))+(((-1.0)*x1248*x1255))+(((0.000799999744000123)*rxp1_0*x1212))+((x1235*x1252))+(((-0.000799999744000123)*rxp0_0*x1214))+(((-0.000148799952384023)*x1208))+(((-1.0)*x1235*x1255))+((x1248*x1252))+(((0.000799999744000123)*rxp0_1*x1223))+(((0.999999680000154)*rxp0_1*x1216)));
evalcond[6]=((((-1.0)*pp*r21*x1241))+(((0.000799999488000328)*x1213*x1223))+(((1.27999918080052e-6)*npy*py*x1212))+(((0.0468719929558127)*x1208))+((r11*x1214*x1225))+(((1.99999872000082)*npx*x1227))+(((-1.0)*x1249*x1252))+((x1232*x1255))+(((-0.0509039923498611)*x1252))+(((-1.0)*x1224*x1227))+(((-1.0)*pp*x1257))+(((-1.0)*x1222*x1252))+(((0.0509039923498611)*x1255))+(((0.00743999761920114)*x1209))+(((-1.0)*npx*x1223*x1234))+((cj3*x1256))+(((-1.0)*pp*x1212*x1217))+(((-1.0)*cj5*r20*x1225))+(((-6.39999590400262e-7)*x1213*x1216))+((r21*sj5*x1225))+(((0.00807999741440124)*x1254))+(((0.00807999741440124)*x1251))+(((-1.0)*x1239*x1254))+(((-0.00159999897600066)*x1212*x1215))+((r10*x1212*x1225))+((x1230*x1254))+((x1230*x1251))+(((-1.27999918080052e-6)*x1214*x1215))+((r00*x1216*x1225))+(((-1.0)*py*x1214*x1224))+(((-1.0)*px*x1216*x1237))+((pp*x1214*x1221))+((pp*x1223*x1245))+((x1228*x1237))+(((-1.0)*px*x1223*x1224))+((npy*x1216*x1234))+((x1249*x1255))+((sj3*x1253))+(((0.0599239781115562)*sj3*x1251))+(((1.99999872000082)*npy*x1228)));
evalcond[7]=((((0.00159999948800025)*cj5*npx*x1211))+(((0.0468719929558127)*x1209))+(((-0.00159999948800025)*x1215*x1223))+(((0.000799999744000123)*x1212*x1213))+((x1232*x1251))+(((-1.0)*pp*x1212*x1236))+(((-1.0)*pp*x1258))+(((0.0509039923498611)*x1254))+(((0.0509039923498611)*x1251))+((cj3*x1253))+((x1222*x1254))+(((-1.0)*sj3*x1256))+((pp*x1216*x1229))+(((0.00807999741440124)*x1252))+(((-1.0)*x1239*x1252))+((x1230*x1252))+((py*x1216*x1242))+((cj5*x1211*x1240))+(((-1.0)*pp*x1214*x1218))+(((-0.0599239781115562)*x1259))+(((-1.0)*sj5*x1211*x1242))+(((-1.99999936000031)*x1215*x1216))+(((-0.999999680000154)*x1213*x1214))+((pp*x1223*x1246))+((pp*x1223*x1244))+(((-0.00807999741440124)*x1255))+(((1.99999936000031)*npx*sj5*x1211))+((x1249*x1251))+((x1249*x1254))+(((-0.00743999761920114)*x1208))+(((-1.0)*py*x1223*x1240))+(((-1.0)*x1230*x1255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign(((-0.0199999936000031)+(((-0.185999940480029)*cj2*sj3))+(((-0.201999935360031)*sj3))+(((-0.185999940480029)*cj3*sj2)))),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((((-0.0199999872000082)*cj2*cj5*r21*sj3))+(((0.000148799904768061)*r10*sj0*sj5))+(((-0.125999899360064)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj2*cj5*r20*sj3))+(((1.27999918080052e-8)*cj2*cj5*r10*sj0*sj3))+(((1.59999897600066e-5)*cj3*cj5*r11*sj0*sj2))+(((0.000148799904768061)*cj0*cj5*r01))+(((0.000148799904768061)*r21*sj5))+(((-1.27999918080052e-8)*cj0*cj2*r01*sj3*sj5))+(((-1.19039923814449e-7)*r11*sj0*sj5))+(((-1.27999918080052e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000100799919488052)*cj2*cj3*cj5*r11*sj0))+(((1.59999897600066e-5)*cj3*r21*sj2*sj5))+(((-1.29279917260853e-7)*cj0*cj2*r01*sj5))+(((1.59999897600066e-5)*cj3*r10*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*cj3*r01*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj2*cj5*r01*sj3))+(((0.000148799904768061)*cj5*r11*sj0))+(((1.29279917260853e-7)*cj0*cj2*cj5*r00))+(((1.59999897600066e-5)*cj0*cj3*r00*sj2*sj5))+(((-0.99999936000041)*cj2*cj3*pz))+(((1.27999918080052e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj5*r20*sj2*sj3))+(((-0.185999880960076)*cj5*r21))+(((1.59999897600066e-5)*cj0*cj3*cj5*r01*sj2))+(((0.000799999488000328)*cj0*cj2*cj3*px))+(((-0.000799999488000328)*cj0*px*sj2*sj3))+(((1.59999897600066e-5)*cj0*cj2*r00*sj3*sj5))+(((0.000161599896576066)*cj2*r21*sj5))+(((0.000100799919488052)*cj2*cj3*r21*sj5))+(((1.59999897600066e-5)*cj2*r21*sj3*sj5))+(((0.000799999488000328)*cj2*cj3*py*sj0))+(((1.59999897600066e-5)*cj2*cj5*r11*sj0*sj3))+(((0.000148799904768061)*cj0*r00*sj5))+(((-0.0199999872000082)*cj3*r20*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj2*cj3*r01*sj5))+(((-0.000100799919488052)*cj5*r11*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj3*r11*sj0*sj2*sj5))+(((-0.201999870720083)*cj2*r20*sj5))+(((8.06399355904412e-8)*r11*sj0*sj2*sj3*sj5))+(((8.06399355904412e-8)*cj0*r01*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*cj5*r11*sj0))+(((-0.0199999872000082)*cj3*cj5*r21*sj2))+(((-1.29279917260853e-7)*cj2*r11*sj0*sj5))+(((1.19039923814449e-7)*cj5*r10*sj0))+(((0.125999899360064)*r20*sj2*sj3*sj5))+(((0.000161599896576066)*cj2*r10*sj0*sj5))+(((-0.000100799919488052)*cj2*cj3*cj5*r20))+(((0.99999936000041)*pz*sj2*sj3))+(((-1.19039923814449e-7)*cj0*r01*sj5))+(((0.000161599896576066)*cj0*cj2*cj5*r01))+(((-8.06399355904412e-8)*cj2*cj3*r11*sj0*sj5))+(((1.59999897600066e-5)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj3*r20*sj5))+(((-0.000100799919488052)*r21*sj2*sj3*sj5))+(((-0.000100799919488052)*cj0*cj5*r01*sj2*sj3))+(((-8.06399355904412e-8)*cj0*cj5*r00*sj2*sj3))+(((0.125999899360064)*cj5*r21*sj2*sj3))+(((-0.000148799904768061)*cj5*r20))+(((-0.000100799919488052)*cj0*r00*sj2*sj3*sj5))+(((-0.000100799919488052)*r10*sj0*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj2*cj5*r10*sj0))+(((-0.0199999872000082)*cj2*r20*sj3*sj5))+(((-0.201999870720083)*cj2*cj5*r21))+(((0.000161599896576066)*cj0*cj2*r00*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj5*r00*sj3))+(((-1.59999897600066e-5)*cj3*cj5*r20*sj2))+(((0.000100799919488052)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj3*r10*sj0*sj5))+(((-0.000799999488000328)*py*sj0*sj2*sj3))+(((8.06399355904412e-8)*cj0*cj2*cj3*cj5*r00))+(((1.19039923814449e-7)*cj0*cj5*r00))+(((8.06399355904412e-8)*cj2*cj3*cj5*r10*sj0))+(((1.27999918080052e-8)*cj3*cj5*r10*sj0*sj2))+(((-0.000161599896576066)*cj2*cj5*r20))+(((0.000100799919488052)*cj0*cj2*cj3*cj5*r01))+(((-0.185999880960076)*r20*sj5))+(((-8.06399355904412e-8)*cj5*r10*sj0*sj2*sj3)))),IkReal(((((0.000100799919488052)*cj2*r10*sj0*sj3*sj5))+(((-0.125999899360064)*cj2*cj5*r21*sj3))+(((0.000799999488000328)*cj3*py*sj0*sj2))+(((0.000799999488000328)*cj0*cj3*px*sj2))+(((-0.125999899360064)*cj3*r20*sj2*sj5))+(((1.59999897600066e-5)*cj0*cj5*r01*sj2*sj3))+(((-1.59999897600066e-5)*cj5*r20*sj2*sj3))+(((-1.27999918080052e-8)*cj0*cj2*cj3*cj5*r00))+(((0.000799999488000328)*cj0*cj2*px*sj3))+(((0.000161599896576066)*r21*sj2*sj5))+(((-0.125999899360064)*cj3*cj5*r21*sj2))+(((1.27999918080052e-8)*cj2*cj3*r11*sj0*sj5))+(((-8.06399355904412e-8)*cj3*r11*sj0*sj2*sj5))+(((0.000161599896576066)*cj5*r11*sj0*sj2))+(((0.000100799919488052)*cj2*r21*sj3*sj5))+(((1.27999918080052e-8)*cj5*r10*sj0*sj2*sj3))+(((-1.27999918080052e-8)*cj2*cj3*cj5*r10*sj0))+(((-0.000161599896576066)*cj5*r20*sj2))+(((0.000100799919488052)*cj3*cj5*r11*sj0*sj2))+(((-8.06399355904412e-8)*cj0*cj2*r01*sj3*sj5))+(((-0.0199999872000082)*r20*sj2*sj3*sj5))+(((-1.59999897600066e-5)*cj0*cj2*cj3*r00*sj5))+(((0.000100799919488052)*cj2*cj5*r11*sj0*sj3))+(((-0.201999870720083)*cj5*r21*sj2))+(((1.27999918080052e-8)*cj0*cj5*r00*sj2*sj3))+(((-0.125999899360064)*cj2*r20*sj3*sj5))+(((-8.06399355904412e-8)*cj2*r11*sj0*sj3*sj5))+(((0.000161599896576066)*r10*sj0*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r21*sj5))+(((-1.27999918080052e-8)*r11*sj0*sj2*sj3*sj5))+(((-0.000100799919488052)*cj3*cj5*r20*sj2))+(((0.000799999488000328)*cj2*py*sj0*sj3))+(((-0.201999870720083)*r20*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*r10*sj0*sj5))+(((1.59999897600066e-5)*cj0*r00*sj2*sj3*sj5))+(((-0.99999936000041)*cj2*pz*sj3))+(((1.59999897600066e-5)*cj2*cj3*cj5*r20))+(((0.0199999872000082)*cj2*cj3*r20*sj5))+(((-1.29279917260853e-7)*cj0*r01*sj2*sj5))+(((0.0199999872000082)*cj2*cj3*cj5*r21))+(((-1.59999897600066e-5)*cj0*cj2*cj3*cj5*r01))+(((0.000100799919488052)*cj3*r10*sj0*sj2*sj5))+(((-1.29279917260853e-7)*r11*sj0*sj2*sj5))+(((-1.27999918080052e-8)*cj0*r01*sj2*sj3*sj5))+(((1.59999897600066e-5)*cj5*r11*sj0*sj2*sj3))+(((-0.99999936000041)*cj3*pz*sj2))+(((8.06399355904412e-8)*cj0*cj2*cj5*r00*sj3))+(((0.000161599896576066)*cj0*cj5*r01*sj2))+(((0.000161599896576066)*cj0*r00*sj2*sj5))+(((1.59999897600066e-5)*r10*sj0*sj2*sj3*sj5))+(((1.27999918080052e-8)*cj0*cj2*cj3*r01*sj5))+(((0.000100799919488052)*cj0*cj3*r00*sj2*sj5))+(((-8.06399355904412e-8)*cj0*cj3*r01*sj2*sj5))+(((-1.59999897600066e-5)*cj2*cj3*cj5*r11*sj0))+(((0.000100799919488052)*cj3*r21*sj2*sj5))+(((8.06399355904412e-8)*cj2*cj5*r10*sj0*sj3))+(((-0.0199999872000082)*cj5*r21*sj2*sj3))+(((0.000100799919488052)*cj0*cj2*cj5*r01*sj3))+(((8.06399355904412e-8)*cj3*cj5*r10*sj0*sj2))+(((1.29279917260853e-7)*cj0*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj2*r00*sj3*sj5))+(((1.59999897600066e-5)*r21*sj2*sj3*sj5))+(((1.29279917260853e-7)*cj5*r10*sj0*sj2))+(((-0.000100799919488052)*cj2*cj5*r20*sj3))+(((8.06399355904412e-8)*cj0*cj3*cj5*r00*sj2))+(((0.000100799919488052)*cj0*cj3*cj5*r01*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1262=IKcos(j1);
IkReal x1263=IKsin(j1);
IkReal x1264=((0.12599998)*sj3);
IkReal x1265=(px*sj0);
IkReal x1266=(sj0*sj5);
IkReal x1267=(pp*r01);
IkReal x1268=(cj5*sj0);
IkReal x1269=(npx*py);
IkReal x1270=(cj0*sj5);
IkReal x1271=((6.39999590400262e-7)*r11);
IkReal x1272=((0.000799999744000123)*r00);
IkReal x1273=((1.59999948800025e-5)*cj3);
IkReal x1274=((4.90699682976127e-5)*sj3);
IkReal x1275=((6.39999590400262e-7)*r10);
IkReal x1276=((0.0216839957738963)*cj3);
IkReal x1277=(cj0*cj5);
IkReal x1278=((0.00159999897600066)*npy);
IkReal x1279=((0.000799999488000328)*pp);
IkReal x1280=((0.999999680000154)*sj3);
IkReal x1281=(pz*sj5);
IkReal x1282=(cj5*pz);
IkReal x1283=((0.999999680000154)*r10);
IkReal x1284=((0.0050399992425605)*cj3);
IkReal x1285=((0.999999680000154)*cj3);
IkReal x1286=((0.0908759736324669)*cj3);
IkReal x1287=((0.02)*sj3);
IkReal x1288=((1.27999918080052e-6)*px);
IkReal x1289=((1.59999948800025e-5)*sj3);
IkReal x1290=((0.999999680000154)*r00);
IkReal x1291=((0.00159999897600066)*npx);
IkReal x1292=((0.12599998)*cj3);
IkReal x1293=((0.0092679997470144)*sj3);
IkReal x1294=((1.99999936000031)*npy);
IkReal x1295=((0.99999936000041)*cj5);
IkReal x1296=((0.00159999948800025)*npy);
IkReal x1297=((0.02)*cj3);
IkReal x1298=((0.999999680000154)*r11);
IkReal x1299=((6.39999590400262e-7)*r00);
IkReal x1300=((0.000799999744000123)*r10);
IkReal x1301=((0.000799999488000328)*cj5);
IkReal x1302=((4.90699682976127e-5)*cj3);
IkReal x1303=((0.0050399992425605)*sj3);
IkReal x1304=((0.000799999488000328)*sj5);
IkReal x1305=(cj2*x1263);
IkReal x1306=(sj2*x1263);
IkReal x1307=((0.0751439759539315)*x1263);
IkReal x1308=(sj2*x1262);
IkReal x1309=(cj2*x1262);
IkReal x1310=((0.0751439759539315)*x1262);
IkReal x1311=((0.99999936000041)*r20*sj5);
IkReal x1312=((0.000799999744000123)*r11*x1270);
IkReal x1313=(sj3*x1309);
evalcond[0]=((((-0.202)*x1308))+(((-0.202)*x1305))+x1265+((x1264*x1306))+(((-1.0)*x1287*x1305))+(((-1.0)*x1287*x1308))+(((-1.0)*x1297*x1306))+(((-1.0)*x1292*x1305))+(((-1.0)*x1292*x1308))+((x1297*x1309))+(((-0.186)*x1263))+(((-1.0)*cj0*py))+(((-1.0)*x1264*x1309)));
evalcond[1]=((((-0.202)*x1309))+((x1264*x1308))+((x1264*x1305))+((x1292*x1306))+(((-1.0)*x1287*x1309))+(((-0.000799999744000123)*py*sj0))+(((-1.0)*x1297*x1308))+(((-1.0)*x1297*x1305))+((x1287*x1306))+(((-1.0)*x1292*x1309))+(((-0.186)*x1262))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+(((0.202)*x1306)));
evalcond[2]=((((0.000799999488000328)*r01*x1277))+(((-6.39999590400262e-7)*r01*x1270))+((x1285*x1306))+(((-1.0)*x1266*x1271))+(((-1.0)*r21*x1295))+(((-1.0)*x1311))+((r21*x1304))+(((-1.0)*r20*x1301))+(((0.000799999488000328)*r10*x1266))+((x1280*x1308))+((x1280*x1305))+((x1268*x1275))+(((0.000799999488000328)*r11*x1268))+(((0.000799999488000328)*r00*x1270))+((x1277*x1299))+(((-1.0)*x1285*x1309)));
evalcond[3]=((((0.000799999744000123)*r01*x1266))+((x1270*x1283))+(((-1.0)*x1268*x1272))+((x1277*x1300))+(((-1.0)*x1312))+((x1280*x1306))+(((-1.0)*x1266*x1290))+(((-0.999999680000154)*r01*x1268))+(((-1.0)*x1280*x1309))+((x1277*x1298))+(((-1.0)*x1285*x1308))+(((-1.0)*x1285*x1305)));
evalcond[4]=((((-1.0)*x1274*x1306))+(((-6.39999590400262e-7)*rxp1_0*x1270))+(((-6.39999590400262e-7)*rxp1_1*x1266))+(((0.000799999488000328)*rxp0_0*x1270))+(((0.000799999488000328)*rxp0_1*x1266))+((x1289*x1305))+((x1289*x1308))+(((6.39999590400262e-7)*rxp0_0*x1277))+(((0.000799999488000328)*rxp1_0*x1277))+(((0.000799999488000328)*rxp1_1*x1268))+((x1302*x1308))+((x1302*x1305))+(((-1.0)*rxp0_2*x1301))+(((-1.0)*rxp1_2*x1295))+(((6.39999590400262e-7)*rxp0_1*x1268))+(((0.000148799952384023)*x1263))+((rxp1_2*x1304))+((x1274*x1309))+((x1273*x1306))+(((-0.99999936000041)*rxp0_2*sj5))+(((-1.0)*x1273*x1309))+(((0.000161599948288025)*x1305))+(((0.000161599948288025)*x1308)));
evalcond[5]=((((-0.000161599948288025)*x1309))+(((0.999999680000154)*rxp1_1*x1277))+(((-0.000799999744000123)*rxp1_1*x1270))+(((-0.000799999744000123)*rxp0_0*x1268))+(((-0.999999680000154)*rxp1_0*x1268))+((x1289*x1306))+(((0.000799999744000123)*rxp1_0*x1266))+(((-0.999999680000154)*rxp0_0*x1266))+((x1302*x1306))+(((-0.000148799952384023)*x1262))+(((0.000799999744000123)*rxp0_1*x1277))+(((0.999999680000154)*rxp0_1*x1270))+((x1274*x1305))+((x1274*x1308))+(((-1.0)*x1302*x1309))+(((-1.0)*x1273*x1305))+(((-1.0)*x1273*x1308))+(((-1.0)*x1289*x1309))+(((0.000161599948288025)*x1306)));
evalcond[6]=((((-1.0)*cj5*r20*x1279))+(((1.27999918080052e-6)*npy*py*x1266))+(((-1.0)*py*x1268*x1278))+(((-0.00159999897600066)*x1266*x1269))+(((0.000799999488000328)*x1267*x1277))+((r21*sj5*x1279))+(((-1.0)*px*x1270*x1291))+((r00*x1270*x1279))+(((-1.0)*x1276*x1306))+((pp*x1268*x1275))+(((0.0509039923498611)*x1309))+((sj3*x1307))+((x1282*x1291))+(((-6.39999590400262e-7)*x1267*x1270))+((r11*x1268*x1279))+(((-1.0)*npx*x1277*x1288))+(((-1.27999918080052e-6)*x1268*x1269))+((cj3*x1310))+((x1286*x1309))+(((-1.0)*x1303*x1306))+((npy*x1270*x1288))+((x1303*x1309))+(((1.99999872000082)*npy*x1282))+(((0.00807999741440124)*x1305))+(((0.00807999741440124)*x1308))+(((-1.0)*x1278*x1281))+(((1.99999872000082)*npx*x1281))+(((-1.0)*pp*x1311))+(((-1.0)*pp*r21*x1295))+((pp*x1277*x1299))+(((-1.0)*pp*x1266*x1271))+((r10*x1266*x1279))+(((0.0468719929558127)*x1262))+(((-1.0)*x1293*x1308))+(((-1.0)*px*x1277*x1278))+(((0.00743999761920114)*x1263))+(((-0.0509039923498611)*x1306))+((x1284*x1305))+((x1284*x1308))+(((0.0599239781115562)*sj3*x1305)));
evalcond[7]=((((-0.999999680000154)*x1267*x1268))+(((0.00159999948800025)*cj5*npx*x1265))+(((-0.0599239781115562)*x1313))+(((-1.0)*x1284*x1309))+((x1276*x1308))+(((0.0509039923498611)*x1305))+(((0.0509039923498611)*x1308))+(((-1.0)*py*x1277*x1294))+(((0.000799999744000123)*x1266*x1267))+((py*x1270*x1296))+((pp*x1277*x1300))+(((-0.00159999948800025)*x1269*x1277))+((x1286*x1305))+(((-0.00743999761920114)*x1262))+((x1303*x1308))+((x1303*x1305))+(((-1.0)*sj3*x1310))+(((-1.99999936000031)*x1269*x1270))+(((0.00807999741440124)*x1306))+(((-0.00807999741440124)*x1309))+(((1.99999936000031)*npx*sj5*x1265))+(((-1.0)*pp*x1312))+((pp*x1277*x1298))+((cj3*x1307))+((cj5*x1265*x1294))+(((0.0468719929558127)*x1263))+(((-1.0)*x1293*x1306))+((pp*x1270*x1283))+(((-1.0)*sj5*x1265*x1296))+(((-1.0)*pp*x1268*x1272))+((x1284*x1306))+(((-1.0)*pp*x1266*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1314=((0.02)*cj3);
IkReal x1315=((1.59999948800025e-5)*sj3);
IkReal x1316=((0.12599998)*sj3);
IkReal x1317=(px*sj0);
IkReal x1318=(cj0*py);
IkReal x1319=((0.02)*sj3);
IkReal x1320=((0.000100799951744021)*cj3);
IkReal x1321=((0.000100799951744021)*sj3);
IkReal x1322=((1.59999948800025e-5)*cj3);
IkReal x1323=(py*sj0);
IkReal x1324=(cj0*px);
IkReal x1325=(sj2*sj3);
IkReal x1326=(cj2*cj3);
IkReal x1327=((0.12599998)*cj3);
IkReal x1328=((0.201999935360031)*pz);
IkReal x1329=((0.125999939680026)*pz);
IkReal x1330=(cj3*sj2);
IkReal x1331=((0.000161599948288025)*sj2);
IkReal x1332=((0.0199999936000031)*pz);
IkReal x1333=((0.202)*cj2);
IkReal x1334=(cj2*sj3);
IkReal x1335=(sj2*x1317);
IkReal x1336=(cj2*x1324);
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign(((-0.0916759949600004)+(((-0.075144)*cj2))+(((-0.00744)*x1330))+(((-0.00744)*x1334))+(((-0.00808)*sj3))+(((-0.05090399192)*cj3))+(((0.04687199256)*x1325))+(((-0.04687199256)*x1326)))),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(((((-1.0)*x1326*x1332))+((x1316*x1335))+((sj2*x1328))+((x1329*x1330))+((x1329*x1334))+((cj2*x1322*x1323))+(((0.186)*x1318))+(((-1.0)*sj2*x1316*x1318))+((x1318*x1333))+(((-1.0)*sj2*x1320*x1324))+(((-1.0)*sj2*x1320*x1323))+((cj2*x1318*x1319))+(((-1.0)*x1324*x1331))+(((0.12599998)*x1318*x1326))+(((-0.12599998)*x1317*x1326))+(((-1.0)*x1323*x1331))+(((-1.0)*cj2*x1321*x1323))+(((-1.0)*sj2*x1315*x1324))+(((-1.0)*sj2*x1315*x1323))+((x1325*x1332))+(((-0.186)*x1317))+((sj2*x1314*x1318))+(((-1.0)*x1314*x1335))+(((-1.0)*cj2*x1317*x1319))+((x1322*x1336))+(((-1.0)*x1321*x1336))+(((-1.0)*x1317*x1333)))),IkReal(((((-1.0)*x1327*x1335))+((x1315*x1336))+(((-1.0)*x1319*x1335))+((sj2*x1322*x1324))+((sj2*x1322*x1323))+(((-0.185999940480029)*pz))+(((-1.0)*sj2*x1321*x1323))+(((-1.0)*sj2*x1321*x1324))+((cj2*x1314*x1317))+(((0.202)*sj2*x1318))+(((-1.0)*x1326*x1329))+((cj2*x1316*x1318))+(((-1.0)*x1330*x1332))+((cj2*x1315*x1323))+(((-1.0)*cj2*x1316*x1317))+(((-1.0)*cj2*x1314*x1318))+((x1325*x1329))+(((-1.0)*x1332*x1334))+(((0.000161599948288025)*x1336))+(((0.000148799952384023)*x1324))+(((0.000148799952384023)*x1323))+(((0.000161599948288025)*cj2*x1323))+(((-0.202)*x1335))+((cj2*x1320*x1323))+((sj2*x1318*x1327))+((sj2*x1318*x1319))+((x1320*x1336))+(((-1.0)*cj2*x1328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1339=IKcos(j1);
IkReal x1340=IKsin(j1);
IkReal x1341=((0.12599998)*sj3);
IkReal x1342=(px*sj0);
IkReal x1343=(sj0*sj5);
IkReal x1344=(pp*r01);
IkReal x1345=(cj5*sj0);
IkReal x1346=(npx*py);
IkReal x1347=(cj0*sj5);
IkReal x1348=((6.39999590400262e-7)*r11);
IkReal x1349=((0.000799999744000123)*r00);
IkReal x1350=((1.59999948800025e-5)*cj3);
IkReal x1351=((4.90699682976127e-5)*sj3);
IkReal x1352=((6.39999590400262e-7)*r10);
IkReal x1353=((0.0216839957738963)*cj3);
IkReal x1354=(cj0*cj5);
IkReal x1355=((0.00159999897600066)*npy);
IkReal x1356=((0.000799999488000328)*pp);
IkReal x1357=((0.999999680000154)*sj3);
IkReal x1358=(pz*sj5);
IkReal x1359=(cj5*pz);
IkReal x1360=((0.999999680000154)*r10);
IkReal x1361=((0.0050399992425605)*cj3);
IkReal x1362=((0.999999680000154)*cj3);
IkReal x1363=((0.0908759736324669)*cj3);
IkReal x1364=((0.02)*sj3);
IkReal x1365=((1.27999918080052e-6)*px);
IkReal x1366=((1.59999948800025e-5)*sj3);
IkReal x1367=((0.999999680000154)*r00);
IkReal x1368=((0.00159999897600066)*npx);
IkReal x1369=((0.12599998)*cj3);
IkReal x1370=((0.0092679997470144)*sj3);
IkReal x1371=((1.99999936000031)*npy);
IkReal x1372=((0.99999936000041)*cj5);
IkReal x1373=((0.00159999948800025)*npy);
IkReal x1374=((0.02)*cj3);
IkReal x1375=((0.999999680000154)*r11);
IkReal x1376=((6.39999590400262e-7)*r00);
IkReal x1377=((0.000799999744000123)*r10);
IkReal x1378=((0.000799999488000328)*cj5);
IkReal x1379=((4.90699682976127e-5)*cj3);
IkReal x1380=((0.0050399992425605)*sj3);
IkReal x1381=((0.000799999488000328)*sj5);
IkReal x1382=(cj2*x1340);
IkReal x1383=(sj2*x1340);
IkReal x1384=((0.0751439759539315)*x1340);
IkReal x1385=(sj2*x1339);
IkReal x1386=(cj2*x1339);
IkReal x1387=((0.0751439759539315)*x1339);
IkReal x1388=((0.99999936000041)*r20*sj5);
IkReal x1389=((0.000799999744000123)*r11*x1347);
IkReal x1390=(sj3*x1386);
evalcond[0]=(x1342+(((-1.0)*x1364*x1385))+(((-1.0)*x1364*x1382))+(((-1.0)*x1341*x1386))+(((-1.0)*x1374*x1383))+((x1341*x1383))+(((-0.202)*x1385))+(((-0.202)*x1382))+(((-0.186)*x1340))+(((-1.0)*x1369*x1382))+(((-1.0)*x1369*x1385))+((x1374*x1386))+(((-1.0)*cj0*py)));
evalcond[1]=((((-1.0)*x1364*x1386))+((x1364*x1383))+(((-0.000799999744000123)*py*sj0))+(((-0.186)*x1339))+(((-1.0)*x1374*x1385))+(((-1.0)*x1374*x1382))+(((0.202)*x1383))+((x1341*x1385))+((x1341*x1382))+(((-0.202)*x1386))+(((-1.0)*x1369*x1386))+(((0.999999680000154)*pz))+(((-0.000799999744000123)*cj0*px))+((x1369*x1383)));
evalcond[2]=(((x1362*x1383))+(((-1.0)*x1388))+(((0.000799999488000328)*r11*x1345))+((x1345*x1352))+((x1357*x1382))+((x1357*x1385))+((r21*x1381))+(((-1.0)*r20*x1378))+(((-1.0)*r21*x1372))+((x1354*x1376))+(((0.000799999488000328)*r00*x1347))+(((0.000799999488000328)*r01*x1354))+(((-6.39999590400262e-7)*r01*x1347))+(((0.000799999488000328)*r10*x1343))+(((-1.0)*x1343*x1348))+(((-1.0)*x1362*x1386)));
evalcond[3]=((((-1.0)*x1389))+((x1357*x1383))+(((0.000799999744000123)*r01*x1343))+(((-0.999999680000154)*r01*x1345))+((x1347*x1360))+((x1354*x1375))+((x1354*x1377))+(((-1.0)*x1343*x1367))+(((-1.0)*x1362*x1382))+(((-1.0)*x1362*x1385))+(((-1.0)*x1357*x1386))+(((-1.0)*x1345*x1349)));
evalcond[4]=(((x1366*x1382))+((x1366*x1385))+(((-1.0)*x1350*x1386))+(((6.39999590400262e-7)*rxp0_1*x1345))+(((0.000799999488000328)*rxp0_1*x1343))+(((-6.39999590400262e-7)*rxp1_1*x1343))+((rxp1_2*x1381))+(((-6.39999590400262e-7)*rxp1_0*x1347))+(((0.000161599948288025)*x1382))+(((0.000161599948288025)*x1385))+((x1350*x1383))+(((0.000148799952384023)*x1340))+((x1351*x1386))+(((-1.0)*rxp0_2*x1378))+(((6.39999590400262e-7)*rxp0_0*x1354))+((x1379*x1382))+((x1379*x1385))+(((-1.0)*x1351*x1383))+(((0.000799999488000328)*rxp1_1*x1345))+(((0.000799999488000328)*rxp1_0*x1354))+(((-0.99999936000041)*rxp0_2*sj5))+(((0.000799999488000328)*rxp0_0*x1347))+(((-1.0)*rxp1_2*x1372)));
evalcond[5]=(((x1366*x1383))+(((-1.0)*x1350*x1385))+(((-1.0)*x1350*x1382))+(((-0.999999680000154)*rxp1_0*x1345))+(((0.000799999744000123)*rxp1_0*x1343))+(((0.000161599948288025)*x1383))+(((-0.000161599948288025)*x1386))+(((-1.0)*x1366*x1386))+(((0.999999680000154)*rxp1_1*x1354))+(((-0.000799999744000123)*rxp0_0*x1345))+(((-0.000148799952384023)*x1339))+((x1351*x1385))+((x1351*x1382))+((x1379*x1383))+(((0.999999680000154)*rxp0_1*x1347))+(((-0.999999680000154)*rxp0_0*x1343))+(((-0.000799999744000123)*rxp1_1*x1347))+(((-1.0)*x1379*x1386))+(((0.000799999744000123)*rxp0_1*x1354)));
evalcond[6]=((((-1.0)*pp*x1343*x1348))+(((-1.0)*px*x1347*x1368))+((x1380*x1386))+((r10*x1343*x1356))+((cj3*x1387))+((pp*x1345*x1352))+(((-1.0)*npx*x1354*x1365))+(((0.000799999488000328)*x1344*x1354))+((x1359*x1368))+((r00*x1347*x1356))+(((-1.27999918080052e-6)*x1345*x1346))+(((-1.0)*x1355*x1358))+(((1.99999872000082)*npx*x1358))+((npy*x1347*x1365))+((x1361*x1385))+((x1361*x1382))+(((1.99999872000082)*npy*x1359))+(((-0.0509039923498611)*x1383))+(((0.0599239781115562)*sj3*x1382))+((sj3*x1384))+(((-6.39999590400262e-7)*x1344*x1347))+(((-1.0)*x1380*x1383))+(((0.0468719929558127)*x1339))+(((-1.0)*x1370*x1385))+((r21*sj5*x1356))+(((0.00743999761920114)*x1340))+(((-1.0)*px*x1354*x1355))+((x1363*x1386))+(((-1.0)*cj5*r20*x1356))+(((-1.0)*pp*r21*x1372))+(((-1.0)*py*x1345*x1355))+(((1.27999918080052e-6)*npy*py*x1343))+((pp*x1354*x1376))+(((-1.0)*x1353*x1383))+((r11*x1345*x1356))+(((-1.0)*pp*x1388))+(((0.0509039923498611)*x1386))+(((-0.00159999897600066)*x1343*x1346))+(((0.00807999741440124)*x1385))+(((0.00807999741440124)*x1382)));
evalcond[7]=(((x1380*x1385))+((x1380*x1382))+(((-1.0)*pp*x1345*x1349))+(((0.000799999744000123)*x1343*x1344))+(((-0.00807999741440124)*x1386))+(((0.0468719929558127)*x1340))+(((0.00159999948800025)*cj5*npx*x1342))+((cj3*x1384))+(((-0.00159999948800025)*x1346*x1354))+(((-1.0)*pp*x1343*x1367))+((pp*x1347*x1360))+((py*x1347*x1373))+((cj5*x1342*x1371))+(((-0.00743999761920114)*x1339))+((x1361*x1383))+(((-1.0)*x1370*x1383))+(((1.99999936000031)*npx*sj5*x1342))+(((-0.0599239781115562)*x1390))+((x1353*x1385))+(((-0.999999680000154)*x1344*x1345))+((x1363*x1382))+(((-1.0)*py*x1354*x1371))+(((-1.0)*sj5*x1342*x1373))+(((-1.0)*sj3*x1387))+((pp*x1354*x1375))+((pp*x1354*x1377))+(((-1.0)*pp*x1389))+(((0.0509039923498611)*x1385))+(((0.0509039923498611)*x1382))+(((-1.0)*x1361*x1386))+(((-1.99999936000031)*x1346*x1347))+(((0.00807999741440124)*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (9dd7e07c2ca0dcf39ffa1ec29dd0e3d1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
