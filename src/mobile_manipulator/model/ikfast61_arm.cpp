/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-01-24 15:26:58.959725
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.1948)*x2);
x11=((0.00158999799016431)*x8);
x12=((0.999998735952397)*x9);
x13=((0.015)*x2);
x14=((0.1948)*x3);
x15=((0.077)*x2);
x16=((1.0)*x3);
x17=((0.00158999799016431)*x9);
x18=((1.0)*x2);
x19=((0.077)*x3);
x20=((0.999998735952397)*x8);
x21=((0.015)*x3);
x22=(x0*x1);
x23=(x1*x3);
x24=(x1*x7);
x25=(x0*x4);
x26=(x4*x7);
x27=(x3*x4);
x28=(x21*x4);
x29=((((-1.0)*x1*x16))+((x2*x4)));
x30=(((x1*x2))+x27);
x31=(x29*x5);
x32=(x30*x6);
x33=(((x6*((((x23*x7))+(((-1.0)*x18*x26))))))+((x5*((((x2*x24))+((x26*x3)))))));
IkReal x35=((1.0)*x16);
x34=(((x5*(((((-1.0)*x18*x22))+(((-1.0)*x25*x35))))))+((x6*(((((-1.0)*x22*x35))+((x2*x25)))))));
eetrans[0]=(((x5*(((((-1.0)*x21*x22))+((x13*x25))))))+((x6*(((((-1.0)*x15*x25))+((x19*x22))))))+((x14*x25))+((x5*((((x19*x25))+((x15*x22))))))+((x6*((((x21*x25))+((x13*x22))))))+((x10*x22))+(((0.1827)*x25)));
IkReal x36=((1.0)*x26);
IkReal x37=((1.0)*x24);
eetrans[1]=(((x5*(((((-1.0)*x19*x36))+(((-1.0)*x15*x37))))))+(((-1.0)*x10*x37))+((x6*(((((-1.0)*x19*x37))+((x15*x26))))))+((x5*((((x21*x24))+(((-1.0)*x13*x36))))))+(((-0.1827)*x26))+((x6*(((((-1.0)*x21*x36))+(((-1.0)*x13*x37))))))+(((-1.0)*x14*x36)));
IkReal x38=((1.0)*x4);
eetrans[2]=((0.0636)+((x6*(((((-1.0)*x1*x15))+(((-1.0)*x19*x38))))))+((x1*x14))+((x5*((((x1*x19))+(((-1.0)*x15*x38))))))+(((-1.0)*x10*x38))+((x5*((((x1*x13))+x28))))+(((0.1827)*x1))+((x6*((((x1*x21))+(((-1.0)*x13*x38)))))));
eerot[0]=(((x20*x34))+(((-1.0)*x12*x7))+((x17*x34))+((x11*x7)));
eerot[1]=(((x20*x33))+((x0*x11))+(((-1.0)*x0*x12))+((x17*x33)));
eerot[2]=(((x8*(((((0.999998735952397)*x32))+(((0.999998735952397)*x31))))))+((x9*(((((0.00158999799016431)*x31))+(((0.00158999799016431)*x32)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.0636)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x40.valid){
continue;
}
IkReal x39=x40.value;
j0array[0]=((-1.0)*x39);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x39)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( ((((r01*sj0))+((cj0*r00)))) < -1-IKFAST_SINCOS_THRESH || ((((r01*sj0))+((cj0*r00)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x41=IKasin((((r01*sj0))+((cj0*r00))));
j4array[0]=((0.00158999866010903)+(((-1.0)*x41)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.1431826522499)+x41);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x42=py*py;
IkReal x43=pz*pz;
IkReal x44=px*px;
IkReal x45=((0.262849982612935)*r02);
IkReal x46=((0.0505865225869353)*r02);
IkReal x47=((0.00285046642833929)*r02);
IkReal x48=((0.0114598943321417)*r02);
IkReal x49=(r00*sj0);
IkReal x50=((2.0)*r02);
IkReal x51=(px*r00);
IkReal x52=(py*r01);
IkReal x53=((0.702311212219695)*pz);
IkReal x54=((4.0)*pz);
IkReal x55=(cj0*r01);
IkReal x56=((0.146242443938902)*pz);
IkReal x57=((0.759288787780306)*pz);
IkReal x58=(pz*r02);
IkReal x59=(px*sj0);
IkReal x60=((8.0)*pz);
IkReal x61=((0.0505865225869353)*x49);
IkReal x62=((1.48151121221969)*x51);
IkReal x63=((1.48151121221969)*x58);
IkReal x64=((1.48151121221969)*x52);
IkReal x65=((0.0505865225869353)*x55);
IkReal x66=((0.0130270173870653)*x55);
IkReal x67=(r02*x56);
IkReal x68=((0.0130270173870653)*x49);
IkReal x69=((0.146242443938902)*x51);
IkReal x70=((0.146242443938902)*x52);
IkReal x71=((0.0026172143321417)*x55);
IkReal x72=((0.0026172143321417)*x49);
IkReal x73=((0.0199112122196945)*x51);
IkReal x74=((0.0199112122196945)*x58);
IkReal x75=((0.00285046642833929)*x49);
IkReal x76=((0.0199112122196945)*x52);
IkReal x77=((0.00285046642833929)*x55);
IkReal x78=((4.0)*x43);
IkReal x79=((2.0)*x43);
IkReal x80=(r02*x59);
IkReal x81=((2.0)*x44);
IkReal x82=((2.0)*x42);
IkReal x83=((8.0)*cj0*py);
IkReal x84=(cj0*py*r02);
IkReal x85=((4.0)*x44);
IkReal x86=((4.0)*x42);
IkReal x87=((0.146242443938902)*x84);
IkReal x88=(x52*x54);
IkReal x89=(x49*x56);
IkReal x90=(x43*x50);
IkReal x91=(x51*x54);
IkReal x92=(x55*x56);
IkReal x93=((0.146242443938902)*x80);
IkReal x94=(x42*x50);
IkReal x95=(x44*x50);
IkReal x96=((0.759288787780306)*x80);
IkReal x97=(x55*x57);
IkReal x98=((0.759288787780306)*x84);
IkReal x99=(x49*x57);
IkReal x100=(x51*x60);
IkReal x101=(x52*x60);
IkReal x102=(r02*x78);
IkReal x103=(r02*x85);
IkReal x104=(r02*x86);
IkReal x105=(x53*x55);
IkReal x106=((0.702311212219695)*x80);
IkReal x107=(x49*x53);
IkReal x108=((0.702311212219695)*x84);
IkReal x109=((4.0)*x52*x59);
IkReal x110=(x54*x80);
IkReal x111=(x49*x81);
IkReal x112=(x55*x79);
IkReal x113=(x55*x81);
IkReal x114=(x54*x84);
IkReal x115=(x55*x82);
IkReal x116=(x49*x82);
IkReal x117=(x49*x79);
IkReal x118=((4.0)*cj0*py*x51);
IkReal x119=(x55*x78);
IkReal x120=(x49*x85);
IkReal x121=((8.0)*x52*x59);
IkReal x122=((8.0)*x58*x59);
IkReal x123=(x55*x85);
IkReal x124=(x49*x86);
IkReal x125=(x51*x83);
IkReal x126=(x49*x78);
IkReal x127=(x58*x83);
IkReal x128=(x55*x86);
IkReal x129=(x71+x47);
IkReal x130=(x93+x92);
IkReal x131=(x108+x107);
IkReal x132=(x99+x98);
IkReal x133=(x97+x96);
IkReal x134=(x104+x103);
IkReal x135=(x105+x106);
IkReal x136=(x70+x67+x69);
IkReal x137=(x65+x95+x94);
IkReal x138=(x100+x101+x102);
IkReal x139=(x75+x48+x95+x94);
IkReal x140=(x77+x88+x91+x90);
IkReal x141=(x76+x74+x73+x89+x87);
IkReal x142=(x45+x61+x88+x91+x90);
IkReal x143=(x62+x63+x64+x89+x87);
IkReal x144=(x126+x127+x124+x125+x128);
IkReal x145=(x113+x112+x111+x110+x109);
IkReal x146=(x122+x123+x120+x121+x119);
IkReal x147=((((0.101173045173871)*x49))+x138+(((-1.0)*x134))+(((-0.0260540347741306)*r02))+(((-0.101173045173871)*x55)));
IkReal x148=((((-0.00570093285667858)*x49))+(((0.00570093285667858)*x55))+(((-0.00523442866428339)*r02))+x138+(((-1.0)*x134)));
IkReal x149=(x117+x116+x115+x114+x118+x72);
IkReal x150=(x117+x116+x115+x114+x118+x46+x68);
IkReal x151=((((-1.0)*x142))+x143+x137+(((-1.0)*x130)));
IkReal x152=(x142+x143+(((-1.0)*x137))+(((-1.0)*x130)));
IkReal x153=(x140+x141+(((-1.0)*x130))+(((-1.0)*x139)));
IkReal x154=((((-1.0)*x140))+x141+x139+(((-1.0)*x130)));
IkReal x155=((((-1.0)*x146))+(((0.101173045173871)*r02))+x144+(((-0.525699965225869)*x49))+(((0.525699965225869)*x55)));
IkReal x156=((((-1.0)*x144))+(((-0.0229197886642834)*x49))+x146+(((0.00570093285667858)*r02))+(((0.0229197886642834)*x55)));
IkReal x157=((((-1.0)*x145))+x150+x133+(((-1.0)*x136))+(((-1.0)*x132))+(((-1.0)*x66)));
IkReal x158=((((-1.0)*x150))+x145+x133+(((-1.0)*x136))+(((-1.0)*x132))+x66);
IkReal x159=((((-1.0)*x145))+(((-1.0)*x129))+x149+x135+x136+(((-1.0)*x131)));
IkReal x160=((((-1.0)*x149))+x145+x135+x136+x129+(((-1.0)*x131)));
IkReal gconst40=x151;
IkReal gconst41=x155;
IkReal gconst42=x152;
IkReal gconst43=x157;
IkReal gconst44=x147;
IkReal gconst45=x158;
IkReal gconst46=x151;
IkReal gconst47=x155;
IkReal gconst48=x152;
IkReal gconst49=x157;
IkReal gconst50=x147;
IkReal gconst51=x158;
IkReal gconst52=x159;
IkReal gconst53=x148;
IkReal gconst54=x160;
IkReal gconst55=x153;
IkReal gconst56=x156;
IkReal gconst57=x154;
IkReal gconst58=x159;
IkReal gconst59=x148;
IkReal gconst60=x160;
IkReal gconst61=x153;
IkReal gconst62=x156;
IkReal gconst63=x154;
IkReal x161=(gconst42*gconst43);
IkReal x162=(gconst45*gconst46);
IkReal x163=((1.0)*gconst52);
IkReal x164=(gconst46*gconst57);
IkReal x165=(gconst41*gconst62);
IkReal x166=(gconst53*gconst57);
IkReal x167=(gconst50*gconst58);
IkReal x168=(gconst54*gconst55);
IkReal x169=((1.0)*gconst59);
IkReal x170=(gconst48*gconst61);
IkReal x171=(gconst40*gconst57);
IkReal x172=(gconst50*gconst53);
IkReal x173=(gconst43*gconst54);
IkReal x174=(gconst46*gconst51);
IkReal x175=(gconst42*gconst47);
IkReal x176=(gconst56*gconst61);
IkReal x177=(gconst41*gconst45);
IkReal x178=(gconst45*gconst53);
IkReal x179=((1.0)*gconst60);
IkReal x180=(gconst42*gconst55);
IkReal x181=(gconst44*gconst49);
IkReal x182=(gconst54*gconst59);
IkReal x183=((1.0)*gconst54);
IkReal x184=(gconst46*gconst62);
IkReal x185=((1.0)*gconst40);
IkReal x186=(gconst41*gconst50);
IkReal x187=(gconst46*gconst63);
IkReal x188=(gconst58*gconst63);
IkReal x189=(gconst58*gconst62);
IkReal x190=(gconst45*gconst52);
IkReal x191=(gconst48*gconst49);
IkReal x192=(gconst51*gconst58);
IkReal x193=(gconst49*gconst60);
IkReal x194=(gconst41*gconst57);
IkReal x195=(gconst42*gconst59);
IkReal x196=(gconst49*gconst56);
IkReal x197=(gconst44*gconst61);
IkReal x198=(gconst46*gconst50);
IkReal x199=(gconst52*gconst57);
IkReal x200=(gconst47*gconst54);
IkReal x201=(gconst40*gconst45);
IkReal x202=(gconst60*gconst61);
IkReal x203=(gconst53*gconst62);
IkReal x204=((1.0)*x191);
IkReal x205=((1.0)*gconst42*gconst56);
IkReal x206=((1.0)*gconst47*gconst61);
IkReal x207=((1.0)*gconst42*gconst44);
IkReal x208=((1.0)*gconst47*gconst49);
op[0]=(((x176*x182))+((x168*x188))+(((-1.0)*gconst61*x166*x169))+((x166*x189))+(((-1.0)*gconst56*x183*x189))+(((-1.0)*gconst61*x168*x179))+(((-1.0)*gconst57*x163*x188))+((x199*x202)));
op[1]=(((x176*x195))+(((-1.0)*gconst63*x163*x164))+((x168*x192))+((x171*x202))+(((-1.0)*x189*x205))+((x180*x188))+((x193*x199))+((x178*x189))+((x168*x187))+(((-1.0)*x171*x188))+((x173*x188))+(((-1.0)*gconst61*x169*x194))+(((-1.0)*x166*x206))+((x190*x202))+(((-1.0)*gconst45*x163*x188))+(((-1.0)*gconst49*x168*x179))+(((-1.0)*gconst61*x179*x180))+(((-1.0)*x168*x170))+((x166*x167))+(((-1.0)*gconst56*x183*x184))+(((-1.0)*gconst61*x169*x178))+(((-1.0)*gconst49*x166*x169))+(((-1.0)*gconst56*x167*x183))+(((-1.0)*gconst57*x163*x192))+((x170*x199))+((gconst57*gconst58*x165))+((x164*x203))+((x176*x200))+(((-1.0)*gconst61*x173*x179))+((x182*x197))+((x182*x196))+(((-1.0)*gconst44*x183*x189)));
op[2]=((((-1.0)*x170*x173))+(((-1.0)*x168*x204))+(((-1.0)*gconst44*x167*x183))+(((-1.0)*gconst61*x161*x179))+(((-1.0)*x184*x205))+(((-1.0)*x170*x180))+(((-1.0)*x189*x207))+(((-1.0)*x171*x192))+((x180*x187))+(((-1.0)*x194*x206))+((x161*x188))+((x196*x200))+((x173*x187))+((x180*x192))+((x168*x174))+((x173*x192))+(((-1.0)*gconst63*x164*x185))+(((-1.0)*x167*x205))+((x201*x202))+(((-1.0)*gconst45*x163*x192))+(((-1.0)*x166*x208))+(((-1.0)*gconst49*x169*x194))+((x167*x194))+((x175*x176))+((x162*x203))+((x167*x178))+((x197*x200))+((x164*x165))+(((-1.0)*x178*x206))+((x195*x196))+((x195*x197))+((gconst45*gconst58*x165))+(((-1.0)*gconst49*x173*x179))+((x164*x172))+(((-1.0)*gconst61*x169*x177))+((x191*x199))+(((-1.0)*gconst49*x169*x178))+(((-1.0)*gconst56*x183*x198))+((x171*x193))+((x170*x171))+(((-1.0)*gconst45*x185*x188))+((x190*x193))+(((-1.0)*gconst51*x163*x164))+((x170*x190))+(((-1.0)*gconst63*x162*x163))+(((-1.0)*gconst49*x179*x180))+(((-1.0)*gconst44*x183*x184))+((x181*x182)));
op[3]=((((-1.0)*gconst44*x183*x198))+(((-1.0)*x180*x204))+(((-1.0)*x173*x204))+(((-1.0)*x184*x207))+(((-1.0)*x194*x208))+((x161*x187))+((x162*x172))+((x161*x192))+(((-1.0)*x167*x207))+((x162*x165))+((x170*x201))+((x174*x180))+((x175*x197))+((x175*x196))+((x173*x174))+((x164*x186))+(((-1.0)*gconst63*x162*x185))+((x167*x177))+(((-1.0)*x178*x208))+(((-1.0)*gconst49*x161*x179))+(((-1.0)*x198*x205))+(((-1.0)*gconst51*x164*x185))+(((-1.0)*gconst45*x185*x192))+(((-1.0)*gconst49*x169*x177))+((x171*x191))+((x190*x191))+(((-1.0)*x161*x170))+(((-1.0)*gconst51*x162*x163))+((x193*x201))+((x181*x200))+((x181*x195))+(((-1.0)*x177*x206)));
op[4]=(((x161*x174))+(((-1.0)*gconst51*x162*x185))+((x162*x186))+((x175*x181))+((x191*x201))+(((-1.0)*x198*x207))+(((-1.0)*x177*x208))+(((-1.0)*x161*x204)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x209 = IKatan2WithCheck(IkReal(((((((((0.00995560610984725)*cj2*pz*r02))+(((-0.0731212219694508)*cj2*px*r02*sj0))+(((0.0731212219694508)*py*r01*sj2))+(((0.00995560610984725)*cj2*py*r01))+(((-0.0731212219694508)*cj0*py*r02))+(((-0.379644393890153)*cj0*pz*r01*sj2))+(((0.0731212219694508)*cj0*cj2*py*r02))+(((-0.00995560610984725)*py*r01))+(((0.0731212219694508)*px*r00*sj2))+(((0.379644393890153)*cj0*py*r02*sj2))+(((-0.00995560610984725)*pz*r02))+(((-0.379644393890153)*px*r02*sj0*sj2))+(((0.00995560610984725)*cj2*px*r00))+(((0.0731212219694508)*pz*r02*sj2))+(((-0.00995560610984725)*px*r00))+(((-0.0731212219694508)*pz*r00*sj0))+(((0.0731212219694508)*cj2*pz*r00*sj0))+(((0.379644393890153)*pz*r00*sj0*sj2))+(((0.0731212219694508)*px*r02*sj0))+(((0.0731212219694508)*cj0*pz*r01))+(((-0.0731212219694508)*cj0*cj2*pz*r01))))*((((r00*sj0*sj2*(pz*pz)))+(((0.00130860716607085)*r00*sj0*sj2))+(((-0.00142523321416965)*r02*sj2))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.0252932612934677)*r00*sj0))+((cj2*r02*(py*py)))+(((0.0252932612934677)*cj0*r01))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.00130860716607085)*cj0*r01*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.131424991306467)*r02))+(((0.0252932612934677)*cj0*cj2*r01))+(((-0.131424991306467)*cj2*r02))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.0252932612934677)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))))+(((((((-0.0731212219694508)*cj0*pz*r01))+(((0.740755606109847)*pz*r02))+(((-0.0731212219694508)*cj2*px*r02*sj0))+(((0.0731212219694508)*py*r01*sj2))+(((0.351155606109847)*px*r02*sj0*sj2))+(((0.740755606109847)*py*r01))+(((-0.0731212219694508)*px*r02*sj0))+(((-0.351155606109847)*cj0*py*r02*sj2))+(((0.0731212219694508)*cj0*cj2*py*r02))+(((0.0731212219694508)*px*r00*sj2))+(((0.351155606109847)*cj0*pz*r01*sj2))+(((0.0731212219694508)*pz*r00*sj0))+(((0.740755606109847)*cj2*py*r01))+(((0.740755606109847)*cj2*px*r00))+(((-0.351155606109847)*pz*r00*sj0*sj2))+(((0.0731212219694508)*pz*r02*sj2))+(((0.740755606109847)*px*r00))+(((0.0731212219694508)*cj0*py*r02))+(((0.740755606109847)*cj2*pz*r02))+(((0.0731212219694508)*cj2*pz*r00*sj0))+(((-0.0731212219694508)*cj0*cj2*pz*r01))))*(((((0.00572994716607085)*cj2*r02))+((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((2.0)*px*pz*r00))+((cj2*r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.00572994716607085)*r02))+(((0.00651350869353266)*r00*sj0*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.00142523321416965)*cj2*r00*sj0))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00142523321416965)*r00*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((0.00142523321416965)*cj0*r01))+(((-0.00142523321416965)*cj0*cj2*r01))+(((0.0252932612934677)*r02*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((-0.00651350869353266)*cj0*r01*sj2))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz))))))))),IkReal(((((((((-0.379644393890153)*pz*r00*sj0*sj2))+(((-0.00995560610984725)*cj2*py*r01))+(((-0.0731212219694508)*cj0*pz*r01))+(((-0.00995560610984725)*cj2*pz*r02))+(((0.00995560610984725)*py*r01))+(((-0.0731212219694508)*cj0*cj2*py*r02))+(((0.00995560610984725)*pz*r02))+(((-0.0731212219694508)*py*r01*sj2))+(((-0.0731212219694508)*px*r02*sj0))+(((0.0731212219694508)*cj0*cj2*pz*r01))+(((-0.379644393890153)*cj0*py*r02*sj2))+(((0.0731212219694508)*pz*r00*sj0))+(((-0.00995560610984725)*cj2*px*r00))+(((-0.0731212219694508)*cj2*pz*r00*sj0))+(((0.379644393890153)*px*r02*sj0*sj2))+(((0.0731212219694508)*cj2*px*r02*sj0))+(((0.379644393890153)*cj0*pz*r01*sj2))+(((-0.0731212219694508)*pz*r02*sj2))+(((0.0731212219694508)*cj0*py*r02))+(((0.00995560610984725)*px*r00))+(((-0.0731212219694508)*px*r00*sj2))))*(((((0.0252932612934677)*cj2*r02))+(((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((0.00142523321416965)*cj0*r01*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.131424991306467)*cj2*r00*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-0.00142523321416965)*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.131424991306467)*cj0*r01))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((0.0252932612934677)*r02))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.131424991306467)*cj0*cj2*r01))+(((-0.00130860716607085)*r02*sj2))+((cj0*r01*(py*py)))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((-0.131424991306467)*r00*sj0))))))+(((((((-0.351155606109847)*cj0*pz*r01*sj2))+(((-0.0731212219694508)*cj0*cj2*py*r02))+(((0.351155606109847)*cj0*py*r02*sj2))+(((-0.0731212219694508)*cj0*py*r02))+(((-0.0731212219694508)*py*r01*sj2))+(((-0.740755606109847)*cj2*px*r00))+(((0.0731212219694508)*cj0*cj2*pz*r01))+(((-0.351155606109847)*px*r02*sj0*sj2))+(((-0.0731212219694508)*cj2*pz*r00*sj0))+(((0.351155606109847)*pz*r00*sj0*sj2))+(((0.0731212219694508)*cj2*px*r02*sj0))+(((-0.740755606109847)*cj2*py*r01))+(((-0.0731212219694508)*pz*r02*sj2))+(((-0.740755606109847)*py*r01))+(((-0.0731212219694508)*pz*r00*sj0))+(((-0.740755606109847)*pz*r02))+(((-0.740755606109847)*px*r00))+(((-0.0731212219694508)*px*r00*sj2))+(((-0.740755606109847)*cj2*pz*r02))+(((0.0731212219694508)*px*r02*sj0))+(((0.0731212219694508)*cj0*pz*r01))))*(((((-0.00651350869353266)*r02*sj2))+(((-1.0)*r00*sj0*(pz*pz)))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.00572994716607085)*r00*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((0.00142523321416965)*r02))+(((-0.00142523321416965)*cj2*r02))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0252932612934677)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.0252932612934677)*r00*sj0*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.00572994716607085)*cj0*cj2*r01))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.00572994716607085)*cj2*r00*sj0))+(((0.00572994716607085)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x209.valid){
continue;
}
CheckValue<IkReal> x210=IKPowWithIntegerCheck(IKsign(((((((((0.00651350869353266)*cj0*r01*sj2))+(((-0.00651350869353266)*r00*sj0*sj2))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((1.0)*cj2*r02*(pz*pz)))+(((0.00142523321416965)*r00*sj0))+(((-0.00572994716607085)*cj2*r02))+(((0.00572994716607085)*r02))+(((1.0)*r00*sj0*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((1.0)*r02*(py*py)))+(((2.0)*cj2*px*pz*r00))+(((-0.00142523321416965)*cj2*r00*sj0))+(((1.0)*cj0*r01*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((1.0)*cj0*r01*sj2*(px*px)))+(((1.0)*r02*(px*px)))+(((2.0)*cj2*py*pz*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-2.0)*px*pz*r00))+(((2.0)*px*py*r01*sj0*sj2))+(((-0.00142523321416965)*cj0*r01))+(((-2.0)*py*pz*r01))+(((0.00142523321416965)*cj0*cj2*r01))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.0252932612934677)*r02*sj2))+(((-1.0)*r02*(pz*pz)))))*(((((0.0252932612934677)*cj2*r02))+(((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((0.00142523321416965)*cj0*r01*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.131424991306467)*cj2*r00*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-0.00142523321416965)*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.131424991306467)*cj0*r01))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((0.0252932612934677)*r02))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.131424991306467)*cj0*cj2*r01))+(((-0.00130860716607085)*r02*sj2))+((cj0*r01*(py*py)))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((-0.131424991306467)*r00*sj0))))))+((((((r00*sj0*sj2*(pz*pz)))+(((0.00130860716607085)*r00*sj0*sj2))+(((-0.00142523321416965)*r02*sj2))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.0252932612934677)*r00*sj0))+((cj2*r02*(py*py)))+(((0.0252932612934677)*cj0*r01))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.00130860716607085)*cj0*r01*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.131424991306467)*r02))+(((0.0252932612934677)*cj0*cj2*r01))+(((-0.131424991306467)*cj2*r02))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.0252932612934677)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(((((-0.00651350869353266)*r02*sj2))+(((-1.0)*r00*sj0*(pz*pz)))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.00572994716607085)*r00*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((0.00142523321416965)*r02))+(((-0.00142523321416965)*cj2*r02))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0252932612934677)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.0252932612934677)*r00*sj0*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.00572994716607085)*cj0*cj2*r01))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.00572994716607085)*cj2*r00*sj0))+(((0.00572994716607085)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py))))))))),-1);
if(!x210.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x209.value)+(((1.5707963267949)*(x210.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((-0.0731212219694508)*cj0*pz*r01))+(((0.740755606109847)*pz*r02))+((((((r00*sj0*sj2*(pz*pz)))+(((0.00130860716607085)*r00*sj0*sj2))+(((-0.00142523321416965)*r02*sj2))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.0252932612934677)*r00*sj0))+((cj2*r02*(py*py)))+(((0.0252932612934677)*cj0*r01))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.00130860716607085)*cj0*r01*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.131424991306467)*r02))+(((0.0252932612934677)*cj0*cj2*r01))+(((-0.131424991306467)*cj2*r02))+(((-2.0)*px*py*r01*sj0*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((-0.0252932612934677)*cj2*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(IKcos(j1))))+(((-0.0731212219694508)*cj2*px*r02*sj0))+(((0.0731212219694508)*py*r01*sj2))+(((0.351155606109847)*px*r02*sj0*sj2))+(((0.740755606109847)*py*r01))+(((-0.0731212219694508)*px*r02*sj0))+(((-0.351155606109847)*cj0*py*r02*sj2))+(((0.0731212219694508)*cj0*cj2*py*r02))+(((0.0731212219694508)*px*r00*sj2))+(((0.351155606109847)*cj0*pz*r01*sj2))+(((0.0731212219694508)*pz*r00*sj0))+(((0.740755606109847)*cj2*py*r01))+(((0.740755606109847)*cj2*px*r00))+(((-0.351155606109847)*pz*r00*sj0*sj2))+(((0.0731212219694508)*pz*r02*sj2))+(((0.740755606109847)*px*r00))+(((0.0731212219694508)*cj0*py*r02))+(((0.740755606109847)*cj2*pz*r02))+(((((((0.0252932612934677)*cj2*r02))+(((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((0.00142523321416965)*cj0*r01*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.131424991306467)*cj2*r00*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-0.00142523321416965)*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.131424991306467)*cj0*r01))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((0.0252932612934677)*r02))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.131424991306467)*cj0*cj2*r01))+(((-0.00130860716607085)*r02*sj2))+((cj0*r01*(py*py)))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((-0.131424991306467)*r00*sj0))))*(IKsin(j1))))+(((0.0731212219694508)*cj2*pz*r00*sj0))+(((-0.0731212219694508)*cj0*cj2*pz*r01)));
evalcond[1]=((((-0.0731212219694508)*px*r02*sj0*sj2))+(((-0.0731212219694508)*cj0*pz*r01*sj2))+(((0.0731212219694508)*cj0*py*r02*sj2))+(((-0.351155606109847)*cj0*py*r02))+(((0.740755606109847)*pz*r02*sj2))+(((0.740755606109847)*py*r01*sj2))+(((-0.0731212219694508)*cj2*pz*r02))+(((-0.0731212219694508)*cj2*py*r01))+(((-0.351155606109847)*pz*r00*sj0))+(((0.0731212219694508)*pz*r00*sj0*sj2))+((((((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.131424991306467)*cj0*r01*sj2))+(((2.0)*px*pz*r00))+((cj2*r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((0.00130860716607085)*cj2*r02))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.00142523321416965)*cj2*r00*sj0))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00142523321416965)*r00*sj0))+(((-0.131424991306467)*r00*sj0*sj2))+(((-0.00130860716607085)*r02))+(((-2.0)*px*py*r01*sj0*sj2))+(((0.00142523321416965)*cj0*r01))+(((-0.00142523321416965)*cj0*cj2*r01))+(((0.0252932612934677)*r02*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.351155606109847)*cj2*px*r02*sj0))+(((0.351155606109847)*cj0*cj2*py*r02))+(((0.0731212219694508)*pz*r02))+(((0.740755606109847)*px*r00*sj2))+(((0.351155606109847)*cj0*pz*r01))+(((-0.0731212219694508)*cj2*px*r00))+((((((r02*sj2*(py*py)))+(((-1.0)*cj0*cj2*r01*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.00130860716607085)*cj0*r01))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-1.0)*cj2*r00*sj0*(pz*pz)))+((cj0*cj2*r01*(px*px)))+(((-0.00142523321416965)*r02))+((cj0*cj2*r01*(pz*pz)))+(((-0.00130860716607085)*cj2*r00*sj0))+(((0.00142523321416965)*cj2*r02))+(((-0.131424991306467)*r02*sj2))+(((2.0)*cj0*py*pz*r02))+(((2.0)*cj2*px*pz*r02*sj0))+(((0.00130860716607085)*cj0*cj2*r01))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((0.00130860716607085)*r00*sj0))+(((-1.0)*cj2*r00*sj0*(py*py)))+(((-2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(px*px)))+(((-0.0252932612934677)*r00*sj0*sj2))+((cj0*r01*(py*py)))+(((0.0252932612934677)*cj0*r01*sj2))+(((-2.0)*cj0*cj2*px*py*r00))))*(IKcos(j1))))+(((0.0731212219694508)*px*r00))+(((0.0731212219694508)*py*r01))+(((-0.351155606109847)*cj0*cj2*pz*r01))+(((0.351155606109847)*px*r02*sj0))+(((0.351155606109847)*cj2*pz*r00*sj0)));
evalcond[2]=((((-0.379644393890153)*pz*r00*sj0*sj2))+(((-0.00995560610984725)*cj2*py*r01))+(((((((-0.00651350869353266)*r02*sj2))+(((-1.0)*r00*sj0*(pz*pz)))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.00572994716607085)*r00*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((0.00142523321416965)*r02))+(((-0.00142523321416965)*cj2*r02))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-0.0252932612934677)*cj0*r01*sj2))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.0252932612934677)*r00*sj0*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.00572994716607085)*cj0*cj2*r01))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.00572994716607085)*cj2*r00*sj0))+(((0.00572994716607085)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))))*(IKsin(j1))))+(((-0.0731212219694508)*cj0*pz*r01))+(((-0.00995560610984725)*cj2*pz*r02))+(((0.00995560610984725)*py*r01))+(((-0.0731212219694508)*cj0*cj2*py*r02))+(((0.00995560610984725)*pz*r02))+(((-0.0731212219694508)*py*r01*sj2))+(((-0.0731212219694508)*px*r02*sj0))+(((0.0731212219694508)*cj0*cj2*pz*r01))+(((-0.379644393890153)*cj0*py*r02*sj2))+(((0.0731212219694508)*pz*r00*sj0))+(((-0.00995560610984725)*cj2*px*r00))+(((-0.0731212219694508)*cj2*pz*r00*sj0))+(((0.379644393890153)*px*r02*sj0*sj2))+(((((((0.00572994716607085)*cj2*r02))+((r00*sj0*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((2.0)*px*pz*r00))+((cj2*r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.00572994716607085)*r02))+(((0.00651350869353266)*r00*sj0*sj2))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.00142523321416965)*cj2*r00*sj0))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.00142523321416965)*r00*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((0.00142523321416965)*cj0*r01))+(((-0.00142523321416965)*cj0*cj2*r01))+(((0.0252932612934677)*r02*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-1.0)*r02*(px*px)))+(((-0.00651350869353266)*cj0*r01*sj2))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(IKcos(j1))))+(((0.0731212219694508)*cj2*px*r02*sj0))+(((0.379644393890153)*cj0*pz*r01*sj2))+(((-0.0731212219694508)*pz*r02*sj2))+(((0.0731212219694508)*cj0*py*r02))+(((0.00995560610984725)*px*r00))+(((-0.0731212219694508)*px*r00*sj2)));
evalcond[3]=((((-0.0731212219694508)*px*r02*sj0*sj2))+(((-0.379644393890153)*cj0*py*r02))+(((-0.0731212219694508)*cj0*pz*r01*sj2))+(((0.379644393890153)*px*r02*sj0))+(((0.0731212219694508)*cj0*py*r02*sj2))+(((0.00995560610984725)*pz*r02*sj2))+(((-0.0731212219694508)*pz*r02))+(((-0.0731212219694508)*cj2*pz*r02))+(((-0.0731212219694508)*cj2*py*r01))+(((-0.0731212219694508)*py*r01))+(((0.0731212219694508)*pz*r00*sj0*sj2))+(((0.00995560610984725)*px*r00*sj2))+(((((((0.0252932612934677)*cj2*r02))+(((-2.0)*px*pz*r02*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+(((-0.00651350869353266)*cj0*cj2*r01))+((r00*sj0*(pz*pz)))+(((0.00142523321416965)*cj0*r01*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((-0.00142523321416965)*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((0.0252932612934677)*r02))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.00651350869353266)*r00*sj0))+(((0.00651350869353266)*cj2*r00*sj0))+(((2.0)*py*pz*r01*sj2))+(((-0.00572994716607085)*r02*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+((cj0*r01*(py*py)))+(((-0.00651350869353266)*cj0*r01))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))))*(IKcos(j1))))+(((((((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.0252932612934677)*r00*sj0))+((r00*sj0*sj2*(px*px)))+(((2.0)*px*pz*r00))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+((cj2*r02*(pz*pz)))+(((2.0)*cj2*px*pz*r00))+((cj0*r01*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-0.00651350869353266)*cj2*r02))+(((0.0252932612934677)*cj2*r00*sj0))+(((2.0)*cj2*py*pz*r01))+(((-0.0252932612934677)*cj0*cj2*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-0.00572994716607085)*r00*sj0*sj2))+(((2.0)*px*py*r01*sj0*sj2))+(((0.00572994716607085)*cj0*r01*sj2))+(((-0.00651350869353266)*r02))+(((-0.0252932612934677)*cj0*r01))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((-2.0)*cj0*py*pz*r02*sj2))+((cj0*r01*sj2*(px*px)))+(((0.00142523321416965)*r02*sj2))+((r02*(pz*pz)))))*(IKsin(j1))))+(((0.379644393890153)*cj0*cj2*pz*r01))+(((0.00995560610984725)*py*r01*sj2))+(((-0.0731212219694508)*cj2*px*r00))+(((0.379644393890153)*cj0*pz*r01))+(((-0.0731212219694508)*px*r00))+(((-0.379644393890153)*cj2*pz*r00*sj0))+(((0.379644393890153)*cj2*px*r02*sj0))+(((-0.379644393890153)*pz*r00*sj0))+(((-0.379644393890153)*cj0*cj2*py*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x211=(cj0*py);
IkReal x212=(pz*sj1);
IkReal x213=((12.5121871953201)*cj2);
IkReal x214=(px*sj0);
IkReal x215=((2.4374390640234)*sj2);
IkReal x216=((2.4374390640234)*cj2);
IkReal x217=(cj1*pz);
IkReal x218=((12.5121871953201)*sj2);
IkReal x219=(cj1*x215);
IkReal x220=(cj1*x218);
if( IKabs(((-0.474813129671758)+(((-1.0)*sj1*x211*x216))+(((-0.445320116997075)*cj2))+((x214*x219))+((sj1*x214*x216))+((x216*x217))+(((-1.0)*sj1*x214*x218))+(((-1.0)*cj1*x211*x213))+(((-1.0)*x217*x218))+((sj1*x211*x218))+(((-1.0)*x211*x219))+(((-1.0)*x212*x213))+(((-1.0)*x212*x215))+((cj1*x213*x214))+(((2.28597660058499)*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.43737406564836)+(((-1.0)*sj1*x211*x213))+(((-1.0)*sj1*x211*x215))+((cj1*x211*x216))+((x213*x217))+((sj1*x214*x215))+((x214*x220))+((x215*x217))+(((-0.445320116997075)*sj2))+((sj1*x213*x214))+((x212*x216))+(((-2.28597660058499)*cj2))+(((-1.0)*cj1*x214*x216))+(((-1.0)*x212*x218))+(((-1.0)*x211*x220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.474813129671758)+(((-1.0)*sj1*x211*x216))+(((-0.445320116997075)*cj2))+((x214*x219))+((sj1*x214*x216))+((x216*x217))+(((-1.0)*sj1*x214*x218))+(((-1.0)*cj1*x211*x213))+(((-1.0)*x217*x218))+((sj1*x211*x218))+(((-1.0)*x211*x219))+(((-1.0)*x212*x213))+(((-1.0)*x212*x215))+((cj1*x213*x214))+(((2.28597660058499)*sj2))))+IKsqr(((-2.43737406564836)+(((-1.0)*sj1*x211*x213))+(((-1.0)*sj1*x211*x215))+((cj1*x211*x216))+((x213*x217))+((sj1*x214*x215))+((x214*x220))+((x215*x217))+(((-0.445320116997075)*sj2))+((sj1*x213*x214))+((x212*x216))+(((-2.28597660058499)*cj2))+(((-1.0)*cj1*x214*x216))+(((-1.0)*x212*x218))+(((-1.0)*x211*x220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.474813129671758)+(((-1.0)*sj1*x211*x216))+(((-0.445320116997075)*cj2))+((x214*x219))+((sj1*x214*x216))+((x216*x217))+(((-1.0)*sj1*x214*x218))+(((-1.0)*cj1*x211*x213))+(((-1.0)*x217*x218))+((sj1*x211*x218))+(((-1.0)*x211*x219))+(((-1.0)*x212*x213))+(((-1.0)*x212*x215))+((cj1*x213*x214))+(((2.28597660058499)*sj2))), ((-2.43737406564836)+(((-1.0)*sj1*x211*x213))+(((-1.0)*sj1*x211*x215))+((cj1*x211*x216))+((x213*x217))+((sj1*x214*x215))+((x214*x220))+((x215*x217))+(((-0.445320116997075)*sj2))+((sj1*x213*x214))+((x212*x216))+(((-2.28597660058499)*cj2))+(((-1.0)*cj1*x214*x216))+(((-1.0)*x212*x218))+(((-1.0)*x211*x220))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x221=IKsin(j3);
IkReal x222=IKcos(j3);
IkReal x223=((0.999998735952397)*cj4);
IkReal x224=(cj0*sj1);
IkReal x225=((0.00158999799016431)*sj4);
IkReal x226=(cj0*cj1);
IkReal x227=((1.0)*cj1);
IkReal x228=(sj2*x222);
IkReal x229=((1.0)*sj0*sj1);
IkReal x230=(cj2*x221);
IkReal x231=(cj2*x222);
IkReal x232=(sj2*x221);
evalcond[0]=((((-0.015)*x231))+(((0.015)*x232))+((py*x226))+(((0.077)*x228))+(((-1.0)*px*sj0*x227))+(((0.1948)*sj2))+((pz*sj1))+(((0.077)*x230)));
evalcond[1]=((0.1827)+(((0.015)*x228))+(((0.015)*x230))+((py*x224))+(((-1.0)*pz*x227))+(((-0.077)*x232))+(((0.1948)*cj2))+(((-1.0)*px*x229))+(((0.077)*x231)));
evalcond[2]=((((-1.0)*x225*x230))+((r01*x226))+(((-1.0)*x225*x228))+(((-1.0)*r00*sj0*x227))+((r02*sj1))+(((-1.0)*x223*x228))+(((-1.0)*x223*x230)));
evalcond[3]=((((-1.0)*x225*x231))+(((-1.0)*r02*x227))+((r01*x224))+(((-1.0)*r00*x229))+((x225*x232))+(((-1.0)*x223*x231))+((x223*x232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (0198fcb38f4ad2fc6d22a9981a92bb8f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
