/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-02-05 11:39:02.768717
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.000799999744000123)*x8);
x11=((0.999999680000154)*x8);
x12=((0.000799999744000123)*x9);
x13=((0.0199999872000164)*x5);
x14=((1.2799983616021e-8)*x1);
x15=((6.39999385600623e-7)*x5);
x16=((0.082)*x1);
x17=((0.000799999232000778)*x6);
x18=((0.202)*x0);
x19=((0.082)*x0);
x20=((6.39999385600623e-7)*x6);
x21=((0.000799999744000123)*x6);
x22=((0.999999680000154)*x9);
x23=((0.000799999744000123)*x5);
x24=((0.000799999232000778)*x5);
x25=((1.0)*x0);
x26=((1.2799983616021e-8)*x0);
x27=((0.0199999872000164)*x6);
x28=((-0.000799999232000778)*x5);
x29=(x2*x4);
x30=(x3*x7);
x31=(x2*x7);
x32=(x1*x3);
x33=(x1*x2);
x34=(x3*x4);
x35=((-0.999999680000154)*x6);
x36=((-0.999999680000154)*x5);
x37=(x0*x3);
x38=((-0.000799999744000123)*x5);
x39=((-0.000799999744000123)*x6);
x40=(x0*x2);
x41=((-0.000799999232000778)*x6);
x42=((1.0)*x32);
x43=(x33+x34);
x44=((((-1.0)*x42))+x29);
x45=((((-1.0)*x29))+x42);
x46=(x44*x6);
x47=(x45*x5);
x48=(((x0*x29))+(((-1.0)*x25*x32)));
x49=((((-1.0)*x29*x7))+((x1*x30)));
x50=(((x30*x4))+((x1*x31)));
x51=(x25*((x33+x34)));
x52=((-1.0)*x51);
x53=((((-1.0)*x1*x31))+(((-1.0)*x30*x4)));
x54=(x5*x53);
x55=(((x20*x43))+((x35*x44))+((x36*x43))+((x15*x45)));
x56=(((x23*x43))+((x17*x43))+((x21*x44))+((x24*x45)));
x57=(((x20*x49))+(((0.000799999488000491)*x0))+((x36*x49))+((x15*x53))+((x35*x50)));
x58=(((x20*x48))+(((0.000799999488000491)*x7))+((x36*x48))+((x15*x51))+((x35*x52)));
eetrans[0]=(((x13*x51))+((x27*x48))+((x5*((((x16*x37))+(((-1.0)*x19*x29))))))+((x18*x34))+((x18*x33))+((x5*((((x26*x34))+((x14*x40))))))+((x6*(((((-1.0)*x14*x37))+((x26*x29))))))+((x6*((((x19*x34))+((x16*x40))))))+(((0.186)*x40)));
IkReal x59=(x30*x4);
IkReal x60=(x29*x7);
IkReal x61=((1.0)*x16);
eetrans[1]=(((x13*x53))+((x5*(((((-1.0)*x14*x31))+(((-1.2799983616021e-8)*x59))))))+((x27*x49))+((x6*(((((-1.0)*x31*x61))+(((-0.082)*x59))))))+(((-0.186)*x31))+(((-0.202)*x59))+((x5*(((((-1.0)*x30*x61))+(((0.082)*x60))))))+((x6*((((x14*x30))+(((-1.2799983616021e-8)*x60))))))+(((-0.202)*x1*x31)));
eetrans[2]=((0.06)+(((0.186)*x3))+((x5*(((((-0.082)*x34))+(((-1.0)*x16*x2))))))+((x5*(((((0.02)*x32))+(((-0.02)*x29))))))+(((-0.202)*x29))+((x6*((((x16*x3))+(((-0.082)*x29))))))+((x6*(((((0.02)*x34))+(((0.02)*x33))))))+(((0.202)*x32)));
IkReal x62=((0.999999360000614)*x7);
eerot[0]=(((x11*((((x39*x52))+((x41*x48))+((x38*x48))+(((-1.0)*x62))+((x28*x51))))))+(((-1.0)*x10*x58))+(((-1.0)*x12*((((x23*x48))+((x17*x48))+((x24*x51))+x62+((x21*x52))))))+((x22*x58)));
IkReal x63=((0.999999360000614)*x0);
eerot[1]=((((-1.0)*x12*((((x23*x49))+((x17*x49))+((x24*x53))+x63+((x21*x50))))))+(((-1.0)*x10*x57))+((x11*((((x39*x50))+((x41*x49))+((x38*x49))+(((-1.0)*x63))+((x28*x53))))))+((x22*x57)));
IkReal x64=((1.0)*x56);
eerot[2]=((((-1.0)*x10*x55))+(((-1.0)*x12*x64))+(((-1.0)*x11*x64))+((x22*x55)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.06)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x66 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x66.valid){
continue;
}
IkReal x65=x66.value;
j0array[0]=((-1.0)*x65);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x65)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.00000031999974)*cj0*r00))+(((-1.00000031999974)*r01*sj0)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x67=pz*pz;
IkReal x68=py*py;
IkReal x69=px*px;
IkReal x70=((0.270837131549243)*r02);
IkReal x71=((0.0656110079809076)*r02);
IkReal x72=((0.00358387193428525)*r02);
IkReal x73=((0.012861876103048)*r02);
IkReal x74=(py*r01);
IkReal x75=(cj0*r01);
IkReal x76=(cj0*r02);
IkReal x77=((0.000127999877120151)*px);
IkReal x78=(px*r00);
IkReal x79=((1.99999872000164)*r02);
IkReal x80=((7.99999488000655)*pz);
IkReal x81=(r00*sj0);
IkReal x82=(r01*sj0);
IkReal x83=(px*sj0);
IkReal x84=((6.39999385600754e-5)*pz);
IkReal x85=((0.000524799496192618)*r00);
IkReal x86=((0.789367265720489)*pz);
IkReal x87=((0.69863178196073)*pz);
IkReal x88=(px*r01);
IkReal x89=((3.99999744000328)*pz);
IkReal x90=(pz*r02);
IkReal x91=((3.99999744000328)*r02);
IkReal x92=(cj0*py);
IkReal x93=(cj0*r00);
IkReal x94=(py*r00);
IkReal x95=((0.186007741707508)*pz);
IkReal x96=((0.000262399748096309)*x88);
IkReal x97=((1.50663126484139)*x74);
IkReal x98=((1.50663126484139)*x90);
IkReal x99=((1.50663126484139)*x78);
IkReal x100=((0.0656110079809076)*x81);
IkReal x101=((0.000262399748096309)*x94);
IkReal x102=((1.1903988572174e-5)*x82);
IkReal x103=((0.0656110079809076)*x75);
IkReal x104=((1.1903988572174e-5)*x93);
IkReal x105=((0.0178346837009136)*x75);
IkReal x106=((6.39999385600754e-5)*x94);
IkReal x107=((4.88063531459135e-5)*x82);
IkReal x108=((0.186007741707508)*x78);
IkReal x109=((0.0178346837009136)*x81);
IkReal x110=((4.88063531459135e-5)*x93);
IkReal x111=((0.186007741707508)*x90);
IkReal x112=((0.186007741707508)*x74);
IkReal x113=((6.39999385600754e-5)*x88);
IkReal x114=((0.000524799496192618)*x88);
IkReal x115=(py*x85);
IkReal x116=((0.000957883721598269)*x75);
IkReal x117=((0.000957883721598269)*x81);
IkReal x118=((0.000127999877120151)*x94);
IkReal x119=(r01*x77);
IkReal x120=((0.0186322171601725)*x90);
IkReal x121=((0.00358387193428525)*x81);
IkReal x122=((0.0186322171601725)*x74);
IkReal x123=((0.0186322171601725)*x78);
IkReal x124=((0.00358387193428525)*x75);
IkReal x125=((1.99999872000164)*x67);
IkReal x126=(pz*x93);
IkReal x127=((3.99999744000328)*x69);
IkReal x128=((1.99999872000164)*x69);
IkReal x129=(py*r02*sj0);
IkReal x130=((3.99999744000328)*x68);
IkReal x131=((3.99999744000328)*x67);
IkReal x132=((1.99999872000164)*x68);
IkReal x133=((0.186007741707508)*py*x76);
IkReal x134=((6.39999385600754e-5)*px*x76);
IkReal x135=(x81*x95);
IkReal x136=(x78*x89);
IkReal x137=(x67*x79);
IkReal x138=((6.39999385600754e-5)*x129);
IkReal x139=(x74*x89);
IkReal x140=(x69*x79);
IkReal x141=(x75*x95);
IkReal x142=((0.186007741707508)*r02*x83);
IkReal x143=(x84*x93);
IkReal x144=(x68*x79);
IkReal x145=(x82*x84);
IkReal x146=((0.000262399748096309)*x129);
IkReal x147=((0.789367265720489)*r02*x83);
IkReal x148=((0.000262399748096309)*px*x76);
IkReal x149=(x75*x86);
IkReal x150=((0.789367265720489)*py*x76);
IkReal x151=((0.000262399748096309)*pz*x82);
IkReal x152=((0.000262399748096309)*x126);
IkReal x153=(x81*x86);
IkReal x154=(x78*x80);
IkReal x155=(x76*x77);
IkReal x156=(x74*x80);
IkReal x157=((0.000127999877120151)*x129);
IkReal x158=(x67*x91);
IkReal x159=((0.000127999877120151)*x126);
IkReal x160=((0.000127999877120151)*pz*x82);
IkReal x161=(x68*x91);
IkReal x162=(x69*x91);
IkReal x163=(x75*x87);
IkReal x164=((0.69863178196073)*r02*x83);
IkReal x165=(x81*x87);
IkReal x166=((0.69863178196073)*py*x76);
IkReal x167=((0.000524799496192618)*px*x76);
IkReal x168=((0.000524799496192618)*x129);
IkReal x169=((0.000524799496192618)*pz*x82);
IkReal x170=(cj0*pz*x85);
IkReal x171=((3.99999744000328)*x74*x83);
IkReal x172=(x128*x81);
IkReal x173=(x128*x75);
IkReal x174=(r02*x83*x89);
IkReal x175=(x125*x75);
IkReal x176=((3.99999744000328)*x78*x92);
IkReal x177=(py*x76*x89);
IkReal x178=(x132*x75);
IkReal x179=(x132*x81);
IkReal x180=(x125*x81);
IkReal x181=((7.99999488000655)*x74*x83);
IkReal x182=(r02*x80*x83);
IkReal x183=(x127*x81);
IkReal x184=(x131*x75);
IkReal x185=(x127*x75);
IkReal x186=((7.99999488000655)*x78*x92);
IkReal x187=(x131*x81);
IkReal x188=(py*x76*x80);
IkReal x189=(x130*x81);
IkReal x190=(x130*x75);
IkReal x191=(x109+x71);
IkReal x192=(x100+x70);
IkReal x193=(x147+x149);
IkReal x194=(x135+x133);
IkReal x195=(x141+x142);
IkReal x196=(x99+x98+x97);
IkReal x197=(x104+x102+x195);
IkReal x198=(x166+x165+x110+x107);
IkReal x199=(x122+x123+x120+x104+x102);
IkReal x200=(x163+x164+x112+x111+x108);
IkReal x201=(x162+x160+x161+x159+x115);
IkReal x202=(x140+x143+x144+x145+x101+x103);
IkReal x203=(x157+x156+x155+x154+x158+x114);
IkReal x204=(x153+x150+x112+x111+x110+x108+x107);
IkReal x205=(x134+x137+x136+x139+x138+x96);
IkReal x206=(x140+x143+x144+x145+x121+x101+x73);
IkReal x207=(x179+x178+x177+x176+x152+x151+x113+x180);
IkReal x208=(x168+x167+x118+x184+x185+x181+x182+x183);
IkReal x209=(x170+x169+x119+x190+x186+x187+x188+x189);
IkReal x210=(x171+x173+x172+x175+x174+x146+x148+x105+x106);
IkReal x211=(x171+x173+x172+x175+x174+x146+x148+x116+x106+x72);
IkReal x212=((((-0.0356693674018272)*r02))+(((-1.0)*x201))+x203+(((-0.131222015961815)*x75))+(((0.131222015961815)*x81)));
IkReal x213=((((0.0071677438685705)*x75))+(((-0.0071677438685705)*x81))+(((-1.0)*x201))+(((-0.00191576744319654)*r02))+x203);
IkReal x214=((((-0.541674263098486)*x81))+(((-1.0)*x208))+x209+(((0.131222015961815)*r02))+(((0.541674263098486)*x75)));
IkReal x215=((((0.0071677438685705)*r02))+(((-1.0)*x209))+x208+(((0.025723752206096)*x75))+(((-0.025723752206096)*x81)));
IkReal x216=((((-1.0)*x197))+(((-1.0)*x192))+x196+x194+(((-1.0)*x205))+x202);
IkReal x217=((((-1.0)*x197))+x192+x196+x194+(((-1.0)*x202))+x205);
IkReal x218=((((-1.0)*x195))+x124+x199+x194+(((-1.0)*x206))+x205);
IkReal x219=((((-1.0)*x195))+(((-1.0)*x124))+x199+x194+(((-1.0)*x205))+x206);
IkReal x220=(x193+x191+(((-1.0)*x204))+x207+(((-1.0)*x210)));
IkReal x221=((((-1.0)*x191))+x193+(((-1.0)*x207))+(((-1.0)*x204))+x210);
IkReal x222=((((-1.0)*x198))+x117+x207+x200+(((-1.0)*x211)));
IkReal x223=((((-1.0)*x198))+(((-1.0)*x117))+(((-1.0)*x207))+x211+x200);
IkReal gconst40=x216;
IkReal gconst41=x214;
IkReal gconst42=x217;
IkReal gconst43=x220;
IkReal gconst44=x212;
IkReal gconst45=x221;
IkReal gconst46=x216;
IkReal gconst47=x214;
IkReal gconst48=x217;
IkReal gconst49=x220;
IkReal gconst50=x212;
IkReal gconst51=x221;
IkReal gconst52=x222;
IkReal gconst53=x213;
IkReal gconst54=x223;
IkReal gconst55=x218;
IkReal gconst56=x215;
IkReal gconst57=x219;
IkReal gconst58=x222;
IkReal gconst59=x213;
IkReal gconst60=x223;
IkReal gconst61=x218;
IkReal gconst62=x215;
IkReal gconst63=x219;
IkReal x224=(gconst42*gconst43);
IkReal x225=(gconst45*gconst46);
IkReal x226=((1.0)*gconst52);
IkReal x227=(gconst46*gconst57);
IkReal x228=(gconst41*gconst62);
IkReal x229=(gconst53*gconst57);
IkReal x230=(gconst50*gconst58);
IkReal x231=(gconst54*gconst55);
IkReal x232=((1.0)*gconst59);
IkReal x233=(gconst48*gconst61);
IkReal x234=(gconst40*gconst57);
IkReal x235=(gconst50*gconst53);
IkReal x236=(gconst43*gconst54);
IkReal x237=(gconst46*gconst51);
IkReal x238=(gconst42*gconst47);
IkReal x239=(gconst56*gconst61);
IkReal x240=(gconst41*gconst45);
IkReal x241=(gconst45*gconst53);
IkReal x242=((1.0)*gconst60);
IkReal x243=(gconst42*gconst55);
IkReal x244=(gconst44*gconst49);
IkReal x245=(gconst54*gconst59);
IkReal x246=((1.0)*gconst54);
IkReal x247=(gconst46*gconst62);
IkReal x248=((1.0)*gconst40);
IkReal x249=(gconst41*gconst50);
IkReal x250=(gconst46*gconst63);
IkReal x251=(gconst58*gconst63);
IkReal x252=(gconst58*gconst62);
IkReal x253=(gconst45*gconst52);
IkReal x254=(gconst48*gconst49);
IkReal x255=(gconst51*gconst58);
IkReal x256=(gconst49*gconst60);
IkReal x257=(gconst41*gconst57);
IkReal x258=(gconst42*gconst59);
IkReal x259=(gconst49*gconst56);
IkReal x260=(gconst44*gconst61);
IkReal x261=(gconst46*gconst50);
IkReal x262=(gconst52*gconst57);
IkReal x263=(gconst47*gconst54);
IkReal x264=(gconst40*gconst45);
IkReal x265=(gconst60*gconst61);
IkReal x266=(gconst53*gconst62);
IkReal x267=((1.0)*x254);
IkReal x268=((1.0)*gconst42*gconst56);
IkReal x269=((1.0)*gconst47*gconst61);
IkReal x270=((1.0)*gconst42*gconst44);
IkReal x271=((1.0)*gconst47*gconst49);
op[0]=((((-1.0)*gconst57*x226*x251))+(((-1.0)*gconst56*x246*x252))+((x229*x252))+((x262*x265))+(((-1.0)*gconst61*x229*x232))+((x239*x245))+(((-1.0)*gconst61*x231*x242))+((x231*x251)));
op[1]=((((-1.0)*gconst57*x226*x255))+((x233*x262))+(((-1.0)*x229*x269))+((x245*x259))+(((-1.0)*gconst44*x246*x252))+((x253*x265))+((x229*x230))+((x241*x252))+((gconst57*gconst58*x228))+(((-1.0)*gconst61*x232*x241))+(((-1.0)*gconst49*x231*x242))+((x234*x265))+(((-1.0)*gconst56*x230*x246))+((x227*x266))+(((-1.0)*gconst61*x236*x242))+((x243*x251))+(((-1.0)*gconst45*x226*x251))+((x239*x263))+(((-1.0)*gconst63*x226*x227))+(((-1.0)*gconst56*x246*x247))+(((-1.0)*x231*x233))+(((-1.0)*gconst49*x229*x232))+(((-1.0)*gconst61*x232*x257))+((x236*x251))+((x256*x262))+(((-1.0)*x252*x268))+(((-1.0)*gconst61*x242*x243))+((x231*x255))+((x231*x250))+((x245*x260))+(((-1.0)*x234*x251))+((x239*x258)));
op[2]=((((-1.0)*gconst49*x232*x241))+((x227*x228))+((x230*x241))+((gconst45*gconst58*x228))+(((-1.0)*x233*x236))+(((-1.0)*gconst63*x227*x248))+((x258*x260))+(((-1.0)*gconst49*x232*x257))+((x259*x263))+(((-1.0)*x229*x271))+(((-1.0)*gconst61*x232*x240))+((x260*x263))+(((-1.0)*gconst49*x236*x242))+(((-1.0)*x231*x267))+((x233*x234))+((x264*x265))+((x244*x245))+(((-1.0)*x230*x268))+((x243*x255))+((x243*x250))+(((-1.0)*gconst45*x226*x255))+((x254*x262))+(((-1.0)*x241*x269))+(((-1.0)*gconst63*x225*x226))+(((-1.0)*x233*x243))+((x253*x256))+(((-1.0)*gconst56*x246*x261))+(((-1.0)*gconst61*x224*x242))+((x238*x239))+((x227*x235))+(((-1.0)*gconst44*x246*x247))+(((-1.0)*x252*x270))+((x236*x255))+((x236*x250))+(((-1.0)*gconst45*x248*x251))+(((-1.0)*x247*x268))+(((-1.0)*gconst44*x230*x246))+((x233*x253))+(((-1.0)*gconst51*x226*x227))+((x234*x256))+((x230*x257))+((x231*x237))+((x225*x266))+(((-1.0)*x257*x269))+(((-1.0)*x234*x255))+(((-1.0)*gconst49*x242*x243))+((x258*x259))+((x224*x251)));
op[3]=((((-1.0)*gconst49*x232*x240))+((x233*x264))+((x230*x240))+((x225*x228))+((x238*x259))+(((-1.0)*gconst51*x227*x248))+((x237*x243))+(((-1.0)*x243*x267))+(((-1.0)*gconst51*x225*x226))+((x238*x260))+(((-1.0)*x230*x270))+((x244*x263))+((x227*x249))+(((-1.0)*x236*x267))+(((-1.0)*x261*x268))+(((-1.0)*x241*x271))+(((-1.0)*gconst44*x246*x261))+((x253*x254))+((x225*x235))+(((-1.0)*x240*x269))+((x256*x264))+(((-1.0)*gconst45*x248*x255))+(((-1.0)*x224*x233))+(((-1.0)*gconst49*x224*x242))+((x234*x254))+(((-1.0)*x257*x271))+(((-1.0)*x247*x270))+((x244*x258))+((x236*x237))+((x224*x255))+((x224*x250))+(((-1.0)*gconst63*x225*x248)));
op[4]=((((-1.0)*gconst51*x225*x248))+((x238*x244))+((x254*x264))+(((-1.0)*x261*x270))+((x224*x237))+(((-1.0)*x240*x271))+((x225*x249))+(((-1.0)*x224*x267)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x272=IKPowWithIntegerCheck(IKsign(((((((((1.99999872000164)*px*pz*r00))+(((-3.19999692800377e-5)*cj0*pz*r00))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-3.19999692800377e-5)*pz*r01*sj0))+(((0.00179193596714262)*cj2*r00*sj0))+(((-0.000131199874048155)*py*r00))+(((-1.99999872000164)*cj2*px*pz*r00))+(((1.99999872000164)*py*pz*r01))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((-0.00179193596714262)*r00*sj0))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((-0.000478941860799135)*r02))+(((0.999999360000819)*r02*(pz*pz)))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((3.19999692800377e-5)*cj0*px*r02))+(((0.999999360000819)*cj2*r02*(px*px)))+(((-0.999999360000819)*r02*(px*px)))+(((-0.135418565774621)*r00*sj0*sj2))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((0.135418565774621)*cj0*r01*sj2))+(((0.000131199874048155)*px*r01))+(((0.000478941860799135)*cj2*r02))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((0.0328055039904538)*r02*sj2))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.00179193596714262)*cj0*cj2*r01))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.00179193596714262)*cj0*r01))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-0.999999360000819)*r02*(py*py)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((3.19999692800377e-5)*py*r02*sj0))+(((-1.99999872000164)*cj2*py*pz*r01))))*(((((-3.19999692800377e-5)*cj0*px*r02))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-0.000478941860799135)*cj0*r01*sj2))+(((-1.99999872000164)*cj2*px*pz*r00))+(((-0.135418565774621)*cj2*r02))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((3.19999692800377e-5)*cj0*pz*r00))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((0.0328055039904538)*cj0*cj2*r01))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((0.999999360000819)*cj2*r02*(px*px)))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((-3.19999692800377e-5)*py*r02*sj0))+(((-0.00179193596714262)*r02*sj2))+(((0.999999360000819)*r02*(py*py)))+(((-1.99999872000164)*py*pz*r01))+(((3.19999692800377e-5)*pz*r01*sj0))+(((0.000478941860799135)*r00*sj0*sj2))+(((0.0328055039904538)*cj0*r01))+(((-1.99999872000164)*px*pz*r00))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((-0.000131199874048155)*px*r01))+(((-0.135418565774621)*r02))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-0.999999360000819)*r02*(pz*pz)))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.0328055039904538)*cj2*r00*sj0))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.999999360000819)*r02*(px*px)))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((0.000131199874048155)*py*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((-0.0328055039904538)*r00*sj0))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((-1.99999872000164)*cj2*py*pz*r01))))))+(((((((1.99999872000164)*cj0*cj2*py*pz*r02))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((0.00179193596714262)*r02))+(((0.000478941860799135)*cj2*r00*sj0))+(((-0.000131199874048155)*cj0*pz*r00))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((-0.999999360000819)*cj0*r01*(py*py)))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((-0.000478941860799135)*r00*sj0))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((-0.999999360000819)*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*pz*r01*sj0))+(((0.135418565774621)*r02*sj2))+(((0.000131199874048155)*py*r02*sj0))+(((-1.99999872000164)*cj0*py*pz*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-3.19999692800377e-5)*px*r01))+(((-0.00179193596714262)*cj2*r02))+(((1.99999872000164)*px*pz*r02*sj0))+(((0.999999360000819)*r00*sj0*(px*px)))+(((-0.000478941860799135)*cj0*cj2*r01))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((3.19999692800377e-5)*py*r00))+(((0.999999360000819)*cj0*r01*(px*px)))+(((0.000131199874048155)*px*r01*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-0.0328055039904538)*cj0*r01*sj2))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*r01*(pz*pz)))+(((-1.99999872000164)*cj0*px*py*r00))+(((0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*r00*sj0*(pz*pz)))+(((0.0328055039904538)*r00*sj0*sj2))+(((0.000478941860799135)*cj0*r01))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz)))))*(((((1.99999872000164)*cj0*cj2*py*pz*r02))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((0.135418565774621)*cj0*cj2*r01))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((0.0328055039904538)*cj2*r02))+(((-0.000478941860799135)*r02*sj2))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.135418565774621)*r00*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((0.000131199874048155)*cj0*pz*r00))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((-0.135418565774621)*cj2*r00*sj0))+(((-0.00179193596714262)*r00*sj0*sj2))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((0.999999360000819)*r00*sj0*(py*py)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((0.0328055039904538)*r02))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((0.135418565774621)*cj0*r01))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*px*r01*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.00179193596714262)*cj0*r01*sj2))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz))))))))),-1);
if(!x272.valid){
continue;
}
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((((((((0.753315632420696)*pz*r02))+(((-2.44031765729567e-5)*r01*sj0*sj2))+(((0.0930038708537539)*cj0*cj2*py*r02))+(((-5.95199428608701e-6)*r01*sj0))+(((-0.349315890980365)*pz*r00*sj0*sj2))+(((0.0930038708537539)*cj2*pz*r00*sj0))+(((0.0930038708537539)*py*r01*sj2))+(((0.753315632420696)*cj2*py*r01))+(((0.753315632420696)*py*r01))+(((0.349315890980365)*px*r02*sj0*sj2))+(((0.0930038708537539)*pz*r00*sj0))+(((0.753315632420696)*cj2*pz*r02))+(((-0.0930038708537539)*cj0*pz*r01))+(((0.753315632420696)*px*r00))+(((-5.95199428608701e-6)*cj0*cj2*r00))+(((-0.0930038708537539)*px*r02*sj0))+(((-5.95199428608701e-6)*cj0*r00))+(((0.0930038708537539)*cj0*py*r02))+(((-0.0930038708537539)*cj0*cj2*pz*r01))+(((-0.0930038708537539)*cj2*px*r02*sj0))+(((-0.349315890980365)*cj0*py*r02*sj2))+(((0.349315890980365)*cj0*pz*r01*sj2))+(((0.0930038708537539)*pz*r02*sj2))+(((-5.95199428608701e-6)*cj2*r01*sj0))+(((-2.44031765729567e-5)*cj0*r00*sj2))+(((0.753315632420696)*cj2*px*r00))+(((0.0930038708537539)*px*r00*sj2))))*(((((-3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*cj0*cj2*pz*r00))+(((-1.99999872000164)*py*pz*r01*sj2))+(((0.000131199874048155)*cj2*py*r02*sj0))+(((-0.999999360000819)*r02*sj2*(pz*pz)))+(((-3.19999692800377e-5)*py*r02*sj0*sj2))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((-0.000478941860799135)*cj0*r01))+(((0.000478941860799135)*r00*sj0))+(((-0.00179193596714262)*r02))+(((-0.000478941860799135)*cj2*r00*sj0))+(((0.000478941860799135)*cj0*cj2*r01))+(((-0.000131199874048155)*cj2*pz*r01*sj0))+(((-1.99999872000164)*cj0*cj2*py*pz*r02))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((0.999999360000819)*cj2*r00*sj0*(px*px)))+(((0.000131199874048155)*cj0*pz*r00))+(((0.0328055039904538)*cj0*r01*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((0.000131199874048155)*py*r00*sj2))+(((3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-1.99999872000164)*px*pz*r00*sj2))+(((3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*cj0*cj2*px*r02))+(((1.99999872000164)*cj2*px*pz*r02*sj0))+(((-0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.135418565774621)*r02*sj2))+(((0.999999360000819)*r00*sj0*(py*py)))+(((0.999999360000819)*r02*sj2*(py*py)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((3.19999692800377e-5)*cj2*py*r00))+(((-3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj2*px*py*r01*sj0))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((-0.000131199874048155)*px*r01*sj2))+(((-1.99999872000164)*cj0*cj2*px*py*r00))+(((-0.0328055039904538)*r00*sj0*sj2))+(((0.999999360000819)*r02*sj2*(px*px)))+(((0.00179193596714262)*cj2*r02))+(((-0.999999360000819)*cj2*r00*sj0*(py*py)))+(((0.999999360000819)*cj0*cj2*r01*(px*px)))+(((-0.999999360000819)*cj0*cj2*r01*(py*py)))))))+(((((((-0.349315890980365)*px*r02*sj0))+(((0.0930038708537539)*cj2*pz*r02))+(((-0.349315890980365)*cj2*pz*r00*sj0))+(((-2.44031765729567e-5)*cj2*r01*sj0))+(((-0.0930038708537539)*px*r00))+(((0.349315890980365)*cj2*px*r02*sj0))+(((-2.44031765729567e-5)*cj0*cj2*r00))+(((-0.349315890980365)*cj0*cj2*py*r02))+(((0.0930038708537539)*cj2*py*r01))+(((5.95199428608701e-6)*cj0*r00*sj2))+(((0.349315890980365)*cj0*py*r02))+(((0.349315890980365)*cj0*cj2*pz*r01))+(((-0.0930038708537539)*cj0*py*r02*sj2))+(((5.95199428608701e-6)*r01*sj0*sj2))+(((-0.349315890980365)*cj0*pz*r01))+(((0.0930038708537539)*px*r02*sj0*sj2))+(((-0.0930038708537539)*pz*r00*sj0*sj2))+(((0.349315890980365)*pz*r00*sj0))+(((2.44031765729567e-5)*r01*sj0))+(((-0.753315632420696)*px*r00*sj2))+(((0.0930038708537539)*cj0*pz*r01*sj2))+(((2.44031765729567e-5)*cj0*r00))+(((-0.0930038708537539)*py*r01))+(((-0.753315632420696)*py*r01*sj2))+(((0.0930038708537539)*cj2*px*r00))+(((-0.0930038708537539)*pz*r02))+(((-0.753315632420696)*pz*r02*sj2))))*(((((-3.19999692800377e-5)*cj0*px*r02))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-0.000478941860799135)*cj0*r01*sj2))+(((-1.99999872000164)*cj2*px*pz*r00))+(((-0.135418565774621)*cj2*r02))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((3.19999692800377e-5)*cj0*pz*r00))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((0.0328055039904538)*cj0*cj2*r01))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((0.999999360000819)*cj2*r02*(px*px)))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((-3.19999692800377e-5)*py*r02*sj0))+(((-0.00179193596714262)*r02*sj2))+(((0.999999360000819)*r02*(py*py)))+(((-1.99999872000164)*py*pz*r01))+(((3.19999692800377e-5)*pz*r01*sj0))+(((0.000478941860799135)*r00*sj0*sj2))+(((0.0328055039904538)*cj0*r01))+(((-1.99999872000164)*px*pz*r00))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((-0.000131199874048155)*px*r01))+(((-0.135418565774621)*r02))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-0.999999360000819)*r02*(pz*pz)))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.0328055039904538)*cj2*r00*sj0))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.999999360000819)*r02*(px*px)))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((0.000131199874048155)*py*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((-0.0328055039904538)*r00*sj0))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((-1.99999872000164)*cj2*py*pz*r01)))))))),IkReal(((((((((-2.44031765729567e-5)*r01*sj0))+(((-0.0930038708537539)*cj2*py*r01))+(((-0.349315890980365)*cj0*cj2*pz*r01))+(((0.0930038708537539)*px*r00))+(((-0.0930038708537539)*cj0*pz*r01*sj2))+(((-0.349315890980365)*cj0*py*r02))+(((0.753315632420696)*pz*r02*sj2))+(((0.349315890980365)*cj0*cj2*py*r02))+(((-2.44031765729567e-5)*cj0*r00))+(((-0.349315890980365)*cj2*px*r02*sj0))+(((0.753315632420696)*py*r01*sj2))+(((0.349315890980365)*cj0*pz*r01))+(((2.44031765729567e-5)*cj0*cj2*r00))+(((0.753315632420696)*px*r00*sj2))+(((0.0930038708537539)*py*r01))+(((0.0930038708537539)*cj0*py*r02*sj2))+(((0.349315890980365)*cj2*pz*r00*sj0))+(((-5.95199428608701e-6)*r01*sj0*sj2))+(((0.0930038708537539)*pz*r02))+(((-5.95199428608701e-6)*cj0*r00*sj2))+(((-0.349315890980365)*pz*r00*sj0))+(((0.349315890980365)*px*r02*sj0))+(((0.0930038708537539)*pz*r00*sj0*sj2))+(((2.44031765729567e-5)*cj2*r01*sj0))+(((-0.0930038708537539)*cj2*pz*r02))+(((-0.0930038708537539)*px*r02*sj0*sj2))+(((-0.0930038708537539)*cj2*px*r00))))*(((((1.99999872000164)*cj0*cj2*py*pz*r02))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((0.135418565774621)*cj0*cj2*r01))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((0.0328055039904538)*cj2*r02))+(((-0.000478941860799135)*r02*sj2))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.135418565774621)*r00*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((0.000131199874048155)*cj0*pz*r00))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((-0.135418565774621)*cj2*r00*sj0))+(((-0.00179193596714262)*r00*sj0*sj2))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((0.999999360000819)*r00*sj0*(py*py)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((0.0328055039904538)*r02))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((0.135418565774621)*cj0*r01))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*px*r01*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.00179193596714262)*cj0*r01*sj2))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz)))))))+(((((((5.95199428608701e-6)*cj0*r00))+(((-0.0930038708537539)*px*r00*sj2))+(((0.0930038708537539)*px*r02*sj0))+(((-0.753315632420696)*px*r00))+(((0.0930038708537539)*cj0*cj2*pz*r01))+(((2.44031765729567e-5)*r01*sj0*sj2))+(((-0.753315632420696)*cj2*py*r01))+(((-0.349315890980365)*cj0*pz*r01*sj2))+(((-0.753315632420696)*cj2*pz*r02))+(((-0.0930038708537539)*py*r01*sj2))+(((0.349315890980365)*pz*r00*sj0*sj2))+(((-0.0930038708537539)*pz*r02*sj2))+(((5.95199428608701e-6)*cj2*r01*sj0))+(((-0.0930038708537539)*cj0*py*r02))+(((0.349315890980365)*cj0*py*r02*sj2))+(((0.0930038708537539)*cj0*pz*r01))+(((-0.0930038708537539)*cj0*cj2*py*r02))+(((5.95199428608701e-6)*r01*sj0))+(((-0.753315632420696)*cj2*px*r00))+(((5.95199428608701e-6)*cj0*cj2*r00))+(((2.44031765729567e-5)*cj0*r00*sj2))+(((-0.753315632420696)*py*r01))+(((0.0930038708537539)*cj2*px*r02*sj0))+(((-0.0930038708537539)*pz*r00*sj0))+(((-0.0930038708537539)*cj2*pz*r00*sj0))+(((-0.753315632420696)*pz*r02))+(((-0.349315890980365)*px*r02*sj0*sj2))))*(((((1.99999872000164)*px*pz*r00))+(((-3.19999692800377e-5)*cj0*pz*r00))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-3.19999692800377e-5)*pz*r01*sj0))+(((0.00179193596714262)*cj2*r00*sj0))+(((-0.000131199874048155)*py*r00))+(((-1.99999872000164)*cj2*px*pz*r00))+(((1.99999872000164)*py*pz*r01))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((-0.00179193596714262)*r00*sj0))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((-0.000478941860799135)*r02))+(((0.999999360000819)*r02*(pz*pz)))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((3.19999692800377e-5)*cj0*px*r02))+(((0.999999360000819)*cj2*r02*(px*px)))+(((-0.999999360000819)*r02*(px*px)))+(((-0.135418565774621)*r00*sj0*sj2))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((0.135418565774621)*cj0*r01*sj2))+(((0.000131199874048155)*px*r01))+(((0.000478941860799135)*cj2*r02))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((0.0328055039904538)*r02*sj2))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.00179193596714262)*cj0*cj2*r01))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.00179193596714262)*cj0*r01))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-0.999999360000819)*r02*(py*py)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((3.19999692800377e-5)*py*r02*sj0))+(((-1.99999872000164)*cj2*py*pz*r01)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x272.value)))+(x273.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((0.753315632420696)*pz*r02))+(((-2.44031765729567e-5)*r01*sj0*sj2))+(((0.0930038708537539)*cj0*cj2*py*r02))+(((-5.95199428608701e-6)*r01*sj0))+(((-0.349315890980365)*pz*r00*sj0*sj2))+(((0.0930038708537539)*cj2*pz*r00*sj0))+(((0.0930038708537539)*py*r01*sj2))+(((0.753315632420696)*cj2*py*r01))+(((0.753315632420696)*py*r01))+(((0.349315890980365)*px*r02*sj0*sj2))+(((0.0930038708537539)*pz*r00*sj0))+(((0.753315632420696)*cj2*pz*r02))+(((-0.0930038708537539)*cj0*pz*r01))+(((0.753315632420696)*px*r00))+(((((((1.99999872000164)*cj0*cj2*py*pz*r02))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((0.135418565774621)*cj0*cj2*r01))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((0.0328055039904538)*cj2*r02))+(((-0.000478941860799135)*r02*sj2))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.135418565774621)*r00*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((0.000131199874048155)*cj0*pz*r00))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((-0.135418565774621)*cj2*r00*sj0))+(((-0.00179193596714262)*r00*sj0*sj2))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((0.999999360000819)*r00*sj0*(py*py)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((0.0328055039904538)*r02))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((0.135418565774621)*cj0*r01))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*px*r01*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.00179193596714262)*cj0*r01*sj2))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz)))))*(IKsin(j1))))+(((-5.95199428608701e-6)*cj0*cj2*r00))+(((((((-3.19999692800377e-5)*cj0*px*r02))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-0.000478941860799135)*cj0*r01*sj2))+(((-1.99999872000164)*cj2*px*pz*r00))+(((-0.135418565774621)*cj2*r02))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((3.19999692800377e-5)*cj0*pz*r00))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((0.0328055039904538)*cj0*cj2*r01))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((0.999999360000819)*cj2*r02*(px*px)))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((-3.19999692800377e-5)*py*r02*sj0))+(((-0.00179193596714262)*r02*sj2))+(((0.999999360000819)*r02*(py*py)))+(((-1.99999872000164)*py*pz*r01))+(((3.19999692800377e-5)*pz*r01*sj0))+(((0.000478941860799135)*r00*sj0*sj2))+(((0.0328055039904538)*cj0*r01))+(((-1.99999872000164)*px*pz*r00))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((-0.000131199874048155)*px*r01))+(((-0.135418565774621)*r02))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-0.999999360000819)*r02*(pz*pz)))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.0328055039904538)*cj2*r00*sj0))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.999999360000819)*r02*(px*px)))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((0.000131199874048155)*py*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((-0.0328055039904538)*r00*sj0))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((-1.99999872000164)*cj2*py*pz*r01))))*(IKcos(j1))))+(((-0.0930038708537539)*px*r02*sj0))+(((-5.95199428608701e-6)*cj0*r00))+(((0.0930038708537539)*cj0*py*r02))+(((-0.0930038708537539)*cj0*cj2*pz*r01))+(((-0.0930038708537539)*cj2*px*r02*sj0))+(((-0.349315890980365)*cj0*py*r02*sj2))+(((0.349315890980365)*cj0*pz*r01*sj2))+(((0.0930038708537539)*pz*r02*sj2))+(((-5.95199428608701e-6)*cj2*r01*sj0))+(((-2.44031765729567e-5)*cj0*r00*sj2))+(((0.753315632420696)*cj2*px*r00))+(((0.0930038708537539)*px*r00*sj2)));
evalcond[1]=((((-2.44031765729567e-5)*r01*sj0))+(((-0.0930038708537539)*cj2*py*r01))+(((-0.349315890980365)*cj0*cj2*pz*r01))+(((0.0930038708537539)*px*r00))+(((((((-3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*cj0*cj2*pz*r00))+(((-1.99999872000164)*py*pz*r01*sj2))+(((0.000131199874048155)*cj2*py*r02*sj0))+(((-0.999999360000819)*r02*sj2*(pz*pz)))+(((-3.19999692800377e-5)*py*r02*sj0*sj2))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((-0.000478941860799135)*cj0*r01))+(((0.000478941860799135)*r00*sj0))+(((-0.00179193596714262)*r02))+(((-0.000478941860799135)*cj2*r00*sj0))+(((0.000478941860799135)*cj0*cj2*r01))+(((-0.000131199874048155)*cj2*pz*r01*sj0))+(((-1.99999872000164)*cj0*cj2*py*pz*r02))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((0.999999360000819)*cj2*r00*sj0*(px*px)))+(((0.000131199874048155)*cj0*pz*r00))+(((0.0328055039904538)*cj0*r01*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((0.000131199874048155)*py*r00*sj2))+(((3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-1.99999872000164)*px*pz*r00*sj2))+(((3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*cj0*cj2*px*r02))+(((1.99999872000164)*cj2*px*pz*r02*sj0))+(((-0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.135418565774621)*r02*sj2))+(((0.999999360000819)*r00*sj0*(py*py)))+(((0.999999360000819)*r02*sj2*(py*py)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((3.19999692800377e-5)*cj2*py*r00))+(((-3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj2*px*py*r01*sj0))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((-0.000131199874048155)*px*r01*sj2))+(((-1.99999872000164)*cj0*cj2*px*py*r00))+(((-0.0328055039904538)*r00*sj0*sj2))+(((0.999999360000819)*r02*sj2*(px*px)))+(((0.00179193596714262)*cj2*r02))+(((-0.999999360000819)*cj2*r00*sj0*(py*py)))+(((0.999999360000819)*cj0*cj2*r01*(px*px)))+(((-0.999999360000819)*cj0*cj2*r01*(py*py)))))*(IKcos(j1))))+(((-0.0930038708537539)*cj0*pz*r01*sj2))+(((-0.349315890980365)*cj0*py*r02))+(((0.753315632420696)*pz*r02*sj2))+(((0.349315890980365)*cj0*cj2*py*r02))+(((-2.44031765729567e-5)*cj0*r00))+(((-0.349315890980365)*cj2*px*r02*sj0))+(((0.753315632420696)*py*r01*sj2))+(((0.349315890980365)*cj0*pz*r01))+(((2.44031765729567e-5)*cj0*cj2*r00))+(((0.753315632420696)*px*r00*sj2))+(((0.0930038708537539)*py*r01))+(((0.0930038708537539)*cj0*py*r02*sj2))+(((0.349315890980365)*cj2*pz*r00*sj0))+(((-5.95199428608701e-6)*r01*sj0*sj2))+(((0.0930038708537539)*pz*r02))+(((-5.95199428608701e-6)*cj0*r00*sj2))+(((-0.349315890980365)*pz*r00*sj0))+(((0.349315890980365)*px*r02*sj0))+(((0.0930038708537539)*pz*r00*sj0*sj2))+(((2.44031765729567e-5)*cj2*r01*sj0))+(((-0.0930038708537539)*cj2*pz*r02))+(((-0.0930038708537539)*px*r02*sj0*sj2))+(((((((1.99999872000164)*px*pz*r00))+(((-3.19999692800377e-5)*cj0*pz*r00))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-3.19999692800377e-5)*pz*r01*sj0))+(((0.00179193596714262)*cj2*r00*sj0))+(((-0.000131199874048155)*py*r00))+(((-1.99999872000164)*cj2*px*pz*r00))+(((1.99999872000164)*py*pz*r01))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((-0.00179193596714262)*r00*sj0))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((-0.000478941860799135)*r02))+(((0.999999360000819)*r02*(pz*pz)))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((3.19999692800377e-5)*cj0*px*r02))+(((0.999999360000819)*cj2*r02*(px*px)))+(((-0.999999360000819)*r02*(px*px)))+(((-0.135418565774621)*r00*sj0*sj2))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((0.135418565774621)*cj0*r01*sj2))+(((0.000131199874048155)*px*r01))+(((0.000478941860799135)*cj2*r02))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((0.0328055039904538)*r02*sj2))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.00179193596714262)*cj0*cj2*r01))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((0.00179193596714262)*cj0*r01))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((-0.999999360000819)*r02*(py*py)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((3.19999692800377e-5)*py*r02*sj0))+(((-1.99999872000164)*cj2*py*pz*r01))))*(IKsin(j1))))+(((-0.0930038708537539)*cj2*px*r00)));
evalcond[2]=((((-2.44031765729567e-5)*r01*sj0))+(((-0.0930038708537539)*cj2*py*r01))+(((0.00931610858008624)*px*r00*sj2))+(((-2.44031765729567e-5)*cj2*r01*sj0))+(((-0.0930038708537539)*px*r00))+(((-0.394683632860245)*cj2*pz*r00*sj0))+(((-0.0930038708537539)*cj0*pz*r01*sj2))+(((((((-0.0089173418504568)*r02))+(((1.99999872000164)*px*pz*r00))+(((-3.19999692800377e-5)*cj0*pz*r00))+(((-3.19999692800377e-5)*pz*r01*sj0))+(((0.00643093805152401)*cj0*r01*sj2))+(((-0.000131199874048155)*py*r00))+(((0.999999360000819)*r00*sj0*sj2*(px*px)))+(((1.99999872000164)*py*pz*r01))+(((-3.19999692800377e-5)*px*r01*sj2))+(((-3.19999692800377e-5)*cj0*cj2*pz*r00))+(((-0.999999360000819)*cj2*r02*(px*px)))+(((0.999999360000819)*r02*(pz*pz)))+(((-0.000131199874048155)*cj0*pz*r00*sj2))+(((3.19999692800377e-5)*cj0*px*r02))+(((-0.999999360000819)*r02*(px*px)))+(((0.000131199874048155)*px*r01))+(((0.00179193596714262)*r02*sj2))+(((-0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((-0.999999360000819)*cj2*r02*(py*py)))+(((0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj2*py*pz*r01))+(((0.000131199874048155)*py*r02*sj0*sj2))+(((1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*cj2*pz*r01*sj0))+(((0.0328055039904538)*r00*sj0))+(((3.19999692800377e-5)*py*r00*sj2))+(((0.999999360000819)*cj0*r01*sj2*(px*px)))+(((0.0328055039904538)*cj2*r00*sj0))+(((0.000131199874048155)*cj2*px*r01))+(((-0.0089173418504568)*cj2*r02))+(((-0.000131199874048155)*pz*r01*sj0*sj2))+(((-0.999999360000819)*r00*sj0*sj2*(py*py)))+(((0.000131199874048155)*cj0*px*r02*sj2))+(((-0.0328055039904538)*cj0*r01))+(((3.19999692800377e-5)*cj2*py*r02*sj0))+(((1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.00643093805152401)*r00*sj0*sj2))+(((1.99999872000164)*cj2*px*pz*r00))+(((3.19999692800377e-5)*cj0*cj2*px*r02))+(((-1.99999872000164)*cj0*px*py*r00*sj2))+(((-0.999999360000819)*cj0*r01*sj2*(py*py)))+(((-0.999999360000819)*r02*(py*py)))+(((-0.000131199874048155)*cj2*py*r00))+(((-0.0328055039904538)*cj0*cj2*r01))+(((0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((3.19999692800377e-5)*py*r02*sj0))+(((-1.99999872000164)*cj0*py*pz*r02*sj2))))*(IKsin(j1))))+(((-2.44031765729567e-5)*cj0*cj2*r00))+(((-2.44031765729567e-5)*cj0*r00))+(((5.95199428608701e-6)*cj0*r00*sj2))+(((0.394683632860245)*cj0*pz*r01))+(((-0.394683632860245)*pz*r00*sj0))+(((0.00931610858008624)*pz*r02*sj2))+(((0.394683632860245)*cj0*cj2*pz*r01))+(((5.95199428608701e-6)*r01*sj0*sj2))+(((0.0930038708537539)*cj0*py*r02*sj2))+(((-0.394683632860245)*cj0*py*r02))+(((0.394683632860245)*px*r02*sj0))+(((0.00931610858008624)*py*r01*sj2))+(((0.0930038708537539)*pz*r00*sj0*sj2))+(((((((-0.00643093805152401)*r02*sj2))+(((1.99999872000164)*cj0*cj2*py*pz*r02))+(((-0.0089173418504568)*cj0*cj2*r01))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((1.99999872000164)*cj0*py*pz*r02))+(((3.19999692800377e-5)*px*r01))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((0.0328055039904538)*cj2*r02))+(((-0.999999360000819)*cj0*r01*(px*px)))+(((1.99999872000164)*cj0*px*py*r00))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((0.000131199874048155)*cj0*pz*r00))+(((-0.0089173418504568)*cj0*r01))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*py*r02*sj0))+(((-3.19999692800377e-5)*py*r00))+(((-0.00179193596714262)*r00*sj0*sj2))+(((0.000131199874048155)*pz*r01*sj0))+(((-0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((0.999999360000819)*r00*sj0*(py*py)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((0.0089173418504568)*r00*sj0))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((0.0328055039904538)*r02))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-0.999999360000819)*cj0*r01*(pz*pz)))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((0.000131199874048155)*px*r01*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((0.0089173418504568)*cj2*r00*sj0))+(((-0.999999360000819)*r00*sj0*(px*px)))+(((0.999999360000819)*r00*sj0*(pz*pz)))+(((0.999999360000819)*cj0*r01*(py*py)))+(((-1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((0.00179193596714262)*cj0*r01*sj2))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz)))))*(IKcos(j1))))+(((-0.0930038708537539)*cj2*pz*r02))+(((-0.0930038708537539)*px*r02*sj0*sj2))+(((-0.0930038708537539)*py*r01))+(((0.394683632860245)*cj2*px*r02*sj0))+(((-0.0930038708537539)*pz*r02))+(((-0.0930038708537539)*cj2*px*r00))+(((-0.394683632860245)*cj0*cj2*py*r02)));
evalcond[3]=((((-2.44031765729567e-5)*r01*sj0*sj2))+(((5.95199428608701e-6)*cj0*r00))+(((-0.0930038708537539)*px*r00*sj2))+(((0.0930038708537539)*cj0*cj2*pz*r01))+(((0.0930038708537539)*pz*r00*sj0))+(((-0.0930038708537539)*py*r01*sj2))+(((-0.0930038708537539)*cj0*pz*r01))+(((-0.0930038708537539)*pz*r02*sj2))+(((-5.95199428608701e-6)*cj0*cj2*r00))+(((0.00931610858008624)*pz*r02))+(((-0.0930038708537539)*px*r02*sj0))+(((0.00931610858008624)*py*r01))+(((0.0930038708537539)*cj0*py*r02))+(((0.00931610858008624)*px*r00))+(((-0.0930038708537539)*cj0*cj2*py*r02))+(((5.95199428608701e-6)*r01*sj0))+(((-0.00931610858008624)*cj2*py*r01))+(((0.0930038708537539)*cj2*px*r02*sj0))+(((-5.95199428608701e-6)*cj2*r01*sj0))+(((-0.00931610858008624)*cj2*pz*r02))+(((((((1.99999872000164)*px*pz*r00))+(((-3.19999692800377e-5)*cj0*pz*r00))+(((3.19999692800377e-5)*px*r01*sj2))+(((-1.99999872000164)*px*py*r01*sj0*sj2))+(((-3.19999692800377e-5)*py*r00*sj2))+(((-3.19999692800377e-5)*pz*r01*sj0))+(((0.00179193596714262)*cj2*r00*sj0))+(((-0.000131199874048155)*py*r00))+(((-1.99999872000164)*cj2*px*pz*r00))+(((1.99999872000164)*py*pz*r01))+(((-0.0089173418504568)*cj0*r01*sj2))+(((-0.999999360000819)*cj0*r01*sj2*(pz*pz)))+(((-0.00179193596714262)*r00*sj0))+(((0.000131199874048155)*cj0*pz*r00*sj2))+(((0.999999360000819)*r02*(pz*pz)))+(((-0.000131199874048155)*py*r02*sj0*sj2))+(((3.19999692800377e-5)*cj0*px*r02))+(((0.999999360000819)*cj2*r02*(px*px)))+(((-0.999999360000819)*r02*(px*px)))+(((3.19999692800377e-5)*cj2*pz*r01*sj0))+(((-3.19999692800377e-5)*cj0*cj2*px*r02))+(((0.000131199874048155)*px*r01))+(((0.00643093805152401)*cj2*r02))+(((0.999999360000819)*cj0*r01*sj2*(py*py)))+(((0.999999360000819)*r00*sj0*sj2*(pz*pz)))+(((0.000131199874048155)*cj2*py*r00))+(((0.0328055039904538)*r02*sj2))+(((-0.000131199874048155)*cj0*px*r02*sj2))+(((0.000131199874048155)*pz*r01*sj0*sj2))+(((-1.99999872000164)*px*pz*r02*sj0*sj2))+(((-0.00179193596714262)*cj0*cj2*r01))+(((-0.999999360000819)*r00*sj0*sj2*(px*px)))+(((-0.000131199874048155)*cj2*px*r01))+(((1.99999872000164)*cj0*px*py*r00*sj2))+(((-0.00643093805152401)*r02))+(((0.00179193596714262)*cj0*r01))+(((3.19999692800377e-5)*cj0*cj2*pz*r00))+(((-0.999999360000819)*cj0*r01*sj2*(px*px)))+(((0.0089173418504568)*r00*sj0*sj2))+(((-0.999999360000819)*r02*(py*py)))+(((-3.19999692800377e-5)*cj2*py*r02*sj0))+(((0.999999360000819)*r00*sj0*sj2*(py*py)))+(((0.999999360000819)*cj2*r02*(py*py)))+(((-0.999999360000819)*cj2*r02*(pz*pz)))+(((1.99999872000164)*cj0*py*pz*r02*sj2))+(((3.19999692800377e-5)*py*r02*sj0))+(((-1.99999872000164)*cj2*py*pz*r01))))*(IKcos(j1))))+(((((((1.99999872000164)*cj0*cj2*py*pz*r02))+(((0.00643093805152401)*cj0*r01))+(((-1.99999872000164)*cj2*px*pz*r02*sj0))+(((3.19999692800377e-5)*cj2*px*r01))+(((0.00179193596714262)*r02))+(((-0.000131199874048155)*cj0*pz*r00))+(((-3.19999692800377e-5)*cj2*py*r00))+(((1.99999872000164)*px*pz*r00*sj2))+(((-0.999999360000819)*cj0*r01*(py*py)))+(((-0.000131199874048155)*cj2*py*r02*sj0))+(((-0.000131199874048155)*cj0*cj2*px*r02))+(((-0.999999360000819)*cj2*r00*sj0*(px*px)))+(((-0.000131199874048155)*py*r00*sj2))+(((0.999999360000819)*cj2*r00*sj0*(py*py)))+(((-0.999999360000819)*r00*sj0*(py*py)))+(((3.19999692800377e-5)*cj0*px*r02*sj2))+(((-0.000131199874048155)*pz*r01*sj0))+(((0.000131199874048155)*py*r02*sj0))+(((-0.00643093805152401)*r00*sj0))+(((-1.99999872000164)*cj0*py*pz*r02))+(((-0.999999360000819)*cj0*cj2*r01*(px*px)))+(((-3.19999692800377e-5)*cj0*pz*r00*sj2))+(((-0.999999360000819)*r02*sj2*(py*py)))+(((-3.19999692800377e-5)*px*r01))+(((-0.00179193596714262)*cj2*r02))+(((1.99999872000164)*px*pz*r02*sj0))+(((0.999999360000819)*r00*sj0*(px*px)))+(((-1.99999872000164)*cj2*px*py*r01*sj0))+(((-0.999999360000819)*cj0*cj2*r01*(pz*pz)))+(((-3.19999692800377e-5)*pz*r01*sj0*sj2))+(((3.19999692800377e-5)*py*r00))+(((0.999999360000819)*cj0*r01*(px*px)))+(((0.000131199874048155)*px*r01*sj2))+(((-0.0089173418504568)*r02*sj2))+(((0.000131199874048155)*cj2*pz*r01*sj0))+(((3.19999692800377e-5)*py*r02*sj0*sj2))+(((-0.0328055039904538)*cj0*r01*sj2))+(((-0.999999360000819)*r02*sj2*(px*px)))+(((1.99999872000164)*px*py*r01*sj0))+(((0.999999360000819)*cj0*r01*(pz*pz)))+(((-1.99999872000164)*cj0*px*py*r00))+(((0.000131199874048155)*cj0*px*r02))+(((-0.999999360000819)*r00*sj0*(pz*pz)))+(((0.0328055039904538)*r00*sj0*sj2))+(((0.999999360000819)*cj0*cj2*r01*(py*py)))+(((0.00643093805152401)*cj2*r00*sj0))+(((1.99999872000164)*py*pz*r01*sj2))+(((0.999999360000819)*cj2*r00*sj0*(pz*pz)))+(((-0.00643093805152401)*cj0*cj2*r01))+(((1.99999872000164)*cj0*cj2*px*py*r00))+(((0.000131199874048155)*cj0*cj2*pz*r00))+(((0.999999360000819)*r02*sj2*(pz*pz)))))*(IKsin(j1))))+(((-2.44031765729567e-5)*cj0*r00*sj2))+(((0.394683632860245)*px*r02*sj0*sj2))+(((0.394683632860245)*cj0*pz*r01*sj2))+(((-0.00931610858008624)*cj2*px*r00))+(((-0.394683632860245)*cj0*py*r02*sj2))+(((-0.0930038708537539)*cj2*pz*r00*sj0))+(((-0.394683632860245)*pz*r00*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x274=((2.80741156653565)*cj2);
IkReal x275=(cj0*py);
IkReal x276=(px*sj0);
IkReal x277=((11.5103874227962)*cj1);
IkReal x278=((11.5103874227962)*sj1);
IkReal x279=(pz*x278);
IkReal x280=((2.80741156653565)*sj1*sj2);
IkReal x281=((2.80741156653565)*cj1*sj2);
if( IKabs(((-0.567097136440202)+((cj1*pz*x274))+(((-1.0)*sj1*x274*x275))+(((-1.0)*cj2*x275*x277))+((sj2*x275*x278))+(((-0.522178551375632)*cj2))+(((-1.0)*cj2*x279))+(((-1.0)*sj2*x276*x278))+(((-1.0)*pz*sj2*x277))+(((-1.0)*pz*x280))+(((-1.0)*x275*x281))+((x276*x281))+(((2.14093206064009)*sj2))+((sj1*x274*x276))+((cj2*x276*x277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.32509825940483)+(((-1.0)*cj1*x274*x276))+(((-1.0)*cj2*x275*x278))+(((-1.0)*sj2*x279))+((pz*sj1*x274))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x275*x277))+(((-0.522178551375632)*sj2))+((sj2*x276*x277))+(((-1.0)*x275*x280))+((x276*x280))+((cj2*pz*x277))+((cj1*x274*x275))+((pz*x281))+((cj2*x276*x278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.567097136440202)+((cj1*pz*x274))+(((-1.0)*sj1*x274*x275))+(((-1.0)*cj2*x275*x277))+((sj2*x275*x278))+(((-0.522178551375632)*cj2))+(((-1.0)*cj2*x279))+(((-1.0)*sj2*x276*x278))+(((-1.0)*pz*sj2*x277))+(((-1.0)*pz*x280))+(((-1.0)*x275*x281))+((x276*x281))+(((2.14093206064009)*sj2))+((sj1*x274*x276))+((cj2*x276*x277))))+IKsqr(((-2.32509825940483)+(((-1.0)*cj1*x274*x276))+(((-1.0)*cj2*x275*x278))+(((-1.0)*sj2*x279))+((pz*sj1*x274))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x275*x277))+(((-0.522178551375632)*sj2))+((sj2*x276*x277))+(((-1.0)*x275*x280))+((x276*x280))+((cj2*pz*x277))+((cj1*x274*x275))+((pz*x281))+((cj2*x276*x278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.567097136440202)+((cj1*pz*x274))+(((-1.0)*sj1*x274*x275))+(((-1.0)*cj2*x275*x277))+((sj2*x275*x278))+(((-0.522178551375632)*cj2))+(((-1.0)*cj2*x279))+(((-1.0)*sj2*x276*x278))+(((-1.0)*pz*sj2*x277))+(((-1.0)*pz*x280))+(((-1.0)*x275*x281))+((x276*x281))+(((2.14093206064009)*sj2))+((sj1*x274*x276))+((cj2*x276*x277))), ((-2.32509825940483)+(((-1.0)*cj1*x274*x276))+(((-1.0)*cj2*x275*x278))+(((-1.0)*sj2*x279))+((pz*sj1*x274))+(((-2.14093206064009)*cj2))+(((-1.0)*sj2*x275*x277))+(((-0.522178551375632)*sj2))+((sj2*x276*x277))+(((-1.0)*x275*x280))+((x276*x280))+((cj2*pz*x277))+((cj1*x274*x275))+((pz*x281))+((cj2*x276*x278))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x282=IKsin(j3);
IkReal x283=IKcos(j3);
IkReal x284=((0.02)*sj2);
IkReal x285=(cj0*py);
IkReal x286=((0.082)*sj2);
IkReal x287=((0.000799999488000491)*sj4);
IkReal x288=(cj0*r01);
IkReal x289=((1.0)*cj1);
IkReal x290=((1.0)*sj0*sj1);
IkReal x291=(cj2*x283);
IkReal x292=(cj2*x282);
IkReal x293=(sj2*x283);
IkReal x294=(sj2*x282);
evalcond[0]=((((0.082)*x292))+(((-1.0)*px*sj0*x289))+(((0.202)*sj2))+((pz*sj1))+((cj1*x285))+((x282*x284))+((x283*x286))+(((-0.02)*x291)));
evalcond[1]=((0.186)+(((0.082)*x291))+(((0.02)*x292))+(((-1.0)*x282*x286))+(((-1.0)*pz*x289))+((sj1*x285))+(((-1.0)*px*x290))+((x283*x284))+(((0.202)*cj2)));
evalcond[2]=((((-1.0)*r00*sj0*x289))+((cj4*x292))+((cj4*x293))+((x287*x291))+((r02*sj1))+(((-1.0)*x287*x294))+((cj1*x288)));
evalcond[3]=((((-1.0)*r00*x290))+(((-1.0)*r02*x289))+(((-1.0)*cj4*x294))+((cj4*x291))+(((-1.0)*x287*x293))+(((-1.0)*x287*x292))+((sj1*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (d287dc06019a4527af711bba17a8d25a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
