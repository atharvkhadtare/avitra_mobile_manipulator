/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-01-22 17:08:54.087529
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.1948)*x2);
x11=((0.1948)*x3);
x12=((0.015)*x2);
x13=((1.0)*x6);
x14=((0.027)*x2);
x15=((0.015)*x7);
x16=((0.027)*x7);
x17=((1.0)*x5);
x18=((1.0)*x2);
x19=(x1*x3);
x20=(x0*x1);
x21=(x0*x4);
x22=(x3*x4);
x23=(x4*x7);
x24=(x1*x2*x7);
IkReal x25=(x21*x3);
IkReal x26=(x0*x19);
eetrans[0]=(((x5*(((((0.027)*x26))+(((-1.0)*x14*x21))))))+((x6*(((((-0.015)*x26))+((x12*x21))))))+((x11*x21))+((x6*(((((0.027)*x25))+((x14*x20))))))+((x5*(((((0.015)*x25))+((x12*x20))))))+((x10*x20))+(((0.1827)*x21)));
IkReal x27=((1.0)*x16);
IkReal x28=((1.0)*x23);
IkReal x29=((1.0)*x1*x7);
eetrans[1]=(((x5*(((((-1.0)*x19*x27))+((x14*x23))))))+((x5*(((((-1.0)*x15*x22))+(((-1.0)*x12*x29))))))+((x6*(((((-1.0)*x22*x27))+(((-1.0)*x14*x29))))))+(((-1.0)*x10*x29))+((x6*((((x15*x19))+(((-1.0)*x12*x28))))))+(((-0.1827)*x23))+(((-1.0)*x11*x28)));
IkReal x30=((1.0)*x4);
eetrans[2]=((0.0636)+((x5*(((((0.015)*x19))+(((-1.0)*x12*x30))))))+((x1*x11))+((x6*(((((0.027)*x19))+(((-1.0)*x14*x30))))))+(((-1.0)*x10*x30))+(((0.1827)*x1))+((x6*(((((0.015)*x22))+((x1*x12))))))+((x5*(((((-1.0)*x1*x14))+(((-0.027)*x22)))))));
eerot[0]=((((-1.0)*x9*((((x13*(((((-1.0)*x21*x3))+(((-1.0)*x18*x20))))))+((x17*(((((-1.0)*x0*x19))+((x2*x21))))))))))+((x7*x8)));
eerot[1]=(((x0*x8))+(((-1.0)*x9*((((x17*((((x19*x7))+(((-1.0)*x18*x23))))))+((x13*((((x22*x7))+x24)))))))));
eerot[2]=((-1.0)*x9*((((x13*(((((-1.0)*x19))+((x2*x4))))))+((x17*((((x1*x2))+x22)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.0636)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x32 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x32.valid){
continue;
}
IkReal x31=x32.value;
j0array[0]=((-1.0)*x31);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x31)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((-0.005939577)*cj0*pz*r00*r01*sj0))+(((-8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((0.0029697885)*pz*(cj0*cj0)*(r01*r01)))+(((-0.0553431886792453)*cj0*px*py*sj0*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.0553431886792453)*px*py*r00*r01*(cj0*cj0)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.7308)*r01*r02*(py*py*py)))+(((1.69821719375e-5)*(r00*r00)*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.12337366)*(pz*pz)*(r02*r02)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-4.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.7308)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.7308)*(pz*pz*pz)*(r02*r02)))+(((-1.4616)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((0.000591948)*cj0*py*(r02*r02)))+(((0.00324)*cj0*r01*r02*(py*py)))+(((-0.25077932)*cj0*py*pz*r00*r02*sj0))+(((-4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.00324)*px*pz*sj0*(r00*r00)))+(((2.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((0.25077932)*py*pz*r01*r02*(cj0*cj0)))+(((-1.4616)*pz*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((-4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.4616)*cj0*px*py*pz*sj0*(r01*r01)))+(((-4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.25077932)*cj0*px*pz*r01*r02*sj0))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((2.9232)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.000591948)*cj0*py*(r01*r01)))+(((0.7308)*r00*r02*(px*px*px)))+(((0.0037064349)*px*r00*r02))+(((12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.7308)*r00*r02*(px*px*px)*(sj0*sj0)))+(((-0.0175280943396226)*(px*px)*(r00*r00)))+(((-0.0276715943396226)*(cj0*cj0)*(px*px)*(r01*r01)))+(((0.7308)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((1.4616)*px*py*pz*r00*r01*(sj0*sj0)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.001183896)*cj0*pz*r01*r02))+(((-2.1924)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.105845565660377)*(py*py)*(r02*r02)))+(((0.7308)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((0.7308)*pz*(px*px)*(r02*r02)))+(((-0.7308)*r01*r02*(cj0*cj0)*(py*py*py)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((2.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-0.0553431886792453)*cj0*px*py*sj0*(r01*r01)))+(((0.0029697885)*cj0*px*r01*r02*sj0))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.7308)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.7308)*px*r00*r02*(py*py)))+(((0.0276715943396226)*(cj0*cj0)*(py*py)*(r01*r01)))+(((2.1924)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((-1.4616)*px*r00*r02*(cj0*cj0)*(py*py)))+(((1.4616)*px*py*pz*r00*r01*(cj0*cj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.24674732)*px*pz*r00*r02))+(((-4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((0.25077932)*px*pz*r00*r02*(sj0*sj0)))+(((-1.4616)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-3.3964343875e-5)*cj0*r00*r01*sj0))+(((-0.0276715943396226)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.0001081488996)*r00*r02*sj0))+(((4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((0.000591948)*px*sj0*(r00*r00)))+(((-0.0029697885)*py*r01*r02*(cj0*cj0)))+(((0.00324)*cj0*py*pz*(r02*r02)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-0.00324)*r00*r02*sj0*(px*px)))+(((1.4616)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.000591948)*py*r00*r01*sj0))+(((0.195436131320755)*cj0*px*py*sj0*(r02*r02)))+(((-0.0977180656603774)*(px*px)*(r02*r02)*(sj0*sj0)))+(((-0.7308)*cj0*r00*r02*sj0*(py*py*py)))+(((0.7308)*py*r01*r02*(px*px)))+(((-2.1924)*py*r01*r02*(pz*pz)))+(((0.0553431886792453)*px*py*r00*r01*(sj0*sj0)))+(((-0.00324)*cj0*r01*r02*(pz*pz)))+(((-1.4616)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((-4.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((-0.00324)*cj0*px*pz*r00*r01))+(((0.25077932)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.00324)*px*pz*sj0*(r02*r02)))+(((2.1924)*cj0*py*r00*r02*sj0*(px*px)))+(((0.0037064349)*py*r01*r02))+(((-0.000591948)*cj0*px*r00*r01))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-4.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((-2.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((2.1924)*cj0*px*r01*r02*sj0*(py*py)))+(((0.0037064349)*pz*(r02*r02)))+(((0.0029697885)*pz*(r00*r00)*(sj0*sj0)))+(((-2.1924)*px*r00*r02*(pz*pz)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.4616)*pz*(px*px)*(r00*r00)))+(((0.7308)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((-0.00324)*cj0*py*pz*(r01*r01)))+(((-2.1924)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.0029697885)*px*r00*r02*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((4.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.24674732)*py*pz*r01*r02))+(((-0.7308)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((-2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((4.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.0276715943396226)*(px*px)*(r00*r00)*(sj0*sj0)))+(((-0.7308)*cj0*r01*r02*sj0*(px*px*px)))+(((0.00324)*py*pz*r00*r01*sj0))+(((-0.00324)*px*py*r01*r02*sj0))+(((4.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((1.69821719375e-5)*(cj0*cj0)*(r01*r01)))+(((-1.4616)*cj0*px*py*pz*sj0*(r00*r00)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-0.0001081488996)*cj0*r01*r02))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.12538966)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((-0.0175280943396226)*(py*py)*(r01*r01)))+(((-0.12538966)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.105845565660377)*(px*px)*(r02*r02)))+(((0.0029697885)*cj0*py*r00*r02*sj0))+(((8.42748205775e-5)*(r02*r02)))+(((4.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.001183896)*pz*r00*r02*sj0))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.00324)*cj0*px*py*r00*r02))+(((-2.9232)*px*py*pz*r00*r01))+(((-0.0350561886792453)*px*py*r00*r01))+(((-4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((-0.000591948)*px*sj0*(r02*r02)))+(((-1.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((0.00324)*r00*r02*sj0*(pz*pz)))+(((-0.7308)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((2.1924)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((0.7308)*pz*(py*py)*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.7308)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.0977180656603774)*(cj0*cj0)*(py*py)*(r02*r02))));
op[1]=((((-1.4616)*cj0*py*(px*px)*(r02*r02)))+(((0.53406864)*px*py*r01*r02*sj0))+(((-1.4616)*cj0*(py*py*py)*(r01*r01)))+(((0.001183896)*px*r00*r02))+(((1.4616)*cj0*py*(px*px)*(r01*r01)))+(((1.4616)*px*sj0*(py*py)*(r02*r02)))+(((0.53406864)*cj0*r01*r02*(px*px)))+(((4.3848)*py*r00*r01*sj0*(px*px)))+(((-0.53406864)*cj0*py*pz*(r02*r02)))+(((-0.001183896)*pz*(r00*r00)*(sj0*sj0)))+(((-1.4616)*cj0*(py*py*py)*(r02*r02)))+(((-1.4616)*cj0*py*(pz*pz)*(r02*r02)))+(((0.001183896)*py*r01*r02*(cj0*cj0)))+(((0.001183896)*py*r01*r02))+(((-0.001183896)*pz*(cj0*cj0)*(r01*r01)))+(((-0.00026917059456)*r00*r02*sj0))+(((0.005939577)*cj0*py*(r02*r02)))+(((0.0004325955984)*cj0*r00*r01*sj0))+(((2.9232)*px*py*pz*r01*r02*sj0))+(((-0.53406864)*cj0*py*pz*(r01*r01)))+(((0.0014732928)*cj0*pz*r01*r02))+(((-2.9232)*cj0*py*(px*px)*(r00*r00)))+(((1.4616)*sj0*(px*px*px)*(r00*r00)))+(((0.0002162977992)*(r02*r02)))+(((-1.4616)*cj0*py*(pz*pz)*(r01*r01)))+(((-1.4616)*px*sj0*(py*py)*(r00*r00)))+(((0.53406864)*px*pz*sj0*(r02*r02)))+(((0.53406864)*py*pz*r00*r01*sj0))+(((0.0074128698)*cj0*px*r00*r01))+(((1.4616)*px*sj0*(pz*pz)*(r02*r02)))+(((-0.001183896)*cj0*px*r01*r02*sj0))+(((-2.9232)*pz*r00*r02*sj0*(py*py)))+(((-0.53406864)*r00*r02*sj0*(py*py)))+(((-0.001183896)*cj0*py*r00*r02*sj0))+(((-0.005939577)*px*sj0*(r02*r02)))+(((1.4616)*px*sj0*(pz*pz)*(r00*r00)))+(((-4.3848)*cj0*px*r00*r01*(py*py)))+(((1.4616)*cj0*r00*r01*(px*px*px)))+(((-1.4616)*r00*r01*sj0*(py*py*py)))+(((1.4616)*sj0*(px*px*px)*(r02*r02)))+(((-2.9232)*cj0*px*py*pz*r00*r02))+(((-0.0074128698)*px*sj0*(r00*r00)))+(((-1.4616)*cj0*px*r00*r01*(pz*pz)))+(((0.002367792)*cj0*pz*r00*r01*sj0))+(((2.9232)*cj0*pz*r01*r02*(px*px)))+(((1.4616)*py*r00*r01*sj0*(pz*pz)))+(((-0.0014732928)*pz*r00*r02*sj0))+(((0.53406864)*px*pz*sj0*(r00*r00)))+(((0.00026917059456)*cj0*r01*r02))+(((-0.0002162977992)*(cj0*cj0)*(r01*r01)))+(((-0.53406864)*cj0*px*pz*r00*r01))+(((0.001183896)*px*r00*r02*(sj0*sj0)))+(((-0.0074128698)*py*r00*r01*sj0))+(((-0.53406864)*cj0*px*py*r00*r02))+(((-0.0002162977992)*(r00*r00)*(sj0*sj0)))+(((0.001183896)*pz*(r02*r02)))+(((2.9232)*px*sj0*(py*py)*(r01*r01)))+(((0.0074128698)*cj0*py*(r01*r01))));
op[2]=((((-8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-2.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((-2.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((0.957450902641509)*cj0*px*py*sj0*(r01*r01)))+(((0.478725451320755)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.322377508679245)*(px*px)*(r02*r02)))+(((0.56657864)*cj0*py*pz*r00*r02*sj0))+(((0.28328932)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.478725451320755)*(cj0*cj0)*(px*px)*(r01*r01)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((4.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.00648)*px*pz*sj0*(r00*r00)))+(((8.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((0.0006488933976)*cj0*r01*r02))+(((-0.0350561886792453)*(py*py)*(r01*r01)))+(((24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.195436131320755)*(px*px)*(r02*r02)*(sj0*sj0)))+(((-8.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((-0.00648)*r00*r02*sj0*(px*px)))+(((-0.0006488933976)*r00*r02*sj0))+(((-4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((-0.0350561886792453)*(px*px)*(r00*r00)))+(((0.28732132)*(pz*pz)*(r02*r02)))+(((0.28328932)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.57464264)*px*pz*r00*r02))+(((-8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-8.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.00648)*cj0*py*pz*(r01*r01)))+(((24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((-0.56657864)*py*pz*r01*r02*(cj0*cj0)))+(((0.57464264)*py*pz*r01*r02))+(((-0.0701123773584906)*px*py*r00*r01))+(((-0.322377508679245)*(py*py)*(r02*r02)))+(((8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.56657864)*cj0*px*pz*r01*r02*sj0))+(((8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-16.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-0.957450902641509)*px*py*r00*r01*(sj0*sj0)))+(((4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.478725451320755)*(px*px)*(r00*r00)*(sj0*sj0)))+(((-0.00648)*cj0*px*pz*r00*r01))+(((0.00648)*cj0*px*py*r00*r02))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((0.00648)*py*pz*r00*r01*sj0))+(((-0.957450902641509)*px*py*r00*r01*(cj0*cj0)))+(((24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((0.00648)*r00*r02*sj0*(pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.478725451320755)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-0.56657864)*px*pz*r00*r02*(sj0*sj0)))+(((-0.00648)*cj0*r01*r02*(pz*pz)))+(((8.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.00060626987687)*cj0*r00*r01*sj0))+(((-8.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.195436131320755)*(cj0*cj0)*(py*py)*(r02*r02)))+(((-0.00648)*px*pz*sj0*(r02*r02)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-0.56657864)*cj0*r00*r01*sj0*(pz*pz)))+(((0.000303134938435)*(r00*r00)*(sj0*sj0)))+(((4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((0.00648)*cj0*py*pz*(r02*r02)))+(((-0.000100620953405)*(r02*r02)))+(((0.000303134938435)*(cj0*cj0)*(r01*r01)))+(((0.957450902641509)*cj0*px*py*sj0*(r00*r00)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((-8.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((0.390872262641509)*cj0*px*py*sj0*(r02*r02)))+(((-4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.00648)*cj0*r01*r02*(py*py)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.00648)*px*py*r01*r02*sj0))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-4.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0))));
op[3]=((((-1.4616)*cj0*py*(px*px)*(r02*r02)))+(((-1.4616)*cj0*(py*py*py)*(r01*r01)))+(((0.001183896)*px*r00*r02))+(((1.4616)*cj0*py*(px*px)*(r01*r01)))+(((1.4616)*px*sj0*(py*py)*(r02*r02)))+(((4.3848)*py*r00*r01*sj0*(px*px)))+(((-0.0004325955984)*cj0*r00*r01*sj0))+(((-0.001183896)*pz*(r00*r00)*(sj0*sj0)))+(((-1.4616)*cj0*(py*py*py)*(r02*r02)))+(((-1.4616)*cj0*py*(pz*pz)*(r02*r02)))+(((0.001183896)*py*r01*r02*(cj0*cj0)))+(((0.53406864)*cj0*py*pz*(r02*r02)))+(((0.53406864)*cj0*px*pz*r00*r01))+(((0.001183896)*py*r01*r02))+(((-0.001183896)*pz*(cj0*cj0)*(r01*r01)))+(((0.005939577)*cj0*py*(r02*r02)))+(((0.00026917059456)*r00*r02*sj0))+(((2.9232)*px*py*pz*r01*r02*sj0))+(((0.0014732928)*cj0*pz*r01*r02))+(((-0.00026917059456)*cj0*r01*r02))+(((-2.9232)*cj0*py*(px*px)*(r00*r00)))+(((0.53406864)*r00*r02*sj0*(py*py)))+(((1.4616)*sj0*(px*px*px)*(r00*r00)))+(((-1.4616)*cj0*py*(pz*pz)*(r01*r01)))+(((-1.4616)*px*sj0*(py*py)*(r00*r00)))+(((0.0074128698)*cj0*px*r00*r01))+(((-0.0002162977992)*(r02*r02)))+(((1.4616)*px*sj0*(pz*pz)*(r02*r02)))+(((-0.001183896)*cj0*px*r01*r02*sj0))+(((-2.9232)*pz*r00*r02*sj0*(py*py)))+(((-0.001183896)*cj0*py*r00*r02*sj0))+(((-0.005939577)*px*sj0*(r02*r02)))+(((0.0002162977992)*(cj0*cj0)*(r01*r01)))+(((0.0002162977992)*(r00*r00)*(sj0*sj0)))+(((-0.53406864)*px*py*r01*r02*sj0))+(((1.4616)*px*sj0*(pz*pz)*(r00*r00)))+(((-4.3848)*cj0*px*r00*r01*(py*py)))+(((1.4616)*cj0*r00*r01*(px*px*px)))+(((-0.53406864)*cj0*r01*r02*(px*px)))+(((-1.4616)*r00*r01*sj0*(py*py*py)))+(((1.4616)*sj0*(px*px*px)*(r02*r02)))+(((-2.9232)*cj0*px*py*pz*r00*r02))+(((0.53406864)*cj0*py*pz*(r01*r01)))+(((-0.0074128698)*px*sj0*(r00*r00)))+(((-0.53406864)*py*pz*r00*r01*sj0))+(((-1.4616)*cj0*px*r00*r01*(pz*pz)))+(((0.002367792)*cj0*pz*r00*r01*sj0))+(((2.9232)*cj0*pz*r01*r02*(px*px)))+(((1.4616)*py*r00*r01*sj0*(pz*pz)))+(((-0.0014732928)*pz*r00*r02*sj0))+(((0.001183896)*px*r00*r02*(sj0*sj0)))+(((-0.0074128698)*py*r00*r01*sj0))+(((-0.53406864)*px*pz*sj0*(r00*r00)))+(((0.001183896)*pz*(r02*r02)))+(((2.9232)*px*sj0*(py*py)*(r01*r01)))+(((0.0074128698)*cj0*py*(r01*r01)))+(((0.53406864)*cj0*px*py*r00*r02))+(((-0.53406864)*px*pz*sj0*(r02*r02))));
op[4]=((((-1.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((1.4616)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((1.4616)*py*r01*r02*(px*px)*(sj0*sj0)))+(((2.1924)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((2.1924)*px*r00*r02*(pz*pz)))+(((-0.0553431886792453)*cj0*px*py*sj0*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.0553431886792453)*px*py*r00*r01*(cj0*cj0)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((1.69821719375e-5)*(r00*r00)*(sj0*sj0)))+(((0.7308)*r00*r02*(px*px*px)*(sj0*sj0)))+(((0.000591948)*cj0*px*r00*r01))+(((0.0029697885)*px*r00*r02*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.12337366)*(pz*pz)*(r02*r02)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.7308)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-4.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.7308)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.7308)*r01*r02*(py*py*py)))+(((1.4616)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.7308)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.000591948)*cj0*py*(r02*r02)))+(((0.7308)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((-0.0029697885)*cj0*px*r01*r02*sj0))+(((0.00324)*cj0*r01*r02*(py*py)))+(((-0.25077932)*cj0*py*pz*r00*r02*sj0))+(((0.000591948)*cj0*py*(r01*r01)))+(((-4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.00324)*px*pz*sj0*(r00*r00)))+(((-0.0029697885)*cj0*py*r00*r02*sj0))+(((2.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.000591948)*px*sj0*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((0.25077932)*py*pz*r01*r02*(cj0*cj0)))+(((0.7308)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((-4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.25077932)*cj0*px*pz*r01*r02*sj0))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.4616)*pz*(px*px)*(r00*r00)))+(((0.7308)*r01*r02*(cj0*cj0)*(py*py*py)))+(((12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.7308)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((-0.0175280943396226)*(px*px)*(r00*r00)))+(((-0.0276715943396226)*(cj0*cj0)*(px*px)*(r01*r01)))+(((0.005939577)*cj0*pz*r00*r01*sj0))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.7308)*px*r00*r02*(py*py)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.7308)*r00*r02*(px*px*px)))+(((-0.000591948)*py*r00*r01*sj0))+(((0.105845565660377)*(py*py)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((2.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((2.1924)*py*r01*r02*(pz*pz)))+(((-0.0553431886792453)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((0.0276715943396226)*(cj0*cj0)*(py*py)*(r01*r01)))+(((0.7308)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((1.4616)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.24674732)*px*pz*r00*r02))+(((-4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((0.25077932)*px*pz*r00*r02*(sj0*sj0)))+(((-3.3964343875e-5)*cj0*r00*r01*sj0))+(((-0.0276715943396226)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.0001081488996)*r00*r02*sj0))+(((-2.1924)*cj0*px*r01*r02*sj0*(py*py)))+(((4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((0.7308)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((-1.4616)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.00324)*cj0*py*pz*(r02*r02)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-1.4616)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((2.1924)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.00324)*r00*r02*sj0*(px*px)))+(((0.7308)*(pz*pz*pz)*(r02*r02)))+(((-0.7308)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((0.195436131320755)*cj0*px*py*sj0*(r02*r02)))+(((-0.0977180656603774)*(px*px)*(r02*r02)*(sj0*sj0)))+(((0.0553431886792453)*px*py*r00*r01*(sj0*sj0)))+(((-0.00324)*cj0*r01*r02*(pz*pz)))+(((-4.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((-0.00324)*cj0*px*pz*r00*r01))+(((0.25077932)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.00324)*px*pz*sj0*(r02*r02)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-4.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((-2.9232)*cj0*px*py*pz*sj0*(r02*r02)))+(((-2.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((2.9232)*px*py*pz*r00*r01))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((0.7308)*cj0*r00*r02*sj0*(py*py*py)))+(((-0.00324)*cj0*py*pz*(r01*r01)))+(((-1.4616)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.7308)*pz*(px*px)*(r02*r02)))+(((-2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((4.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.7308)*py*r01*r02*(px*px)))+(((-0.24674732)*py*pz*r01*r02))+(((0.001183896)*cj0*pz*r01*r02))+(((-2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((4.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.0276715943396226)*(px*px)*(r00*r00)*(sj0*sj0)))+(((0.00324)*py*pz*r00*r01*sj0))+(((-0.00324)*px*py*r01*r02*sj0))+(((4.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((1.69821719375e-5)*(cj0*cj0)*(r01*r01)))+(((-2.1924)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-0.0029697885)*pz*(r00*r00)*(sj0*sj0)))+(((-0.0001081488996)*cj0*r01*r02))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.7308)*pz*(py*py)*(r02*r02)))+(((-0.12538966)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((1.4616)*pz*(py*py)*(r01*r01)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((-0.0175280943396226)*(py*py)*(r01*r01)))+(((-0.12538966)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-0.000591948)*px*sj0*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.105845565660377)*(px*px)*(r02*r02)))+(((1.4616)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((8.42748205775e-5)*(r02*r02)))+(((4.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.4616)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.001183896)*pz*r00*r02*sj0))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.0029697885)*pz*(cj0*cj0)*(r01*r01)))+(((-2.1924)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((0.00324)*cj0*px*py*r00*r02))+(((-0.0350561886792453)*px*py*r00*r01))+(((-4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((-1.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((0.00324)*r00*r02*sj0*(pz*pz)))+(((-0.0037064349)*py*r01*r02))+(((-2.1924)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.0037064349)*px*r00*r02))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((0.0029697885)*py*r01*r02*(cj0*cj0)))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.0977180656603774)*(cj0*cj0)*(py*py)*(r02*r02)))+(((-0.0037064349)*pz*(r02*r02))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r01*sj0))+((cj0*r00)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x33=((30.3651483663026)*sj1);
if( (((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+((cj0*py*x33))+(((83.1011175870349)*(py*py)))+(((-1.0)*px*sj0*x33))+(((83.1011175870349)*(px*px))))) < -1-IKFAST_SINCOS_THRESH || (((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+((cj0*py*x33))+(((83.1011175870349)*(py*py)))+(((-1.0)*px*sj0*x33))+(((83.1011175870349)*(px*px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x34=IKasin(((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+((cj0*py*x33))+(((83.1011175870349)*(py*py)))+(((-1.0)*px*sj0*x33))+(((83.1011175870349)*(px*px)))));
j3array[0]=((-1.06369782240256)+(((1.0)*x34)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.07789483118723)+(((-1.0)*x34)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x35=px*px;
IkReal x36=py*py;
IkReal x37=pz*pz;
IkReal x38=(cj0*r00);
IkReal x39=(r01*sj0);
IkReal x40=((0.3654)*cj1);
IkReal x41=(pz*r02);
IkReal x42=(py*r00);
IkReal x43=((0.3654)*sj1);
IkReal x44=((2.0)*sj0);
IkReal x45=((2.0)*cj0*px);
IkReal x46=((1.0)*x37);
evalcond[0]=((0.03890104)+((px*r01*x43))+((x35*x38))+((py*x41*x44))+((x41*x45))+(((-1.0)*x42*x43))+(((-1.0)*x38*x46))+((x36*x39))+((py*r01*x45))+(((-1.0)*cj0*px*r02*x40))+(((-1.0)*x39*x46))+((pz*x38*x40))+((pz*x39*x40))+(((-0.03337929)*x39))+(((-0.03337929)*x38))+(((-1.0)*x36*x38))+(((-1.0)*py*r02*sj0*x40))+((px*x42*x44))+(((0.005844)*(IKsin(j3))))+(((0.0105192)*(IKcos(j3))))+(((-1.0)*x35*x39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x47=(px*sj0);
IkReal x48=((0.027)*cj3);
IkReal x49=(cj1*pz);
IkReal x50=(cj0*py);
IkReal x51=(sj1*sj3);
IkReal x52=(pz*sj1);
IkReal x53=((0.015)*cj3);
IkReal x54=((0.1948)*sj1);
IkReal x55=((0.027)*sj3);
IkReal x56=((0.015)*cj1*sj3);
IkReal x57=(cj1*x50);
IkReal x58=(sj1*x53);
CheckValue<IkReal> x59=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x59.valid){
continue;
}
CheckValue<IkReal> x60 = IKatan2WithCheck(IkReal(((((-0.027)*x47*x51))+(((-0.0027405)*cj3))+(((-0.1948)*x57))+(((-0.1948)*x52))+(((-1.0)*x48*x57))+(((-1.0)*x48*x52))+(((-1.0)*x49*x55))+(((0.1948)*cj1*x47))+((x49*x53))+(((0.0049329)*sj3))+(((0.027)*x50*x51))+((x47*x58))+((x47*x56))+(((-0.015)*pz*x51))+(((-1.0)*x50*x56))+(((-1.0)*x50*x58))+((cj1*x47*x48)))),IkReal(((-0.03558996)+(((-1.0)*sj1*x48*x50))+(((-0.027)*pz*x51))+(((-1.0)*x55*x57))+((x48*x49))+(((0.1948)*x49))+(((-1.0)*cj1*x47*x53))+(((0.015)*x47*x51))+(((-0.0049329)*cj3))+((x53*x57))+((cj1*x47*x55))+(((-0.0027405)*sj3))+((sj1*x47*x48))+((x52*x53))+(((-0.015)*x50*x51))+((x47*x54))+(((-1.0)*x50*x54))+(((0.015)*sj3*x49)))),IKFAST_ATAN2_MAGTHRESH);
if(!x60.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x59.value)))+(x60.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x61=IKcos(j2);
IkReal x62=IKsin(j2);
IkReal x63=(px*sj1);
IkReal x64=(cj1*sj0);
IkReal x65=(cj0*r00);
IkReal x66=(pz*sj1);
IkReal x67=(cj1*px);
IkReal x68=(cj1*py);
IkReal x69=((1.0)*cj0);
IkReal x70=(py*sj1);
IkReal x71=(r01*sj0);
IkReal x72=(cj1*pz);
IkReal x73=((0.1948)*x62);
IkReal x74=((0.1948)*x61);
IkReal x75=((0.027)*x61);
IkReal x76=((0.015)*x62);
IkReal x77=(r02*x69);
IkReal x78=((1.0)*py*r02);
IkReal x79=((0.027)*x62);
IkReal x80=((0.015)*x61);
IkReal x81=(sj3*x76);
IkReal x82=(cj3*x79);
IkReal x83=(sj3*x75);
IkReal x84=(cj3*x80);
IkReal x85=(sj3*x79);
IkReal x86=(sj3*x80);
IkReal x87=(cj3*x75);
IkReal x88=(cj3*x76);
IkReal x89=(x73+x82+x83+x81);
IkReal x90=(x74+x88+x86+x87);
evalcond[0]=((-0.1827)+((sj0*x63))+x72+x85+(((-1.0)*x90))+(((-1.0)*x69*x70)));
evalcond[1]=(((px*x64))+(((-1.0)*x68*x69))+x84+(((-1.0)*x89))+(((-1.0)*x66)));
evalcond[2]=((((-1.0)*x63*x77))+(((-1.0)*r01*x67))+((r00*x68))+x89+(((-1.0)*r02*sj0*x70))+(((-1.0)*x84))+((x66*x71))+((x65*x66)));
evalcond[3]=((((-0.1827)*x65))+((pz*r01*x64))+(((-1.0)*r00*x70))+(((-0.1827)*x71))+((r01*x63))+x85+(((-1.0)*x90))+(((-1.0)*x67*x77))+(((-1.0)*x64*x78))+((x65*x72)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x91=((30.3651483663026)*sj1);
if( (((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+(((83.1011175870349)*(py*py)))+((cj0*py*x91))+(((-1.0)*px*sj0*x91))+(((83.1011175870349)*(px*px))))) < -1-IKFAST_SINCOS_THRESH || (((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+(((83.1011175870349)*(py*py)))+((cj0*py*x91))+(((-1.0)*px*sj0*x91))+(((83.1011175870349)*(px*px))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x92=IKasin(((-0.45886359603621)+(((-30.3651483663026)*cj1*pz))+(((83.1011175870349)*(pz*pz)))+(((83.1011175870349)*(py*py)))+((cj0*py*x91))+(((-1.0)*px*sj0*x91))+(((83.1011175870349)*(px*px)))));
j3array[0]=((-1.06369782240256)+(((1.0)*x92)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.07789483118723)+(((-1.0)*x92)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x93=px*px;
IkReal x94=py*py;
IkReal x95=pz*pz;
IkReal x96=(cj0*r00);
IkReal x97=(r01*sj0);
IkReal x98=((0.3654)*cj1);
IkReal x99=(pz*r02);
IkReal x100=(py*r00);
IkReal x101=((0.3654)*sj1);
IkReal x102=((2.0)*sj0);
IkReal x103=((2.0)*cj0*px);
IkReal x104=((1.0)*x95);
evalcond[0]=((-0.03890104)+(((-0.03337929)*x96))+(((-0.03337929)*x97))+((py*x102*x99))+((pz*x96*x98))+(((-1.0)*py*r02*sj0*x98))+(((-1.0)*x100*x101))+(((-1.0)*x93*x97))+((x103*x99))+((px*r01*x101))+((pz*x97*x98))+(((-1.0)*cj0*px*r02*x98))+((x93*x96))+((px*x100*x102))+(((-0.005844)*(IKsin(j3))))+(((-1.0)*x94*x96))+(((-0.0105192)*(IKcos(j3))))+((py*r01*x103))+(((-1.0)*x104*x97))+(((-1.0)*x104*x96))+((x94*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x105=(px*sj0);
IkReal x106=((0.027)*cj3);
IkReal x107=(cj1*pz);
IkReal x108=(cj0*py);
IkReal x109=(sj1*sj3);
IkReal x110=(pz*sj1);
IkReal x111=((0.015)*cj3);
IkReal x112=((0.1948)*sj1);
IkReal x113=((0.027)*sj3);
IkReal x114=((0.015)*cj1*sj3);
IkReal x115=(cj1*x108);
IkReal x116=(sj1*x111);
CheckValue<IkReal> x117 = IKatan2WithCheck(IkReal(((((-0.027)*x105*x109))+(((-0.015)*pz*x109))+(((-1.0)*x107*x113))+(((0.027)*x108*x109))+(((-0.0027405)*cj3))+(((0.1948)*cj1*x105))+(((-1.0)*x108*x116))+(((-1.0)*x108*x114))+(((-1.0)*x106*x115))+(((-1.0)*x106*x110))+((cj1*x105*x106))+(((-0.1948)*x110))+(((-0.1948)*x115))+(((0.0049329)*sj3))+((x105*x114))+((x105*x116))+((x107*x111)))),IkReal(((-0.03558996)+((x110*x111))+((x106*x107))+((x111*x115))+(((-1.0)*sj1*x106*x108))+(((0.1948)*x107))+(((-1.0)*x113*x115))+(((-1.0)*cj1*x105*x111))+((cj1*x105*x113))+(((-1.0)*x108*x112))+(((0.015)*x105*x109))+(((-0.0049329)*cj3))+(((-0.0027405)*sj3))+(((0.015)*sj3*x107))+((x105*x112))+((sj1*x105*x106))+(((-0.015)*x108*x109))+(((-0.027)*pz*x109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
CheckValue<IkReal> x118=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x118.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x117.value)+(((1.5707963267949)*(x118.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x119=IKcos(j2);
IkReal x120=IKsin(j2);
IkReal x121=(px*sj1);
IkReal x122=(cj1*sj0);
IkReal x123=(cj0*r00);
IkReal x124=(pz*sj1);
IkReal x125=(cj1*px);
IkReal x126=(cj1*py);
IkReal x127=((1.0)*cj0);
IkReal x128=(py*sj1);
IkReal x129=(r01*sj0);
IkReal x130=(cj1*pz);
IkReal x131=((0.1948)*x120);
IkReal x132=((0.1948)*x119);
IkReal x133=((0.027)*x119);
IkReal x134=((0.015)*x120);
IkReal x135=(r02*x127);
IkReal x136=((1.0)*py*r02);
IkReal x137=((0.027)*x120);
IkReal x138=((0.015)*x119);
IkReal x139=(cj3*x138);
IkReal x140=(sj3*x134);
IkReal x141=(cj3*x137);
IkReal x142=(sj3*x133);
IkReal x143=(sj3*x138);
IkReal x144=(cj3*x133);
IkReal x145=(cj3*x134);
IkReal x146=(sj3*x137);
IkReal x147=(x143+x144+x145+x132);
IkReal x148=(x140+x141+x142+x131);
evalcond[0]=((-0.1827)+(((-1.0)*x147))+x146+x130+(((-1.0)*x127*x128))+((sj0*x121)));
evalcond[1]=((((-1.0)*x148))+(((-1.0)*x126*x127))+((px*x122))+x139+(((-1.0)*x124)));
evalcond[2]=((((-1.0)*x148))+(((-1.0)*r02*sj0*x128))+x139+((r00*x126))+((x123*x124))+((x124*x129))+(((-1.0)*x121*x135))+(((-1.0)*r01*x125)));
evalcond[3]=((((-1.0)*x122*x136))+(((-1.0)*x146))+(((-0.1827)*x123))+(((-0.1827)*x129))+((r01*x121))+x147+((x123*x130))+(((-1.0)*r00*x128))+(((-1.0)*x125*x135))+((pz*r01*x122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x149=pz*pz;
IkReal x150=py*py;
IkReal x151=px*px;
CheckValue<IkReal> x171=IKPowWithIntegerCheck(cj4,-1);
if(!x171.valid){
continue;
}
IkReal x152=x171.value;
IkReal x153=(r01*sj4);
IkReal x154=((2466.45)*sj1);
IkReal x155=((8344.8225)*cj4);
IkReal x156=(cj0*r00);
IkReal x157=(r01*sj0);
IkReal x158=((91350.0)*cj4);
IkReal x159=(cj1*pz);
IkReal x160=(r00*sj0);
IkReal x161=((250000.0)*cj4);
IkReal x162=(r01*sj1);
IkReal x163=(py*r01);
IkReal x164=(pz*r02);
IkReal x165=((13500.0)*sj4);
IkReal x166=(px*r00);
IkReal x167=(cj1*r02);
IkReal x168=(cj0*px);
IkReal x169=((500000.0)*cj4);
IkReal x170=(py*x169);
CheckValue<IkReal> x172=IKPowWithIntegerCheck(sj4,-1);
if(!x172.valid){
continue;
}
if( IKabs(((0.000684462696783025)*x152*(x172.value)*((((x150*x156*x161))+(((-1.0)*cj0*x153*x154))+((x158*x167*x168))+(((-1.0)*px*x160*x170))+(((-1.0)*px*x158*x162))+((py*r00*sj1*x158))+(((-1.0)*x156*x158*x159))+(((-1.0)*sj0*x164*x170))+(((-1.0)*x157*x158*x159))+(((-1.0)*x151*x156*x161))+(((-9360.76)*cj4*sj4))+((x155*x157))+((x155*x156))+(((-13500.0)*py*x153))+((x149*x156*x161))+(((-1.0)*x164*x168*x169))+((py*sj0*x158*x167))+(((-1.0)*x150*x157*x161))+(((-1.0)*x163*x168*x169))+((sj4*x154*x160))+((x149*x157*x161))+(((-1.0)*x165*x166))+((x151*x157*x161))+(((2466.45)*sj4*x167))+(((-1.0)*x164*x165)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00205338809034908)*x152*(((((456.75)*cj0*x162))+(((-67.5)*cj4))+(((2500.0)*x163))+(((2500.0)*x166))+(((2500.0)*x164))+(((-456.75)*sj1*x160))+(((-456.75)*x167)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000684462696783025)*x152*(x172.value)*((((x150*x156*x161))+(((-1.0)*cj0*x153*x154))+((x158*x167*x168))+(((-1.0)*px*x160*x170))+(((-1.0)*px*x158*x162))+((py*r00*sj1*x158))+(((-1.0)*x156*x158*x159))+(((-1.0)*sj0*x164*x170))+(((-1.0)*x157*x158*x159))+(((-1.0)*x151*x156*x161))+(((-9360.76)*cj4*sj4))+((x155*x157))+((x155*x156))+(((-13500.0)*py*x153))+((x149*x156*x161))+(((-1.0)*x164*x168*x169))+((py*sj0*x158*x167))+(((-1.0)*x150*x157*x161))+(((-1.0)*x163*x168*x169))+((sj4*x154*x160))+((x149*x157*x161))+(((-1.0)*x165*x166))+((x151*x157*x161))+(((2466.45)*sj4*x167))+(((-1.0)*x164*x165))))))+IKsqr(((0.00205338809034908)*x152*(((((456.75)*cj0*x162))+(((-67.5)*cj4))+(((2500.0)*x163))+(((2500.0)*x166))+(((2500.0)*x164))+(((-456.75)*sj1*x160))+(((-456.75)*x167))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.000684462696783025)*x152*(x172.value)*((((x150*x156*x161))+(((-1.0)*cj0*x153*x154))+((x158*x167*x168))+(((-1.0)*px*x160*x170))+(((-1.0)*px*x158*x162))+((py*r00*sj1*x158))+(((-1.0)*x156*x158*x159))+(((-1.0)*sj0*x164*x170))+(((-1.0)*x157*x158*x159))+(((-1.0)*x151*x156*x161))+(((-9360.76)*cj4*sj4))+((x155*x157))+((x155*x156))+(((-13500.0)*py*x153))+((x149*x156*x161))+(((-1.0)*x164*x168*x169))+((py*sj0*x158*x167))+(((-1.0)*x150*x157*x161))+(((-1.0)*x163*x168*x169))+((sj4*x154*x160))+((x149*x157*x161))+(((-1.0)*x165*x166))+((x151*x157*x161))+(((2466.45)*sj4*x167))+(((-1.0)*x164*x165))))), ((0.00205338809034908)*x152*(((((456.75)*cj0*x162))+(((-67.5)*cj4))+(((2500.0)*x163))+(((2500.0)*x166))+(((2500.0)*x164))+(((-456.75)*sj1*x160))+(((-456.75)*x167))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x173=IKcos(j3);
IkReal x174=IKsin(j3);
IkReal x175=px*px;
IkReal x176=py*py;
IkReal x177=pz*pz;
IkReal x178=(cj0*sj1);
IkReal x179=((0.1827)*r01);
IkReal x180=((0.3654)*py);
IkReal x181=(cj0*cj1);
IkReal x182=((0.1827)*r02);
IkReal x183=(py*sj0);
IkReal x184=(cj0*px);
IkReal x185=(cj1*sj0);
IkReal x186=(r00*sj1);
IkReal x187=((1.0)*r01);
IkReal x188=(px*r00);
IkReal x189=((0.3654)*pz);
IkReal x190=(r01*sj0);
IkReal x191=(px*r02);
IkReal x192=((0.1948)*cj4);
IkReal x193=(cj0*r00);
IkReal x194=((1.0)*x193);
IkReal x195=((2.0)*pz*r02);
IkReal x196=((0.3654)*px*sj1);
IkReal x197=((0.005844)*x174);
IkReal x198=((0.0105192)*x173);
evalcond[0]=((((-1.0)*py*x187))+((x173*x192))+(((-1.0)*x188))+(((0.027)*cj4))+(((0.1827)*sj0*x186))+((cj1*x182))+(((-1.0)*pz*r02))+(((-1.0)*x178*x179)));
evalcond[1]=((0.00552175)+(((-1.0)*x178*x180))+((sj0*x196))+(((-1.0)*x177))+(((-1.0)*x176))+(((-1.0)*x175))+x198+x197+((cj1*x189)));
evalcond[2]=(((pz*r00*sj0))+((x179*x181))+((cj0*py*r02))+(((-0.1827)*r00*x185))+((sj1*x182))+(((-0.015)*cj4))+(((-1.0)*x174*x192))+(((-1.0)*cj0*pz*x187))+(((-1.0)*sj0*x191)));
evalcond[3]=(((x176*x190))+(((2.0)*py*r01*x184))+((r00*x181*x189))+(((-1.0)*sj0*x175*x187))+(((-0.3654)*x181*x191))+((r01*x196))+((x175*x193))+((x184*x195))+(((-1.0)*x180*x186))+(((0.03890104)*sj4))+((sj4*x197))+((sj4*x198))+(((-1.0)*x176*x194))+(((2.0)*x183*x188))+(((-1.0)*r02*x180*x185))+(((-1.0)*x177*x194))+(((-0.03337929)*x193))+(((-0.03337929)*x190))+(((-1.0)*sj0*x177*x187))+((r01*x185*x189))+((x183*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x199=(cj3*cj4);
j2eval[0]=((((-7.21481481481482)*x199))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x199))+(((-0.027)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x200=(cj4*sj3);
j2eval[0]=((((-12.9866666666667)*x200))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x200))+(((-0.015)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x201=(px*sj0);
IkReal x202=((0.027)*cj3);
IkReal x203=(cj1*pz);
IkReal x204=(cj0*py);
IkReal x205=(sj1*sj3);
IkReal x206=(pz*sj1);
IkReal x207=((0.015)*cj3);
IkReal x208=((0.1948)*sj1);
IkReal x209=((0.027)*sj3);
IkReal x210=((0.015)*cj1*sj3);
IkReal x211=(cj1*x204);
IkReal x212=(sj1*x207);
CheckValue<IkReal> x213 = IKatan2WithCheck(IkReal(((((-0.027)*x201*x205))+(((-0.1948)*x206))+((cj1*x201*x202))+(((-1.0)*x203*x209))+(((-0.0027405)*cj3))+(((-1.0)*x202*x206))+(((-1.0)*x204*x212))+(((-1.0)*x204*x210))+(((0.1948)*cj1*x201))+(((-0.1948)*x211))+(((0.027)*x204*x205))+((x203*x207))+(((0.0049329)*sj3))+(((-1.0)*x202*x211))+(((-0.015)*pz*x205))+((x201*x210))+((x201*x212)))),IkReal(((-0.03558996)+(((-1.0)*sj1*x202*x204))+(((-1.0)*x204*x208))+(((-0.015)*x204*x205))+((cj1*x201*x209))+(((0.015)*x201*x205))+((x201*x208))+((x207*x211))+(((0.015)*sj3*x203))+((sj1*x201*x202))+(((-0.0049329)*cj3))+((x202*x203))+(((-0.0027405)*sj3))+(((0.1948)*x203))+(((-1.0)*cj1*x201*x207))+(((-1.0)*x209*x211))+(((-0.027)*pz*x205))+((x206*x207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
CheckValue<IkReal> x214=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x214.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x213.value)+(((1.5707963267949)*(x214.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x215=IKcos(j2);
IkReal x216=IKsin(j2);
IkReal x217=(px*sj1);
IkReal x218=(cj1*sj0);
IkReal x219=(cj0*r00);
IkReal x220=(pz*sj1);
IkReal x221=(cj1*px);
IkReal x222=(cj1*py);
IkReal x223=((1.0)*cj0);
IkReal x224=(py*sj1);
IkReal x225=(r01*sj0);
IkReal x226=(cj1*pz);
IkReal x227=((0.1948)*x216);
IkReal x228=((0.1948)*x215);
IkReal x229=((0.027)*x215);
IkReal x230=((0.015)*x216);
IkReal x231=(r02*x223);
IkReal x232=((1.0)*py*r02);
IkReal x233=((0.027)*x216);
IkReal x234=((0.015)*x215);
IkReal x235=(sj3*x230);
IkReal x236=(cj3*x233);
IkReal x237=(sj3*x229);
IkReal x238=(cj3*x234);
IkReal x239=(sj3*x233);
IkReal x240=(sj3*x234);
IkReal x241=(cj3*x229);
IkReal x242=(cj3*x230);
IkReal x243=(x227+x236+x237+x235);
IkReal x244=(x228+x242+x241+x240);
evalcond[0]=((-0.1827)+x226+x239+(((-1.0)*x223*x224))+((sj0*x217))+(((-1.0)*x244)));
evalcond[1]=((((-1.0)*x222*x223))+x238+((px*x218))+(((-1.0)*x243))+(((-1.0)*x220)));
evalcond[2]=(((r00*x222))+((x219*x220))+(((-1.0)*x238))+x243+((x220*x225))+(((-1.0)*r02*sj0*x224))+(((-1.0)*x217*x231))+(((-1.0)*r01*x221)));
evalcond[3]=(((pz*r01*x218))+(((-0.1827)*x219))+(((-1.0)*x221*x231))+((x219*x226))+x239+(((-1.0)*x244))+((r01*x217))+(((-1.0)*x218*x232))+(((-1.0)*r00*x224))+(((-0.1827)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x245=(px*sj0);
IkReal x246=((0.027)*cj3);
IkReal x247=(cj1*pz);
IkReal x248=(cj0*py);
IkReal x249=(sj1*sj3);
IkReal x250=(pz*sj1);
IkReal x251=((0.015)*cj3);
IkReal x252=((0.1948)*sj1);
IkReal x253=((0.027)*sj3);
IkReal x254=((0.015)*cj1*sj3);
IkReal x255=(cj1*x248);
IkReal x256=(sj1*x251);
CheckValue<IkReal> x257 = IKatan2WithCheck(IkReal((((cj1*x245*x246))+((x245*x256))+((x245*x254))+(((-0.0027405)*cj3))+(((-1.0)*x246*x250))+(((-1.0)*x246*x255))+(((-1.0)*x247*x253))+(((-0.015)*pz*x249))+(((0.027)*x248*x249))+(((-1.0)*x248*x256))+(((-1.0)*x248*x254))+(((-0.1948)*x250))+(((-0.1948)*x255))+(((0.1948)*cj1*x245))+(((-0.027)*x245*x249))+(((0.0049329)*sj3))+((x247*x251)))),IkReal(((-0.03558996)+((x245*x252))+(((-0.015)*x248*x249))+(((0.015)*sj3*x247))+(((-1.0)*sj1*x246*x248))+(((-1.0)*cj1*x245*x251))+(((-0.027)*pz*x249))+((x251*x255))+(((0.1948)*x247))+((x250*x251))+((cj1*x245*x253))+(((-1.0)*x248*x252))+(((-0.0049329)*cj3))+(((0.015)*x245*x249))+(((-0.0027405)*sj3))+((sj1*x245*x246))+(((-1.0)*x253*x255))+((x246*x247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x258.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x257.value)+(((1.5707963267949)*(x258.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x259=IKcos(j2);
IkReal x260=IKsin(j2);
IkReal x261=(px*sj1);
IkReal x262=(cj1*sj0);
IkReal x263=(cj0*r00);
IkReal x264=(pz*sj1);
IkReal x265=(cj1*px);
IkReal x266=(cj1*py);
IkReal x267=((1.0)*cj0);
IkReal x268=(py*sj1);
IkReal x269=(r01*sj0);
IkReal x270=(cj1*pz);
IkReal x271=((0.1948)*x260);
IkReal x272=((0.1948)*x259);
IkReal x273=((0.027)*x259);
IkReal x274=((0.015)*x260);
IkReal x275=(r02*x267);
IkReal x276=((1.0)*py*r02);
IkReal x277=((0.027)*x260);
IkReal x278=((0.015)*x259);
IkReal x279=(cj3*x278);
IkReal x280=(sj3*x274);
IkReal x281=(cj3*x277);
IkReal x282=(sj3*x273);
IkReal x283=(sj3*x278);
IkReal x284=(cj3*x273);
IkReal x285=(cj3*x274);
IkReal x286=(sj3*x277);
IkReal x287=(x272+x285+x284+x283);
IkReal x288=(x271+x282+x281+x280);
evalcond[0]=((-0.1827)+x270+x286+(((-1.0)*x267*x268))+(((-1.0)*x287))+((sj0*x261)));
evalcond[1]=((((-1.0)*x264))+x279+(((-1.0)*x288))+(((-1.0)*x266*x267))+((px*x262)));
evalcond[2]=((((-1.0)*r02*sj0*x268))+((x264*x269))+((x263*x264))+x279+(((-1.0)*x261*x275))+(((-1.0)*r01*x265))+((r00*x266))+(((-1.0)*x288)));
evalcond[3]=((((-1.0)*x262*x276))+(((-0.1827)*x263))+(((-0.1827)*x269))+((x263*x270))+x287+(((-1.0)*r00*x268))+(((-1.0)*x265*x275))+(((-1.0)*x286))+((r01*x261))+((pz*r01*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x289=((0.348076515568243)*sj1);
IkReal x290=(cj0*py);
IkReal x291=(px*sj0);
IkReal x292=(cj1*pz);
IkReal x293=((4.50693249433931)*sj1);
IkReal x294=((0.348076515568243)*cj1);
IkReal x295=((4.50693249433931)*x291);
if( IKabs(((-0.063593579394318)+((x289*x291))+(((-1.0)*pz*x293))+(((-1.0)*x289*x290))+(((-4.50693249433931)*cj1*x290))+((cj1*x295))+(((0.348076515568243)*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.823416566715791)+((x291*x293))+((x290*x294))+(((-1.0)*x291*x294))+(((-1.0)*x290*x293))+(((4.50693249433931)*x292))+((pz*x289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.063593579394318)+((x289*x291))+(((-1.0)*pz*x293))+(((-1.0)*x289*x290))+(((-4.50693249433931)*cj1*x290))+((cj1*x295))+(((0.348076515568243)*x292))))+IKsqr(((-0.823416566715791)+((x291*x293))+((x290*x294))+(((-1.0)*x291*x294))+(((-1.0)*x290*x293))+(((4.50693249433931)*x292))+((pz*x289))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.063593579394318)+((x289*x291))+(((-1.0)*pz*x293))+(((-1.0)*x289*x290))+(((-4.50693249433931)*cj1*x290))+((cj1*x295))+(((0.348076515568243)*x292))), ((-0.823416566715791)+((x291*x293))+((x290*x294))+(((-1.0)*x291*x294))+(((-1.0)*x290*x293))+(((4.50693249433931)*x292))+((pz*x289))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x296=IKcos(j2);
IkReal x297=IKsin(j2);
IkReal x298=py*py;
IkReal x299=pz*pz;
IkReal x300=px*px;
IkReal x301=(py*r00);
IkReal x302=((1.0)*sj1);
IkReal x303=(r01*sj1);
IkReal x304=(cj1*r02);
IkReal x305=(cj0*pz);
IkReal x306=((2.0)*py);
IkReal x307=(cj1*sj0);
IkReal x308=(r00*sj1);
IkReal x309=(pz*r01);
IkReal x310=(pz*r02);
IkReal x311=(cj0*px);
IkReal x312=((2.0)*sj1);
IkReal x313=(px*sj0);
IkReal x314=(pz*sj0);
IkReal x315=((0.3654)*r00);
IkReal x316=(cj0*r01);
IkReal x317=((1.0)*cj1);
IkReal x318=(px*r01);
IkReal x319=((2.0)*cj1);
IkReal x320=((0.3654)*r02);
IkReal x321=((0.3654)*r01);
IkReal x322=(py*sj0);
IkReal x323=(cj0*py);
IkReal x324=((0.22056480436)*sj4);
IkReal x325=(r02*sj1);
IkReal x326=(px*pz);
IkReal x327=(cj4*x296);
IkReal x328=((0.0170345193)*x297);
IkReal x329=(cj4*x297);
IkReal x330=((1.0)*x299);
IkReal x331=(cj1*x316);
IkReal x332=((0.0170345193)*x296);
IkReal x333=(r00*x300);
evalcond[0]=((-0.1827)+(((-1.0)*x328))+((sj1*x313))+((cj1*pz))+(((-0.22056480436)*x296))+(((-1.0)*x302*x323)));
evalcond[1]=(((px*x307))+(((-1.0)*x317*x323))+x332+(((-1.0)*pz*x302))+(((-0.22056480436)*x297)));
evalcond[2]=((((-1.0)*x302*x316))+(((-0.07700205)*x329))+x304+(((-0.99703093)*x327))+((sj0*x308)));
evalcond[3]=((((-1.0)*r02*x302))+(((-0.99703093)*x329))+(((0.07700205)*x327))+((r00*x307))+(((-1.0)*x316*x317)));
evalcond[4]=(((cj1*x301))+(((-1.0)*sj4*x332))+(((-1.0)*r02*x302*x311))+((x297*x324))+(((-1.0)*r02*x302*x322))+((x305*x308))+((x303*x314))+(((-1.0)*x317*x318)));
evalcond[5]=((((-1.0)*x301*x302))+(((-1.0)*x304*x311))+((px*x303))+(((-0.1827)*cj0*r00))+(((-1.0)*x304*x322))+(((-1.0)*x296*x324))+((cj1*r00*x305))+(((-1.0)*sj4*x328))+((x307*x309))+(((-0.1827)*r01*sj0)));
evalcond[6]=((((-1.0)*r00*x319*x326))+(((-1.0)*x310*x312*x313))+(((-1.0)*x303*x306*x313))+((x305*x306*x325))+(((-0.03337929)*x304))+((x301*x311*x312))+(((-1.0)*sj0*x302*x333))+(((-1.0)*cj1*x306*x309))+((py*x321))+((x298*x304))+(((0.03337929)*cj0*x303))+(((-0.03337929)*sj0*x308))+(((-1.0)*x304*x330))+(((0.3654)*x310))+(((-1.0)*x299*x302*x316))+((px*x315))+(((0.0487937045101672)*x327))+((sj0*x299*x308))+(((0.003768404215068)*x329))+((cj0*x298*x303))+((x300*x304))+((sj0*x298*x308))+(((-1.0)*x300*x302*x316)));
evalcond[7]=((((-2.0)*pz*x304*x313))+(((0.03337929)*r00*x307))+(((2.0)*x308*x326))+(((-1.0)*x299*x316*x317))+(((-1.0)*r02*x300*x302))+((x301*x311*x319))+((x313*x320))+((x305*x321))+(((-1.0)*x307*x333))+(((-0.03337929)*x331))+(((-1.0)*x320*x323))+(((-1.0)*r02*x298*x302))+(((-0.003768404215068)*x327))+((pz*x303*x306))+((x298*x331))+((x299*x325))+(((-1.0)*x314*x315))+(((0.0487937045101672)*x329))+((r00*x299*x307))+(((-1.0)*x300*x316*x317))+(((-1.0)*x306*x307*x318))+((r00*x298*x307))+((x304*x305*x306))+(((-0.03337929)*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x334=((5.9623324874641)*pz);
IkReal x335=(cj0*py);
IkReal x336=((0.460479037630733)*cj1);
IkReal x337=((0.460479037630733)*sj1);
IkReal x338=((5.9623324874641)*sj1);
IkReal x339=(px*sj0);
IkReal x340=((5.9623324874641)*cj1);
if( IKabs(((0.084129520175135)+(((-1.0)*x337*x339))+(((-1.0)*x335*x340))+((x335*x337))+(((-1.0)*pz*x336))+((x339*x340))+(((-1.0)*sj1*x334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.08931814545969)+((x336*x339))+((cj1*x334))+((x338*x339))+(((-1.0)*pz*x337))+(((-1.0)*x335*x336))+(((-1.0)*x335*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.084129520175135)+(((-1.0)*x337*x339))+(((-1.0)*x335*x340))+((x335*x337))+(((-1.0)*pz*x336))+((x339*x340))+(((-1.0)*sj1*x334))))+IKsqr(((-1.08931814545969)+((x336*x339))+((cj1*x334))+((x338*x339))+(((-1.0)*pz*x337))+(((-1.0)*x335*x336))+(((-1.0)*x335*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.084129520175135)+(((-1.0)*x337*x339))+(((-1.0)*x335*x340))+((x335*x337))+(((-1.0)*pz*x336))+((x339*x340))+(((-1.0)*sj1*x334))), ((-1.08931814545969)+((x336*x339))+((cj1*x334))+((x338*x339))+(((-1.0)*pz*x337))+(((-1.0)*x335*x336))+(((-1.0)*x335*x338))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x341=IKsin(j2);
IkReal x342=IKcos(j2);
IkReal x343=py*py;
IkReal x344=pz*pz;
IkReal x345=px*px;
IkReal x346=(cj1*r02);
IkReal x347=((2.0)*py);
IkReal x348=(cj1*sj0);
IkReal x349=(cj0*pz);
IkReal x350=(r00*sj1);
IkReal x351=(pz*r01);
IkReal x352=(cj0*r01);
IkReal x353=(pz*r02);
IkReal x354=(cj0*r00);
IkReal x355=(cj0*px);
IkReal x356=(sj0*sj1);
IkReal x357=((2.0)*px);
IkReal x358=((1.0)*sj1);
IkReal x359=((0.3654)*sj0);
IkReal x360=(pz*r00);
IkReal x361=(cj1*px);
IkReal x362=((0.3654)*r01);
IkReal x363=((1.0)*cj1);
IkReal x364=(py*sj0);
IkReal x365=(cj0*py);
IkReal x366=(cj1*r00);
IkReal x367=(r02*sj1);
IkReal x368=((0.16672513414)*x341);
IkReal x369=(cj4*x342);
IkReal x370=(px*r01*sj1);
IkReal x371=((0.0128764086)*x342);
IkReal x372=((0.16672513414)*x342);
IkReal x373=((1.0)*x344);
IkReal x374=(r02*x358);
IkReal x375=(cj4*x341);
IkReal x376=((1.0)*x345);
IkReal x377=((0.0128764086)*x341);
evalcond[0]=((-0.1827)+((px*x356))+(((-1.0)*x372))+(((-1.0)*x358*x365))+((cj1*pz))+x377);
evalcond[1]=((((-1.0)*x363*x365))+(((-1.0)*x368))+(((-1.0)*x371))+(((-1.0)*pz*x358))+((px*x348)));
evalcond[2]=((((-0.07700205)*x375))+x346+((sj0*x350))+(((0.99703093)*x369))+(((-1.0)*x352*x358)));
evalcond[3]=(((r00*x348))+(((-1.0)*x374))+(((-1.0)*x352*x363))+(((0.99703093)*x375))+(((0.07700205)*x369)));
evalcond[4]=(((sj4*x371))+((sj4*x368))+(((-1.0)*x355*x374))+(((-1.0)*py*r02*x356))+(((-1.0)*r01*x361))+((x351*x356))+((py*x366))+((x349*x350)));
evalcond[5]=((((-1.0)*x346*x364))+(((-0.1827)*x354))+((sj4*x377))+(((-1.0)*py*x350))+(((-1.0)*sj4*x372))+(((-1.0)*x346*x355))+x370+((x348*x351))+((x349*x366))+(((-0.1827)*r01*sj0)));
evalcond[6]=((((-1.0)*sj0*x350*x376))+(((-0.03337929)*sj0*x350))+(((-1.0)*cj1*x357*x360))+(((-0.0278800478311672)*x369))+(((0.03337929)*sj1*x352))+((sj1*x343*x352))+(((-1.0)*px*r01*x347*x356))+(((-0.03337929)*x346))+(((0.3654)*x353))+((x345*x346))+((py*x362))+((x347*x349*x367))+(((0.3654)*px*r00))+((sj0*x343*x350))+((x347*x350*x355))+(((-1.0)*x353*x356*x357))+((sj0*x344*x350))+(((-1.0)*cj1*x347*x351))+((x343*x346))+(((0.002153214108468)*x375))+(((-1.0)*x344*x352*x358))+(((-1.0)*x346*x373))+(((-1.0)*x345*x352*x358)));
evalcond[7]=(((cj1*x343*x352))+((px*r02*x359))+(((-1.0)*x345*x374))+((r00*x344*x348))+(((-0.0278800478311672)*x375))+(((-1.0)*px*r01*x347*x348))+((x347*x354*x361))+((r00*x343*x348))+(((-0.3654)*r02*x365))+((x344*x367))+(((0.03337929)*r00*x348))+((sj1*x347*x351))+(((-1.0)*x343*x374))+(((-1.0)*r00*x348*x376))+((pz*x350*x357))+(((-1.0)*x345*x352*x363))+(((-1.0)*x359*x360))+((x346*x347*x349))+(((-1.0)*x344*x352*x363))+((x349*x362))+(((-0.002153214108468)*x369))+(((-0.03337929)*cj1*x352))+(((-0.03337929)*x367))+(((-1.0)*pz*sj0*x346*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((0.138603696098563)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x378=((4.76312520699347)*cj1);
IkReal x379=(cj0*py);
IkReal x380=(px*sj0);
IkReal x381=((0.666621037898606)*sj1);
IkReal x382=((0.666621037898606)*cj1);
IkReal x383=((4.76312520699347)*sj1);
if( IKabs(((0.121791663624075)+((x378*x380))+(((-1.0)*x380*x381))+(((-1.0)*x378*x379))+((x379*x381))+(((-1.0)*pz*x383))+(((-1.0)*pz*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.870222975317707)+(((-1.0)*x379*x383))+(((-1.0)*x379*x382))+((pz*x378))+((x380*x383))+((x380*x382))+(((-1.0)*pz*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.121791663624075)+((x378*x380))+(((-1.0)*x380*x381))+(((-1.0)*x378*x379))+((x379*x381))+(((-1.0)*pz*x383))+(((-1.0)*pz*x382))))+IKsqr(((-0.870222975317707)+(((-1.0)*x379*x383))+(((-1.0)*x379*x382))+((pz*x378))+((x380*x383))+((x380*x382))+(((-1.0)*pz*x381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.121791663624075)+((x378*x380))+(((-1.0)*x380*x381))+(((-1.0)*x378*x379))+((x379*x381))+(((-1.0)*pz*x383))+(((-1.0)*pz*x382))), ((-0.870222975317707)+(((-1.0)*x379*x383))+(((-1.0)*x379*x382))+((pz*x378))+((x380*x383))+((x380*x382))+(((-1.0)*pz*x381))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x384=IKsin(j2);
IkReal x385=IKcos(j2);
IkReal x386=py*py;
IkReal x387=pz*pz;
IkReal x388=px*px;
IkReal x389=(sj0*sj1);
IkReal x390=(px*r01);
IkReal x391=((2.0)*py);
IkReal x392=(cj1*sj0);
IkReal x393=(pz*r01);
IkReal x394=(cj0*r01);
IkReal x395=((1.0)*sj1);
IkReal x396=((2.0)*pz);
IkReal x397=((0.3654)*r02);
IkReal x398=(pz*r00);
IkReal x399=(cj0*r00);
IkReal x400=((0.03337929)*r00);
IkReal x401=((0.03337929)*sj1);
IkReal x402=(px*r02);
IkReal x403=((0.0288184496213779)*sj4);
IkReal x404=((0.03337929)*cj1);
IkReal x405=((1.0)*cj1);
IkReal x406=(cj1*px);
IkReal x407=(cj0*py);
IkReal x408=(py*r00);
IkReal x409=(px*r00);
IkReal x410=(r02*x407);
IkReal x411=((0.205912919056321)*x384);
IkReal x412=(r02*x386);
IkReal x413=(sj1*x399);
IkReal x414=(cj4*x384);
IkReal x415=(cj4*x385);
IkReal x416=(r02*x388);
IkReal x417=(r00*x387);
IkReal x418=(r00*x386);
IkReal x419=((0.205912919056321)*x385);
IkReal x420=((1.0)*py*r02);
IkReal x421=((1.0)*r00*x388);
IkReal x422=(x387*x405);
evalcond[0]=((-0.1827)+((px*x389))+(((-1.0)*x395*x407))+(((0.0288184496213779)*x384))+((cj1*pz))+(((-1.0)*x419)));
evalcond[1]=((((-1.0)*pz*x395))+((px*x392))+(((-1.0)*x405*x407))+(((-0.0288184496213779)*x385))+(((-1.0)*x411)));
evalcond[2]=((((0.990347930421403)*x414))+(((-1.0)*x394*x395))+((cj1*r02))+(((0.1386037)*x415))+((r00*x389)));
evalcond[3]=(((r00*x392))+(((-1.0)*r02*x395))+(((-1.0)*x394*x405))+(((-0.990347930421403)*x415))+(((0.1386037)*x414)));
evalcond[4]=(((cj0*sj1*x398))+(((-1.0)*cj0*x395*x402))+(((-1.0)*x389*x420))+((cj1*x408))+((x389*x393))+((x385*x403))+((sj4*x411))+(((-1.0)*x390*x405)));
evalcond[5]=((((-1.0)*x392*x420))+((sj1*x390))+((x384*x403))+(((-1.0)*x395*x408))+(((-1.0)*sj4*x419))+(((-0.1827)*x399))+(((-1.0)*cj0*x402*x405))+((cj0*cj1*x398))+(((-0.1827)*r01*sj0))+((x392*x393)));
evalcond[6]=(((px*x391*x413))+(((-1.0)*x388*x394*x395))+(((0.3654)*x409))+((cj0*pz*r02*sj1*x391))+(((-1.0)*r02*x404))+(((-1.0)*x389*x396*x402))+((x389*x417))+((x389*x418))+((pz*x397))+(((-1.0)*r02*x422))+(((0.0428133681756858)*x414))+(((0.00599192541079334)*x415))+(((-1.0)*r00*x396*x406))+(((-1.0)*x389*x400))+(((-1.0)*x389*x421))+(((-1.0)*cj1*x391*x393))+(((-1.0)*x389*x390*x391))+(((-1.0)*x387*x394*x395))+((x394*x401))+(((0.3654)*py*r01))+((sj1*x386*x394))+((cj1*x412))+((cj1*x416)));
evalcond[7]=((((0.3654)*cj0*x393))+((r02*sj1*x387))+(((-1.0)*x392*x421))+((x392*x418))+((x392*x417))+(((-1.0)*x388*x394*x405))+((x392*x400))+(((-1.0)*x395*x412))+(((-1.0)*x395*x416))+(((-1.0)*x394*x422))+(((-1.0)*r02*x401))+((cj1*x386*x394))+(((-1.0)*x390*x391*x392))+(((-1.0)*x394*x404))+((x391*x399*x406))+((cj0*cj1*pz*r02*x391))+(((-0.0428133681756858)*x415))+((sj1*x391*x393))+(((-1.0)*x392*x396*x402))+((px*sj0*x397))+(((0.00599192541079334)*x414))+(((-1.0)*x397*x407))+((sj1*x396*x409))+(((-0.3654)*sj0*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.138603696098563)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x423=((0.779023555870258)*pz);
IkReal x424=((5.56626109321613)*cj1);
IkReal x425=(cj0*py);
IkReal x426=(sj1*x425);
IkReal x427=((5.56626109321613)*px*sj0);
IkReal x428=((0.779023555870258)*px*sj0);
if( IKabs(((-0.142327603657496)+((px*sj0*x424))+(((-1.0)*x424*x425))+(((-5.56626109321613)*pz*sj1))+((sj1*x428))+((cj1*x423))+(((-0.779023555870258)*x426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01695590173059)+(((-1.0)*cj1*x428))+((pz*x424))+(((0.779023555870258)*cj1*x425))+((sj1*x423))+((sj1*x427))+(((-5.56626109321613)*x426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.142327603657496)+((px*sj0*x424))+(((-1.0)*x424*x425))+(((-5.56626109321613)*pz*sj1))+((sj1*x428))+((cj1*x423))+(((-0.779023555870258)*x426))))+IKsqr(((-1.01695590173059)+(((-1.0)*cj1*x428))+((pz*x424))+(((0.779023555870258)*cj1*x425))+((sj1*x423))+((sj1*x427))+(((-5.56626109321613)*x426))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.142327603657496)+((px*sj0*x424))+(((-1.0)*x424*x425))+(((-5.56626109321613)*pz*sj1))+((sj1*x428))+((cj1*x423))+(((-0.779023555870258)*x426))), ((-1.01695590173059)+(((-1.0)*cj1*x428))+((pz*x424))+(((0.779023555870258)*cj1*x425))+((sj1*x423))+((sj1*x427))+(((-5.56626109321613)*x426))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x429=IKcos(j2);
IkReal x430=IKsin(j2);
IkReal x431=py*py;
IkReal x432=pz*pz;
IkReal x433=px*px;
IkReal x434=(px*sj1);
IkReal x435=(pz*r00);
IkReal x436=((1.0)*sj1);
IkReal x437=(r00*sj0);
IkReal x438=(r01*sj0);
IkReal x439=(cj1*pz);
IkReal x440=((2.0)*py);
IkReal x441=(px*sj0);
IkReal x442=(cj0*sj1);
IkReal x443=((1.0)*cj0);
IkReal x444=(cj0*r02);
IkReal x445=((0.3654)*r02);
IkReal x446=(pz*r01);
IkReal x447=(cj0*r00);
IkReal x448=((0.03337929)*cj1);
IkReal x449=((1.0)*r02);
IkReal x450=(cj0*cj1);
IkReal x451=(r02*sj0);
IkReal x452=(cj0*r01);
IkReal x453=(cj1*px);
IkReal x454=((0.3654)*py);
IkReal x455=(cj1*py);
IkReal x456=((0.03337929)*sj1);
IkReal x457=(r02*x431);
IkReal x458=((0.176202481143679)*x430);
IkReal x459=(cj1*x432);
IkReal x460=(cj4*x430);
IkReal x461=(r01*x431);
IkReal x462=(cj4*x429);
IkReal x463=(r02*x433);
IkReal x464=((0.176202481143679)*x429);
IkReal x465=((0.0246603386213779)*x430);
IkReal x466=(cj1*x433);
IkReal x467=(sj1*x432);
IkReal x468=((0.0246603386213779)*x429);
evalcond[0]=((-0.1827)+((sj0*x434))+(((-1.0)*x465))+(((-1.0)*x464))+(((-1.0)*cj0*py*x436))+x439);
evalcond[1]=((((-1.0)*x443*x455))+((cj1*x441))+(((-1.0)*x458))+x468+(((-1.0)*pz*x436)));
evalcond[2]=((((-0.990347930421403)*x460))+((cj1*r02))+(((-1.0)*x436*x452))+(((0.1386037)*x462))+((sj1*x437)));
evalcond[3]=(((cj1*x437))+(((0.1386037)*x460))+(((-1.0)*r02*x436))+(((0.990347930421403)*x462))+(((-1.0)*cj1*r01*x443)));
evalcond[4]=(((x435*x442))+(((-1.0)*sj4*x468))+(((-1.0)*r02*x434*x443))+((sj4*x458))+(((-1.0)*r01*x453))+((r00*x455))+((pz*sj1*x438))+(((-1.0)*py*x436*x451)));
evalcond[5]=((((-1.0)*sj0*x449*x455))+(((-1.0)*sj4*x464))+(((-1.0)*sj4*x465))+(((-0.1827)*x438))+(((-0.1827)*x447))+(((-1.0)*r02*x443*x453))+((r01*x434))+(((-1.0)*py*r00*x436))+((x435*x450))+((x438*x439)));
evalcond[6]=((((0.03337929)*r01*x442))+((pz*r02*x440*x442))+((x437*x467))+(((-1.0)*x433*x436*x437))+(((-1.0)*r01*x439*x440))+(((-1.0)*x437*x456))+(((-1.0)*x434*x438*x440))+(((-2.0)*pz*x434*x451))+(((-1.0)*x432*x436*x452))+((cj1*x457))+((cj1*x463))+((sj1*x431*x437))+((pz*x445))+(((-1.0)*r02*x448))+(((-2.0)*x435*x453))+(((0.3654)*px*r00))+((x442*x461))+(((-1.0)*x433*x436*x452))+((x434*x440*x447))+(((0.00438756176351066)*x462))+((r01*x454))+(((-0.0313499061696858)*x460))+(((-1.0)*x449*x459)));
evalcond[7]=((((0.0313499061696858)*x462))+(((2.0)*x434*x435))+(((0.3654)*cj0*x446))+(((-1.0)*x437*x466))+(((-1.0)*x438*x440*x453))+((x440*x447*x453))+(((-1.0)*x436*x457))+((x441*x445))+((r02*x467))+(((-1.0)*x436*x463))+((cj1*x431*x437))+(((-2.0)*r02*x439*x441))+((sj1*x440*x446))+(((-1.0)*r01*x443*x459))+((x450*x461))+((x439*x440*x444))+(((-1.0)*r01*x443*x466))+(((-0.3654)*sj0*x435))+(((-1.0)*r02*x456))+(((0.00438756176351066)*x460))+((x437*x448))+(((-1.0)*x444*x454))+(((-1.0)*x448*x452))+((x437*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x469=((0.015)*cj3);
IkReal x470=((0.027)*sj3);
IkReal x471=(cj0*py);
IkReal x472=(cj1*r02);
IkReal x473=((0.015)*sj3);
IkReal x474=((0.027)*cj3);
IkReal x475=((0.1827)*cj4);
IkReal x476=(cj4*sj3);
IkReal x477=(sj3*x472);
IkReal x478=(cj0*r01*sj1);
IkReal x479=(cj3*cj4*sj1);
IkReal x480=(r00*sj0*sj1);
IkReal x481=((1.0)*px*sj0);
IkReal x482=(sj1*x476);
IkReal x483=((1.0)*cj1*pz);
CheckValue<IkReal> x484 = IKatan2WithCheck(IkReal(((((-0.1948)*x478))+((x471*x479))+(((0.1948)*x480))+((x472*x474))+((x472*x473))+((cj3*x475))+(((-1.0)*x473*x478))+(((0.1948)*x472))+((x474*x480))+(((-1.0)*x479*x481))+(((-1.0)*x474*x478))+((x473*x480))+(((-1.0)*cj3*cj4*x483)))),IkReal((((x471*x482))+(((-1.0)*x476*x483))+((x469*x478))+((x470*x472))+(((-1.0)*x469*x472))+((x470*x480))+(((-1.0)*x469*x480))+(((-1.0)*x481*x482))+(((-1.0)*x470*x478))+((sj3*x475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x476))+(((-0.015)*cj4)))),-1);
if(!x485.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x484.value)+(((1.5707963267949)*(x485.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x486=IKcos(j2);
IkReal x487=IKsin(j2);
IkReal x488=py*py;
IkReal x489=pz*pz;
IkReal x490=px*px;
IkReal x491=(r01*sj0);
IkReal x492=(cj0*r00);
IkReal x493=(pz*sj1);
IkReal x494=(cj1*pz);
IkReal x495=((1.0)*r02);
IkReal x496=(pz*r01);
IkReal x497=(cj0*px);
IkReal x498=((0.015)*sj4);
IkReal x499=((1.0)*r01);
IkReal x500=((1.0)*cj4);
IkReal x501=(cj1*px);
IkReal x502=((0.027)*sj4);
IkReal x503=(r00*sj0);
IkReal x504=((0.00081)*cj4);
IkReal x505=((0.005844)*cj4);
IkReal x506=((2.0)*py);
IkReal x507=((0.03337929)*cj1);
IkReal x508=(cj0*r01);
IkReal x509=((0.03337929)*sj1);
IkReal x510=((0.03845104)*cj4);
IkReal x511=(cj1*py);
IkReal x512=((1.0)*cj0);
IkReal x513=(cj0*r02);
IkReal x514=(py*sj1);
IkReal x515=((0.0105192)*cj4);
IkReal x516=(px*sj1);
IkReal x517=((0.3654)*py);
IkReal x518=((0.03744304)*cj4);
IkReal x519=((0.3654)*pz);
IkReal x520=(px*r00);
IkReal x521=(sj1*x506);
IkReal x522=(cj3*x486);
IkReal x523=(cj3*x487);
IkReal x524=(px*r02*sj0);
IkReal x525=(sj1*x490);
IkReal x526=((0.1948)*x486);
IkReal x527=(sj3*x487);
IkReal x528=(sj3*x486);
IkReal x529=(cj1*x489);
IkReal x530=(cj1*x490);
IkReal x531=(sj1*x488);
IkReal x532=((0.1948)*x487);
IkReal x533=(sj1*x489);
IkReal x534=(cj1*x488);
evalcond[0]=((((-1.0)*cj0*sj1*x499))+((cj4*x527))+(((-1.0)*x500*x522))+((sj1*x503))+((cj1*r02)));
evalcond[1]=((((-1.0)*x500*x528))+(((-1.0)*x500*x523))+((cj1*x503))+(((-1.0)*sj1*x495))+(((-1.0)*cj0*cj1*x499)));
evalcond[2]=((-0.1827)+(((-0.027)*x522))+(((-1.0)*x526))+(((-1.0)*x512*x514))+x494+(((0.027)*x527))+((sj0*x516))+(((-0.015)*x523))+(((-0.015)*x528)));
evalcond[3]=((((-1.0)*x511*x512))+(((-0.027)*x523))+(((-0.027)*x528))+((sj0*x501))+(((-1.0)*x532))+(((0.015)*x522))+(((-1.0)*x493))+(((-0.015)*x527)));
evalcond[4]=((((-1.0)*x499*x501))+((x491*x493))+(((-1.0)*sj1*x495*x497))+(((-1.0)*sj0*x495*x514))+((x502*x528))+((x502*x523))+(((-1.0)*x498*x522))+((x498*x527))+((sj4*x532))+((r00*x511))+((x492*x493)));
evalcond[5]=(((r01*x516))+((x491*x494))+(((-1.0)*sj4*x526))+(((-1.0)*sj0*x495*x511))+(((-1.0)*x502*x522))+(((-1.0)*cj1*x495*x497))+((x502*x527))+(((-1.0)*x498*x528))+(((-1.0)*x498*x523))+(((-0.1827)*x491))+(((-0.1827)*x492))+((x492*x494))+(((-1.0)*r00*x514)));
evalcond[6]=(((r01*x517))+(((-1.0)*x495*x529))+((r02*x530))+((r02*x534))+((x486*x515))+((x493*x506*x513))+(((-1.0)*x491*x506*x516))+((x508*x509))+((x492*x506*x516))+((x504*x523))+((x504*x528))+(((-1.0)*x503*x525))+((x487*x505))+(((-1.0)*cj0*x499*x525))+(((-1.0)*x503*x509))+((x518*x527))+((x503*x533))+((x503*x531))+((x508*x531))+(((-1.0)*cj0*x499*x533))+((r02*x519))+(((-2.0)*x494*x520))+((x510*x522))+(((0.3654)*x520))+(((-2.0)*x493*x524))+(((-1.0)*r01*x494*x506))+(((-1.0)*r02*x507)));
evalcond[7]=((((-1.0)*x495*x525))+((x487*x515))+((r02*x533))+((r01*x493*x506))+(((0.3654)*cj0*x496))+((x492*x501*x506))+(((-1.0)*x503*x519))+(((2.0)*x493*x520))+(((-1.0)*x504*x522))+(((-1.0)*x507*x508))+(((-1.0)*x513*x517))+(((-1.0)*x491*x501*x506))+((x504*x527))+(((-1.0)*cj0*x499*x529))+((x503*x534))+(((-1.0)*x503*x530))+((x508*x534))+((x503*x529))+(((-1.0)*cj0*x499*x530))+(((-1.0)*x518*x528))+((x503*x507))+(((-2.0)*x494*x524))+((x510*x523))+(((0.3654)*x524))+(((-1.0)*x486*x505))+((x494*x506*x513))+(((-1.0)*x495*x531))+(((-1.0)*r02*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x535=((0.015)*cj3);
IkReal x536=((0.027)*sj3);
IkReal x537=(cj0*py);
IkReal x538=(cj1*r02);
IkReal x539=((0.015)*sj3);
IkReal x540=((0.027)*cj3);
IkReal x541=(cj4*sj3);
IkReal x542=(pz*sj1);
IkReal x543=(cj3*cj4);
IkReal x544=(sj3*x538);
IkReal x545=(cj0*r01*sj1);
IkReal x546=(r00*sj0*sj1);
IkReal x547=(cj1*x543);
IkReal x548=((1.0)*px*sj0);
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal((((x542*x543))+((x536*x546))+((x536*x538))+((x537*x547))+(((-1.0)*x547*x548))+(((-1.0)*x535*x546))+((x535*x545))+(((-1.0)*x535*x538))+(((-1.0)*x536*x545)))),IkReal((((x539*x545))+((cj1*x537*x541))+((x541*x542))+(((-1.0)*cj1*x541*x548))+(((-1.0)*x539*x546))+(((-1.0)*x538*x539))+(((-1.0)*x538*x540))+((x540*x545))+(((-1.0)*x540*x546))+(((-0.1948)*x546))+(((-0.1948)*x538))+(((0.1948)*x545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x543))+(((-0.027)*cj4)))),-1);
if(!x550.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x549.value)+(((1.5707963267949)*(x550.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x551=IKcos(j2);
IkReal x552=IKsin(j2);
IkReal x553=py*py;
IkReal x554=pz*pz;
IkReal x555=px*px;
IkReal x556=(r01*sj0);
IkReal x557=(cj0*r00);
IkReal x558=(pz*sj1);
IkReal x559=(cj1*pz);
IkReal x560=((1.0)*r02);
IkReal x561=(pz*r01);
IkReal x562=(cj0*px);
IkReal x563=((0.015)*sj4);
IkReal x564=((1.0)*r01);
IkReal x565=((1.0)*cj4);
IkReal x566=(cj1*px);
IkReal x567=((0.027)*sj4);
IkReal x568=(r00*sj0);
IkReal x569=((0.00081)*cj4);
IkReal x570=((0.005844)*cj4);
IkReal x571=((2.0)*py);
IkReal x572=((0.03337929)*cj1);
IkReal x573=(cj0*r01);
IkReal x574=((0.03337929)*sj1);
IkReal x575=((0.03845104)*cj4);
IkReal x576=(cj1*py);
IkReal x577=((1.0)*cj0);
IkReal x578=(cj0*r02);
IkReal x579=(py*sj1);
IkReal x580=((0.0105192)*cj4);
IkReal x581=(px*sj1);
IkReal x582=((0.3654)*py);
IkReal x583=((0.03744304)*cj4);
IkReal x584=((0.3654)*pz);
IkReal x585=(px*r00);
IkReal x586=(sj1*x571);
IkReal x587=(cj3*x551);
IkReal x588=(cj3*x552);
IkReal x589=(px*r02*sj0);
IkReal x590=(sj1*x555);
IkReal x591=((0.1948)*x551);
IkReal x592=(sj3*x552);
IkReal x593=(sj3*x551);
IkReal x594=(cj1*x554);
IkReal x595=(cj1*x555);
IkReal x596=(sj1*x553);
IkReal x597=((0.1948)*x552);
IkReal x598=(sj1*x554);
IkReal x599=(cj1*x553);
evalcond[0]=(((cj1*r02))+(((-1.0)*cj0*sj1*x564))+((sj1*x568))+(((-1.0)*x565*x587))+((cj4*x592)));
evalcond[1]=(((cj1*x568))+(((-1.0)*x565*x593))+(((-1.0)*cj0*cj1*x564))+(((-1.0)*x565*x588))+(((-1.0)*sj1*x560)));
evalcond[2]=((-0.1827)+((sj0*x581))+(((-0.015)*x588))+(((-0.027)*x587))+(((-1.0)*x577*x579))+(((0.027)*x592))+(((-1.0)*x591))+x559+(((-0.015)*x593)));
evalcond[3]=((((-1.0)*x558))+(((-0.027)*x588))+(((-1.0)*x576*x577))+(((-1.0)*x597))+((sj0*x566))+(((-0.027)*x593))+(((0.015)*x587))+(((-0.015)*x592)));
evalcond[4]=((((-1.0)*x564*x566))+((r00*x576))+((x567*x588))+((x557*x558))+(((-1.0)*sj1*x560*x562))+(((-1.0)*x563*x587))+(((-1.0)*sj0*x560*x579))+((sj4*x597))+((x567*x593))+((x556*x558))+((x563*x592)));
evalcond[5]=((((-1.0)*r00*x579))+(((-1.0)*x563*x593))+((x557*x559))+(((-1.0)*x563*x588))+(((-1.0)*sj0*x560*x576))+(((-1.0)*cj1*x560*x562))+(((-1.0)*sj4*x591))+((r01*x581))+(((-0.1827)*x557))+(((-0.1827)*x556))+((x567*x592))+((x556*x559))+(((-1.0)*x567*x587)));
evalcond[6]=(((x573*x596))+(((-1.0)*r01*x559*x571))+(((-1.0)*x560*x594))+(((-2.0)*x558*x589))+((r02*x584))+(((0.3654)*x585))+(((-1.0)*x568*x590))+((x569*x593))+((x573*x574))+((x568*x598))+((x568*x596))+((x575*x587))+((r02*x595))+((r02*x599))+((x558*x571*x578))+(((-1.0)*cj0*x564*x590))+(((-1.0)*cj0*x564*x598))+((x583*x592))+((r01*x582))+((x569*x588))+(((-2.0)*x559*x585))+((x557*x571*x581))+((x552*x570))+(((-1.0)*x568*x574))+(((-1.0)*r02*x572))+(((-1.0)*x556*x571*x581))+((x551*x580)));
evalcond[7]=(((x573*x599))+(((-1.0)*x560*x596))+(((-1.0)*x560*x590))+((r01*x558*x571))+(((0.3654)*x589))+(((-1.0)*x578*x582))+(((2.0)*x558*x585))+(((-1.0)*x568*x595))+((x552*x580))+((x569*x592))+(((-1.0)*x568*x584))+((x568*x599))+((x568*x594))+((x575*x588))+((r02*x598))+(((-1.0)*cj0*x564*x595))+(((-1.0)*cj0*x564*x594))+(((-1.0)*x583*x593))+(((-1.0)*x556*x566*x571))+(((-2.0)*x559*x589))+((x568*x572))+(((0.3654)*cj0*x561))+(((-1.0)*r02*x574))+((x559*x571*x578))+(((-1.0)*x569*x587))+(((-1.0)*x572*x573))+((x557*x566*x571))+(((-1.0)*x551*x570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x600=(sj1*sj3);
IkReal x601=(r00*sj0);
IkReal x602=(cj0*r01);
IkReal x603=(cj1*cj3);
IkReal x604=(cj1*sj3);
IkReal x605=(cj3*sj1);
IkReal x606=((1.0)*r02);
CheckValue<IkReal> x607=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal(((((-1.0)*x600*x601))+((x601*x603))+(((-1.0)*x604*x606))+((x600*x602))+(((-1.0)*x605*x606))+(((-1.0)*x602*x603)))),IkReal((((x601*x604))+((x601*x605))+(((-1.0)*x600*x606))+(((-1.0)*x602*x605))+(((-1.0)*x602*x604))+((r02*x603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x607.value)))+(x608.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x609=IKcos(j2);
IkReal x610=IKsin(j2);
IkReal x611=py*py;
IkReal x612=pz*pz;
IkReal x613=px*px;
IkReal x614=(r01*sj0);
IkReal x615=(cj0*r00);
IkReal x616=(pz*sj1);
IkReal x617=(cj1*pz);
IkReal x618=((1.0)*r02);
IkReal x619=(pz*r01);
IkReal x620=(cj0*px);
IkReal x621=((0.015)*sj4);
IkReal x622=((1.0)*r01);
IkReal x623=((1.0)*cj4);
IkReal x624=(cj1*px);
IkReal x625=((0.027)*sj4);
IkReal x626=(r00*sj0);
IkReal x627=((0.00081)*cj4);
IkReal x628=((0.005844)*cj4);
IkReal x629=((2.0)*py);
IkReal x630=((0.03337929)*cj1);
IkReal x631=(cj0*r01);
IkReal x632=((0.03337929)*sj1);
IkReal x633=((0.03845104)*cj4);
IkReal x634=(cj1*py);
IkReal x635=((1.0)*cj0);
IkReal x636=(cj0*r02);
IkReal x637=(py*sj1);
IkReal x638=((0.0105192)*cj4);
IkReal x639=(px*sj1);
IkReal x640=((0.3654)*py);
IkReal x641=((0.03744304)*cj4);
IkReal x642=((0.3654)*pz);
IkReal x643=(px*r00);
IkReal x644=(sj1*x629);
IkReal x645=(cj3*x609);
IkReal x646=(cj3*x610);
IkReal x647=(px*r02*sj0);
IkReal x648=(sj1*x613);
IkReal x649=((0.1948)*x609);
IkReal x650=(sj3*x610);
IkReal x651=(sj3*x609);
IkReal x652=(cj1*x612);
IkReal x653=(cj1*x613);
IkReal x654=(sj1*x611);
IkReal x655=((0.1948)*x610);
IkReal x656=(sj1*x612);
IkReal x657=(cj1*x611);
evalcond[0]=(((cj4*x650))+((cj1*r02))+((sj1*x626))+(((-1.0)*cj0*sj1*x622))+(((-1.0)*x623*x645)));
evalcond[1]=((((-1.0)*sj1*x618))+(((-1.0)*x623*x651))+(((-1.0)*cj0*cj1*x622))+(((-1.0)*x623*x646))+((cj1*x626)));
evalcond[2]=((-0.1827)+(((-0.015)*x651))+(((-0.015)*x646))+(((-1.0)*x649))+(((-0.027)*x645))+(((-1.0)*x635*x637))+((sj0*x639))+x617+(((0.027)*x650)));
evalcond[3]=((((-0.015)*x650))+(((-0.027)*x651))+(((-1.0)*x634*x635))+(((-1.0)*x655))+(((-1.0)*x616))+(((-0.027)*x646))+((sj0*x624))+(((0.015)*x645)));
evalcond[4]=(((sj4*x655))+(((-1.0)*x622*x624))+((x625*x646))+(((-1.0)*sj0*x618*x637))+((x625*x651))+((x621*x650))+(((-1.0)*x621*x645))+((x614*x616))+((r00*x634))+((x615*x616))+(((-1.0)*sj1*x618*x620)));
evalcond[5]=((((-1.0)*sj4*x649))+(((-1.0)*x625*x645))+((r01*x639))+(((-1.0)*sj0*x618*x634))+((x625*x650))+(((-0.1827)*x615))+(((-0.1827)*x614))+(((-1.0)*r00*x637))+(((-1.0)*x621*x646))+((x614*x617))+(((-1.0)*cj1*x618*x620))+((x615*x617))+(((-1.0)*x621*x651)));
evalcond[6]=(((x627*x646))+(((-1.0)*r01*x617*x629))+(((-2.0)*x617*x643))+(((-1.0)*cj0*x622*x656))+(((0.3654)*x643))+(((-2.0)*x616*x647))+(((-1.0)*cj0*x622*x648))+(((-1.0)*r02*x630))+((r02*x657))+((r02*x653))+((r02*x642))+(((-1.0)*x626*x648))+((x609*x638))+(((-1.0)*x614*x629*x639))+((x641*x650))+((x631*x654))+((x615*x629*x639))+((x610*x628))+((r01*x640))+(((-1.0)*x626*x632))+((x616*x629*x636))+((x633*x645))+((x626*x656))+((x626*x654))+((x631*x632))+((x627*x651))+(((-1.0)*x618*x652)));
evalcond[7]=((((-2.0)*x617*x647))+((x615*x624*x629))+(((-1.0)*x630*x631))+(((-1.0)*x641*x651))+(((-1.0)*cj0*x622*x652))+(((-1.0)*cj0*x622*x653))+(((0.3654)*x647))+(((-1.0)*x627*x645))+(((-1.0)*x618*x648))+(((-1.0)*x626*x642))+(((-1.0)*x614*x624*x629))+(((-1.0)*r02*x632))+((r02*x656))+((x617*x629*x636))+((x631*x657))+(((2.0)*x616*x643))+(((0.3654)*cj0*x619))+(((-1.0)*x636*x640))+(((-1.0)*x626*x653))+((x610*x638))+(((-1.0)*x609*x628))+((x633*x646))+((x626*x657))+((x626*x652))+((x627*x650))+((x626*x630))+((r01*x616*x629))+(((-1.0)*x618*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x667=IKPowWithIntegerCheck(cj4,-1);
if(!x667.valid){
continue;
}
IkReal x658=x667.value;
IkReal x659=(py*r01);
IkReal x660=(sj0*sj1);
IkReal x661=((91350.0)*cj4);
IkReal x662=((250000.0)*cj4);
IkReal x663=(cj1*r02);
IkReal x664=(px*r00);
IkReal x665=(pz*r02);
IkReal x666=(cj0*r01*sj1);
if( IKabs(((0.000684462696783025)*x658*(((((-13500.0)*x665))+(((-13500.0)*x664))+((x662*(px*px)))+(((2466.45)*r00*x660))+((x662*(pz*pz)))+(((-13500.0)*x659))+(((-1.0)*px*x660*x661))+(((-2466.45)*x666))+(((-1.0)*cj1*pz*x661))+((x662*(py*py)))+(((2466.45)*x663))+((cj0*py*sj1*x661))+(((-1015.9375)*cj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00205338809034908)*x658*(((((-67.5)*cj4))+(((2500.0)*x664))+(((2500.0)*x665))+(((-456.75)*x663))+(((456.75)*x666))+(((-456.75)*r00*x660))+(((2500.0)*x659)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000684462696783025)*x658*(((((-13500.0)*x665))+(((-13500.0)*x664))+((x662*(px*px)))+(((2466.45)*r00*x660))+((x662*(pz*pz)))+(((-13500.0)*x659))+(((-1.0)*px*x660*x661))+(((-2466.45)*x666))+(((-1.0)*cj1*pz*x661))+((x662*(py*py)))+(((2466.45)*x663))+((cj0*py*sj1*x661))+(((-1015.9375)*cj4))))))+IKsqr(((0.00205338809034908)*x658*(((((-67.5)*cj4))+(((2500.0)*x664))+(((2500.0)*x665))+(((-456.75)*x663))+(((456.75)*x666))+(((-456.75)*r00*x660))+(((2500.0)*x659))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.000684462696783025)*x658*(((((-13500.0)*x665))+(((-13500.0)*x664))+((x662*(px*px)))+(((2466.45)*r00*x660))+((x662*(pz*pz)))+(((-13500.0)*x659))+(((-1.0)*px*x660*x661))+(((-2466.45)*x666))+(((-1.0)*cj1*pz*x661))+((x662*(py*py)))+(((2466.45)*x663))+((cj0*py*sj1*x661))+(((-1015.9375)*cj4))))), ((0.00205338809034908)*x658*(((((-67.5)*cj4))+(((2500.0)*x664))+(((2500.0)*x665))+(((-456.75)*x663))+(((456.75)*x666))+(((-456.75)*r00*x660))+(((2500.0)*x659))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x668=IKcos(j3);
IkReal x669=IKsin(j3);
IkReal x670=px*px;
IkReal x671=py*py;
IkReal x672=pz*pz;
IkReal x673=(cj0*sj1);
IkReal x674=((0.1827)*r01);
IkReal x675=((0.3654)*py);
IkReal x676=(cj0*cj1);
IkReal x677=((0.1827)*r02);
IkReal x678=(py*sj0);
IkReal x679=(cj0*px);
IkReal x680=(cj1*sj0);
IkReal x681=(r00*sj1);
IkReal x682=((1.0)*r01);
IkReal x683=(px*r00);
IkReal x684=((0.3654)*pz);
IkReal x685=(r01*sj0);
IkReal x686=(px*r02);
IkReal x687=((0.1948)*cj4);
IkReal x688=(cj0*r00);
IkReal x689=((1.0)*x688);
IkReal x690=((2.0)*pz*r02);
IkReal x691=((0.3654)*px*sj1);
IkReal x692=((0.005844)*x669);
IkReal x693=((0.0105192)*x668);
evalcond[0]=((((0.1827)*sj0*x681))+(((0.027)*cj4))+(((-1.0)*pz*r02))+(((-1.0)*py*x682))+(((-1.0)*x673*x674))+(((-1.0)*x683))+((x668*x687))+((cj1*x677)));
evalcond[1]=((0.00552175)+((cj1*x684))+((sj0*x691))+x692+x693+(((-1.0)*x671))+(((-1.0)*x672))+(((-1.0)*x670))+(((-1.0)*x673*x675)));
evalcond[2]=(((pz*r00*sj0))+(((-1.0)*cj0*pz*x682))+((cj0*py*r02))+((x674*x676))+(((-0.1827)*r00*x680))+(((-1.0)*sj0*x686))+((sj1*x677))+(((-0.015)*cj4))+(((-1.0)*x669*x687)));
evalcond[3]=(((r01*x680*x684))+((sj4*x693))+((sj4*x692))+(((-1.0)*x675*x681))+(((2.0)*py*r01*x679))+((x671*x685))+(((0.03890104)*sj4))+(((-1.0)*sj0*x670*x682))+((x679*x690))+(((-0.03337929)*x688))+(((-0.03337929)*x685))+(((2.0)*x678*x683))+(((-1.0)*sj0*x672*x682))+(((-0.3654)*x676*x686))+(((-1.0)*r02*x675*x680))+((x670*x688))+((r00*x676*x684))+(((-1.0)*x672*x689))+((r01*x691))+(((-1.0)*x671*x689))+((x678*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x694=(cj3*cj4);
j2eval[0]=((((-7.21481481481482)*x694))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x694))+(((-0.027)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x695=(cj4*sj3);
j2eval[0]=((((-12.9866666666667)*x695))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x695))+(((-0.015)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x696=(px*sj0);
IkReal x697=((0.027)*cj3);
IkReal x698=(cj1*pz);
IkReal x699=(cj0*py);
IkReal x700=(sj1*sj3);
IkReal x701=(pz*sj1);
IkReal x702=((0.015)*cj3);
IkReal x703=((0.1948)*sj1);
IkReal x704=((0.027)*sj3);
IkReal x705=((0.015)*cj1*sj3);
IkReal x706=(cj1*x699);
IkReal x707=(sj1*x702);
CheckValue<IkReal> x708=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709 = IKatan2WithCheck(IkReal(((((-0.1948)*x701))+(((-0.1948)*x706))+(((0.1948)*cj1*x696))+(((0.027)*x699*x700))+(((-0.015)*pz*x700))+(((-0.0027405)*cj3))+(((-0.027)*x696*x700))+(((-1.0)*x699*x705))+(((-1.0)*x699*x707))+((x696*x705))+((x696*x707))+((x698*x702))+(((0.0049329)*sj3))+(((-1.0)*x698*x704))+(((-1.0)*x697*x706))+(((-1.0)*x697*x701))+((cj1*x696*x697)))),IkReal(((-0.03558996)+((cj1*x696*x704))+(((0.1948)*x698))+((x701*x702))+((x702*x706))+((sj1*x696*x697))+((x697*x698))+(((-0.0049329)*cj3))+(((-1.0)*x704*x706))+(((-0.015)*x699*x700))+(((-1.0)*x699*x703))+(((-0.0027405)*sj3))+((x696*x703))+(((-1.0)*sj1*x697*x699))+(((-0.027)*pz*x700))+(((-1.0)*cj1*x696*x702))+(((0.015)*x696*x700))+(((0.015)*sj3*x698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x709.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x708.value)))+(x709.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x710=IKcos(j2);
IkReal x711=IKsin(j2);
IkReal x712=(px*sj1);
IkReal x713=(cj1*sj0);
IkReal x714=(cj0*r00);
IkReal x715=(pz*sj1);
IkReal x716=(cj1*px);
IkReal x717=(cj1*py);
IkReal x718=((1.0)*cj0);
IkReal x719=(py*sj1);
IkReal x720=(r01*sj0);
IkReal x721=(cj1*pz);
IkReal x722=((0.1948)*x711);
IkReal x723=((0.1948)*x710);
IkReal x724=((0.027)*x710);
IkReal x725=((0.015)*x711);
IkReal x726=(r02*x718);
IkReal x727=((1.0)*py*r02);
IkReal x728=((0.027)*x711);
IkReal x729=((0.015)*x710);
IkReal x730=(sj3*x725);
IkReal x731=(cj3*x728);
IkReal x732=(sj3*x724);
IkReal x733=(cj3*x729);
IkReal x734=(sj3*x728);
IkReal x735=(sj3*x729);
IkReal x736=(cj3*x724);
IkReal x737=(cj3*x725);
IkReal x738=(x732+x731+x730+x722);
IkReal x739=(x737+x736+x735+x723);
evalcond[0]=((-0.1827)+(((-1.0)*x739))+((sj0*x712))+(((-1.0)*x718*x719))+x734+x721);
evalcond[1]=((((-1.0)*x715))+(((-1.0)*x717*x718))+(((-1.0)*x738))+((px*x713))+x733);
evalcond[2]=(((x714*x715))+((r00*x717))+(((-1.0)*r02*sj0*x719))+(((-1.0)*r01*x716))+(((-1.0)*x733))+x738+(((-1.0)*x712*x726))+((x715*x720)));
evalcond[3]=((((-1.0)*x713*x727))+(((-1.0)*r00*x719))+((r01*x712))+(((-1.0)*x739))+((pz*r01*x713))+(((-0.1827)*x714))+(((-1.0)*x716*x726))+x734+(((-0.1827)*x720))+((x714*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x740=(px*sj0);
IkReal x741=((0.027)*cj3);
IkReal x742=(cj1*pz);
IkReal x743=(cj0*py);
IkReal x744=(sj1*sj3);
IkReal x745=(pz*sj1);
IkReal x746=((0.015)*cj3);
IkReal x747=((0.1948)*sj1);
IkReal x748=((0.027)*sj3);
IkReal x749=((0.015)*cj1*sj3);
IkReal x750=(cj1*x743);
IkReal x751=(sj1*x746);
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x752.valid){
continue;
}
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal((((x742*x746))+(((-0.1948)*x745))+(((-0.015)*pz*x744))+((cj1*x740*x741))+(((-0.0027405)*cj3))+(((-1.0)*x742*x748))+(((-0.1948)*x750))+(((0.027)*x743*x744))+((x740*x749))+((x740*x751))+(((-1.0)*x743*x751))+(((0.0049329)*sj3))+(((-1.0)*x741*x745))+(((-0.027)*x740*x744))+(((-1.0)*x741*x750))+(((0.1948)*cj1*x740))+(((-1.0)*x743*x749)))),IkReal(((-0.03558996)+((x745*x746))+(((0.1948)*x742))+((cj1*x740*x748))+((sj1*x740*x741))+((x740*x747))+(((-0.015)*x743*x744))+((x746*x750))+((x741*x742))+(((-0.0049329)*cj3))+(((-0.0027405)*sj3))+(((0.015)*sj3*x742))+(((-1.0)*cj1*x740*x746))+(((-1.0)*sj1*x741*x743))+(((0.015)*x740*x744))+(((-1.0)*x748*x750))+(((-1.0)*x743*x747))+(((-0.027)*pz*x744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x752.value)))+(x753.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x754=IKcos(j2);
IkReal x755=IKsin(j2);
IkReal x756=(px*sj1);
IkReal x757=(cj1*sj0);
IkReal x758=(cj0*r00);
IkReal x759=(pz*sj1);
IkReal x760=(cj1*px);
IkReal x761=(cj1*py);
IkReal x762=((1.0)*cj0);
IkReal x763=(py*sj1);
IkReal x764=(r01*sj0);
IkReal x765=(cj1*pz);
IkReal x766=((0.1948)*x755);
IkReal x767=((0.1948)*x754);
IkReal x768=((0.027)*x754);
IkReal x769=((0.015)*x755);
IkReal x770=(r02*x762);
IkReal x771=((1.0)*py*r02);
IkReal x772=((0.027)*x755);
IkReal x773=((0.015)*x754);
IkReal x774=(cj3*x773);
IkReal x775=(sj3*x769);
IkReal x776=(cj3*x772);
IkReal x777=(sj3*x768);
IkReal x778=(sj3*x773);
IkReal x779=(cj3*x768);
IkReal x780=(cj3*x769);
IkReal x781=(sj3*x772);
IkReal x782=(x779+x778+x767+x780);
IkReal x783=(x777+x776+x775+x766);
evalcond[0]=((-0.1827)+(((-1.0)*x762*x763))+(((-1.0)*x782))+((sj0*x756))+x765+x781);
evalcond[1]=((((-1.0)*x783))+((px*x757))+(((-1.0)*x759))+x774+(((-1.0)*x761*x762)));
evalcond[2]=((((-1.0)*r02*sj0*x763))+(((-1.0)*r01*x760))+(((-1.0)*x783))+((x758*x759))+((x759*x764))+(((-1.0)*x756*x770))+x774+((r00*x761)));
evalcond[3]=((((-1.0)*x757*x771))+(((-0.1827)*x764))+(((-1.0)*r00*x763))+(((-1.0)*x781))+((pz*r01*x757))+(((-0.1827)*x758))+((x758*x765))+((r01*x756))+x782+(((-1.0)*x760*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x784=((0.348076515568243)*sj1);
IkReal x785=(cj0*py);
IkReal x786=(px*sj0);
IkReal x787=(cj1*pz);
IkReal x788=((4.50693249433931)*sj1);
IkReal x789=((0.348076515568243)*cj1);
IkReal x790=((4.50693249433931)*x786);
if( IKabs(((-0.063593579394318)+(((-4.50693249433931)*cj1*x785))+((cj1*x790))+((x784*x786))+(((-1.0)*x784*x785))+(((0.348076515568243)*x787))+(((-1.0)*pz*x788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.823416566715791)+((x786*x788))+((x785*x789))+((pz*x784))+(((-1.0)*x786*x789))+(((-1.0)*x785*x788))+(((4.50693249433931)*x787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.063593579394318)+(((-4.50693249433931)*cj1*x785))+((cj1*x790))+((x784*x786))+(((-1.0)*x784*x785))+(((0.348076515568243)*x787))+(((-1.0)*pz*x788))))+IKsqr(((-0.823416566715791)+((x786*x788))+((x785*x789))+((pz*x784))+(((-1.0)*x786*x789))+(((-1.0)*x785*x788))+(((4.50693249433931)*x787))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.063593579394318)+(((-4.50693249433931)*cj1*x785))+((cj1*x790))+((x784*x786))+(((-1.0)*x784*x785))+(((0.348076515568243)*x787))+(((-1.0)*pz*x788))), ((-0.823416566715791)+((x786*x788))+((x785*x789))+((pz*x784))+(((-1.0)*x786*x789))+(((-1.0)*x785*x788))+(((4.50693249433931)*x787))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x791=IKcos(j2);
IkReal x792=IKsin(j2);
IkReal x793=py*py;
IkReal x794=pz*pz;
IkReal x795=px*px;
IkReal x796=(py*r00);
IkReal x797=((1.0)*sj1);
IkReal x798=(r01*sj1);
IkReal x799=(cj1*r02);
IkReal x800=(cj0*pz);
IkReal x801=((2.0)*py);
IkReal x802=(cj1*sj0);
IkReal x803=(r00*sj1);
IkReal x804=(pz*r01);
IkReal x805=(pz*r02);
IkReal x806=(cj0*px);
IkReal x807=((2.0)*sj1);
IkReal x808=(px*sj0);
IkReal x809=(pz*sj0);
IkReal x810=((0.3654)*r00);
IkReal x811=(cj0*r01);
IkReal x812=((1.0)*cj1);
IkReal x813=(px*r01);
IkReal x814=((2.0)*cj1);
IkReal x815=((0.3654)*r02);
IkReal x816=((0.3654)*r01);
IkReal x817=(py*sj0);
IkReal x818=(cj0*py);
IkReal x819=((0.22056480436)*sj4);
IkReal x820=(r02*sj1);
IkReal x821=(px*pz);
IkReal x822=(cj4*x791);
IkReal x823=((0.0170345193)*x792);
IkReal x824=(cj4*x792);
IkReal x825=((1.0)*x794);
IkReal x826=(cj1*x811);
IkReal x827=((0.0170345193)*x791);
IkReal x828=(r00*x795);
evalcond[0]=((-0.1827)+(((-1.0)*x823))+((cj1*pz))+((sj1*x808))+(((-0.22056480436)*x791))+(((-1.0)*x797*x818)));
evalcond[1]=((((-1.0)*x812*x818))+((px*x802))+(((-1.0)*pz*x797))+x827+(((-0.22056480436)*x792)));
evalcond[2]=((((-0.99703093)*x822))+((sj0*x803))+x799+(((-0.07700205)*x824))+(((-1.0)*x797*x811)));
evalcond[3]=((((-0.99703093)*x824))+(((-1.0)*x811*x812))+(((0.07700205)*x822))+((r00*x802))+(((-1.0)*r02*x797)));
evalcond[4]=((((-1.0)*x812*x813))+(((-1.0)*r02*x797*x817))+((x792*x819))+((cj1*x796))+((x800*x803))+(((-1.0)*sj4*x827))+(((-1.0)*r02*x797*x806))+((x798*x809)));
evalcond[5]=((((-1.0)*x796*x797))+(((-0.1827)*cj0*r00))+((px*x798))+(((-1.0)*x799*x806))+(((-1.0)*sj4*x823))+(((-1.0)*x799*x817))+((cj1*r00*x800))+((x802*x804))+(((-0.1827)*r01*sj0))+(((-1.0)*x791*x819)));
evalcond[6]=((((-1.0)*cj1*x801*x804))+(((-1.0)*sj0*x797*x828))+((cj0*x793*x798))+((py*x816))+(((-1.0)*r00*x814*x821))+(((-0.03337929)*x799))+((px*x810))+(((-1.0)*x795*x797*x811))+((x793*x799))+(((0.0487937045101672)*x822))+(((-1.0)*x794*x797*x811))+(((-1.0)*x799*x825))+((sj0*x794*x803))+(((0.03337929)*cj0*x798))+(((-1.0)*x805*x807*x808))+(((0.003768404215068)*x824))+((sj0*x793*x803))+(((0.3654)*x805))+(((-1.0)*x798*x801*x808))+(((-0.03337929)*sj0*x803))+((x796*x806*x807))+((x800*x801*x820))+((x795*x799)));
evalcond[7]=(((r00*x793*x802))+(((-1.0)*x794*x811*x812))+(((-1.0)*x801*x802*x813))+(((-2.0)*pz*x799*x808))+((pz*x798*x801))+((r00*x794*x802))+(((0.03337929)*r00*x802))+(((-1.0)*r02*x793*x797))+((x796*x806*x814))+(((2.0)*x803*x821))+(((-1.0)*x809*x810))+(((-1.0)*x802*x828))+((x808*x815))+(((-0.003768404215068)*x822))+(((0.0487937045101672)*x824))+(((-1.0)*x815*x818))+((x799*x800*x801))+(((-1.0)*x795*x811*x812))+(((-1.0)*r02*x795*x797))+(((-0.03337929)*x820))+(((-0.03337929)*x826))+((x800*x816))+((x793*x826))+((x794*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x829=((5.9623324874641)*pz);
IkReal x830=(cj0*py);
IkReal x831=((0.460479037630733)*cj1);
IkReal x832=((0.460479037630733)*sj1);
IkReal x833=((5.9623324874641)*sj1);
IkReal x834=(px*sj0);
IkReal x835=((5.9623324874641)*cj1);
if( IKabs(((0.084129520175135)+(((-1.0)*x832*x834))+(((-1.0)*pz*x831))+(((-1.0)*x830*x835))+((x830*x832))+((x834*x835))+(((-1.0)*sj1*x829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.08931814545969)+((x831*x834))+(((-1.0)*pz*x832))+((x833*x834))+(((-1.0)*x830*x833))+(((-1.0)*x830*x831))+((cj1*x829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.084129520175135)+(((-1.0)*x832*x834))+(((-1.0)*pz*x831))+(((-1.0)*x830*x835))+((x830*x832))+((x834*x835))+(((-1.0)*sj1*x829))))+IKsqr(((-1.08931814545969)+((x831*x834))+(((-1.0)*pz*x832))+((x833*x834))+(((-1.0)*x830*x833))+(((-1.0)*x830*x831))+((cj1*x829))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.084129520175135)+(((-1.0)*x832*x834))+(((-1.0)*pz*x831))+(((-1.0)*x830*x835))+((x830*x832))+((x834*x835))+(((-1.0)*sj1*x829))), ((-1.08931814545969)+((x831*x834))+(((-1.0)*pz*x832))+((x833*x834))+(((-1.0)*x830*x833))+(((-1.0)*x830*x831))+((cj1*x829))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x836=IKsin(j2);
IkReal x837=IKcos(j2);
IkReal x838=py*py;
IkReal x839=pz*pz;
IkReal x840=px*px;
IkReal x841=(cj1*r02);
IkReal x842=((2.0)*py);
IkReal x843=(cj1*sj0);
IkReal x844=(cj0*pz);
IkReal x845=(r00*sj1);
IkReal x846=(pz*r01);
IkReal x847=(cj0*r01);
IkReal x848=(pz*r02);
IkReal x849=(cj0*r00);
IkReal x850=(cj0*px);
IkReal x851=(sj0*sj1);
IkReal x852=((2.0)*px);
IkReal x853=((1.0)*sj1);
IkReal x854=((0.3654)*sj0);
IkReal x855=(pz*r00);
IkReal x856=(cj1*px);
IkReal x857=((0.3654)*r01);
IkReal x858=((1.0)*cj1);
IkReal x859=(py*sj0);
IkReal x860=(cj0*py);
IkReal x861=(cj1*r00);
IkReal x862=(r02*sj1);
IkReal x863=((0.16672513414)*x836);
IkReal x864=(cj4*x837);
IkReal x865=(px*r01*sj1);
IkReal x866=((0.0128764086)*x837);
IkReal x867=((0.16672513414)*x837);
IkReal x868=((1.0)*x839);
IkReal x869=(r02*x853);
IkReal x870=(cj4*x836);
IkReal x871=((1.0)*x840);
IkReal x872=((0.0128764086)*x836);
evalcond[0]=((-0.1827)+(((-1.0)*x867))+(((-1.0)*x853*x860))+((cj1*pz))+((px*x851))+x872);
evalcond[1]=((((-1.0)*x866))+(((-1.0)*x863))+(((-1.0)*pz*x853))+(((-1.0)*x858*x860))+((px*x843)));
evalcond[2]=((((-0.07700205)*x870))+(((0.99703093)*x864))+(((-1.0)*x847*x853))+x841+((sj0*x845)));
evalcond[3]=((((-1.0)*x869))+(((0.07700205)*x864))+(((0.99703093)*x870))+(((-1.0)*x847*x858))+((r00*x843)));
evalcond[4]=((((-1.0)*x850*x869))+(((-1.0)*r01*x856))+((sj4*x863))+((sj4*x866))+((x846*x851))+(((-1.0)*py*r02*x851))+((py*x861))+((x844*x845)));
evalcond[5]=((((-1.0)*sj4*x867))+(((-1.0)*x841*x859))+(((-1.0)*x841*x850))+((x843*x846))+((x844*x861))+((sj4*x872))+(((-1.0)*py*x845))+x865+(((-0.1827)*r01*sj0))+(((-0.1827)*x849)));
evalcond[6]=((((0.002153214108468)*x870))+(((-0.0278800478311672)*x864))+(((-1.0)*cj1*x852*x855))+((x838*x841))+(((-0.03337929)*sj0*x845))+((x840*x841))+((sj0*x838*x845))+(((0.03337929)*sj1*x847))+(((-1.0)*x840*x847*x853))+(((-0.03337929)*x841))+(((-1.0)*x841*x868))+((sj0*x839*x845))+(((-1.0)*px*r01*x842*x851))+(((-1.0)*x839*x847*x853))+((x842*x845*x850))+(((0.3654)*x848))+(((0.3654)*px*r00))+(((-1.0)*sj0*x845*x871))+(((-1.0)*x848*x851*x852))+(((-1.0)*cj1*x842*x846))+((x842*x844*x862))+((sj1*x838*x847))+((py*x857)));
evalcond[7]=((((-0.03337929)*cj1*x847))+(((-1.0)*r00*x843*x871))+(((-0.03337929)*x862))+((cj1*x838*x847))+(((-0.0278800478311672)*x870))+(((-0.002153214108468)*x864))+((px*r02*x854))+((sj1*x842*x846))+(((-1.0)*x840*x847*x858))+(((0.03337929)*r00*x843))+((x842*x849*x856))+((x844*x857))+(((-1.0)*x838*x869))+(((-1.0)*x839*x847*x858))+((x839*x862))+((pz*x845*x852))+(((-1.0)*pz*sj0*x841*x852))+((r00*x838*x843))+((r00*x839*x843))+(((-1.0)*px*r01*x842*x843))+(((-0.3654)*r02*x860))+(((-1.0)*x840*x869))+(((-1.0)*x854*x855))+((x841*x842*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((0.138603696098563)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x873=((4.76312520699347)*cj1);
IkReal x874=(cj0*py);
IkReal x875=(px*sj0);
IkReal x876=((0.666621037898606)*sj1);
IkReal x877=((0.666621037898606)*cj1);
IkReal x878=((4.76312520699347)*sj1);
if( IKabs(((0.121791663624075)+((x874*x876))+((x873*x875))+(((-1.0)*x873*x874))+(((-1.0)*pz*x878))+(((-1.0)*pz*x877))+(((-1.0)*x875*x876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.870222975317707)+(((-1.0)*pz*x876))+((x875*x878))+((x875*x877))+(((-1.0)*x874*x878))+(((-1.0)*x874*x877))+((pz*x873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.121791663624075)+((x874*x876))+((x873*x875))+(((-1.0)*x873*x874))+(((-1.0)*pz*x878))+(((-1.0)*pz*x877))+(((-1.0)*x875*x876))))+IKsqr(((-0.870222975317707)+(((-1.0)*pz*x876))+((x875*x878))+((x875*x877))+(((-1.0)*x874*x878))+(((-1.0)*x874*x877))+((pz*x873))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.121791663624075)+((x874*x876))+((x873*x875))+(((-1.0)*x873*x874))+(((-1.0)*pz*x878))+(((-1.0)*pz*x877))+(((-1.0)*x875*x876))), ((-0.870222975317707)+(((-1.0)*pz*x876))+((x875*x878))+((x875*x877))+(((-1.0)*x874*x878))+(((-1.0)*x874*x877))+((pz*x873))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x879=IKsin(j2);
IkReal x880=IKcos(j2);
IkReal x881=py*py;
IkReal x882=pz*pz;
IkReal x883=px*px;
IkReal x884=(sj0*sj1);
IkReal x885=(px*r01);
IkReal x886=((2.0)*py);
IkReal x887=(cj1*sj0);
IkReal x888=(pz*r01);
IkReal x889=(cj0*r01);
IkReal x890=((1.0)*sj1);
IkReal x891=((2.0)*pz);
IkReal x892=((0.3654)*r02);
IkReal x893=(pz*r00);
IkReal x894=(cj0*r00);
IkReal x895=((0.03337929)*r00);
IkReal x896=((0.03337929)*sj1);
IkReal x897=(px*r02);
IkReal x898=((0.0288184496213779)*sj4);
IkReal x899=((0.03337929)*cj1);
IkReal x900=((1.0)*cj1);
IkReal x901=(cj1*px);
IkReal x902=(cj0*py);
IkReal x903=(py*r00);
IkReal x904=(px*r00);
IkReal x905=(r02*x902);
IkReal x906=((0.205912919056321)*x879);
IkReal x907=(r02*x881);
IkReal x908=(sj1*x894);
IkReal x909=(cj4*x879);
IkReal x910=(cj4*x880);
IkReal x911=(r02*x883);
IkReal x912=(r00*x882);
IkReal x913=(r00*x881);
IkReal x914=((0.205912919056321)*x880);
IkReal x915=((1.0)*py*r02);
IkReal x916=((1.0)*r00*x883);
IkReal x917=(x882*x900);
evalcond[0]=((-0.1827)+(((-1.0)*x890*x902))+(((0.0288184496213779)*x879))+((px*x884))+(((-1.0)*x914))+((cj1*pz)));
evalcond[1]=((((-1.0)*x900*x902))+((px*x887))+(((-1.0)*x906))+(((-1.0)*pz*x890))+(((-0.0288184496213779)*x880)));
evalcond[2]=(((r00*x884))+((cj1*r02))+(((0.1386037)*x910))+(((-1.0)*x889*x890))+(((0.990347930421403)*x909)));
evalcond[3]=(((r00*x887))+(((-1.0)*x889*x900))+(((0.1386037)*x909))+(((-0.990347930421403)*x910))+(((-1.0)*r02*x890)));
evalcond[4]=(((cj1*x903))+((x880*x898))+(((-1.0)*x885*x900))+(((-1.0)*x884*x915))+(((-1.0)*cj0*x890*x897))+((sj4*x906))+((cj0*sj1*x893))+((x884*x888)));
evalcond[5]=((((-1.0)*x890*x903))+((x887*x888))+((sj1*x885))+(((-1.0)*cj0*x897*x900))+(((-0.1827)*x894))+((x879*x898))+(((-1.0)*x887*x915))+((cj0*cj1*x893))+(((-1.0)*sj4*x914))+(((-0.1827)*r01*sj0)));
evalcond[6]=(((cj1*x907))+(((-1.0)*x884*x895))+((px*x886*x908))+((pz*x892))+(((-1.0)*x883*x889*x890))+(((-1.0)*x882*x889*x890))+(((0.00599192541079334)*x910))+((x884*x913))+((x884*x912))+(((-1.0)*cj1*x886*x888))+(((-1.0)*r02*x917))+((cj0*pz*r02*sj1*x886))+(((-1.0)*x884*x891*x897))+((sj1*x881*x889))+(((-1.0)*x884*x916))+(((0.0428133681756858)*x909))+(((-1.0)*x884*x885*x886))+(((0.3654)*x904))+((x889*x896))+(((-1.0)*r00*x891*x901))+(((-1.0)*r02*x899))+(((0.3654)*py*r01))+((cj1*x911)));
evalcond[7]=((((-1.0)*x890*x907))+(((-1.0)*x887*x891*x897))+(((-0.3654)*sj0*x893))+(((-1.0)*x883*x889*x900))+(((0.00599192541079334)*x909))+(((-1.0)*x889*x917))+((r02*sj1*x882))+((px*sj0*x892))+((sj1*x891*x904))+(((-1.0)*x890*x911))+((x887*x913))+((x887*x912))+(((0.3654)*cj0*x888))+(((-1.0)*x885*x886*x887))+(((-1.0)*x887*x916))+(((-1.0)*x889*x899))+((cj1*x881*x889))+(((-1.0)*x892*x902))+((cj0*cj1*pz*r02*x886))+(((-1.0)*r02*x896))+((x886*x894*x901))+(((-0.0428133681756858)*x910))+((sj1*x886*x888))+((x887*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.138603696098563)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x918=((0.779023555870258)*pz);
IkReal x919=((5.56626109321613)*cj1);
IkReal x920=(cj0*py);
IkReal x921=(sj1*x920);
IkReal x922=((5.56626109321613)*px*sj0);
IkReal x923=((0.779023555870258)*px*sj0);
if( IKabs(((-0.142327603657496)+((sj1*x923))+(((-1.0)*x919*x920))+(((-5.56626109321613)*pz*sj1))+((px*sj0*x919))+(((-0.779023555870258)*x921))+((cj1*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01695590173059)+((pz*x919))+((sj1*x922))+(((0.779023555870258)*cj1*x920))+(((-5.56626109321613)*x921))+(((-1.0)*cj1*x923))+((sj1*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.142327603657496)+((sj1*x923))+(((-1.0)*x919*x920))+(((-5.56626109321613)*pz*sj1))+((px*sj0*x919))+(((-0.779023555870258)*x921))+((cj1*x918))))+IKsqr(((-1.01695590173059)+((pz*x919))+((sj1*x922))+(((0.779023555870258)*cj1*x920))+(((-5.56626109321613)*x921))+(((-1.0)*cj1*x923))+((sj1*x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.142327603657496)+((sj1*x923))+(((-1.0)*x919*x920))+(((-5.56626109321613)*pz*sj1))+((px*sj0*x919))+(((-0.779023555870258)*x921))+((cj1*x918))), ((-1.01695590173059)+((pz*x919))+((sj1*x922))+(((0.779023555870258)*cj1*x920))+(((-5.56626109321613)*x921))+(((-1.0)*cj1*x923))+((sj1*x918))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x924=IKcos(j2);
IkReal x925=IKsin(j2);
IkReal x926=py*py;
IkReal x927=pz*pz;
IkReal x928=px*px;
IkReal x929=(px*sj1);
IkReal x930=(pz*r00);
IkReal x931=((1.0)*sj1);
IkReal x932=(r00*sj0);
IkReal x933=(r01*sj0);
IkReal x934=(cj1*pz);
IkReal x935=((2.0)*py);
IkReal x936=(px*sj0);
IkReal x937=(cj0*sj1);
IkReal x938=((1.0)*cj0);
IkReal x939=(cj0*r02);
IkReal x940=((0.3654)*r02);
IkReal x941=(pz*r01);
IkReal x942=(cj0*r00);
IkReal x943=((0.03337929)*cj1);
IkReal x944=((1.0)*r02);
IkReal x945=(cj0*cj1);
IkReal x946=(r02*sj0);
IkReal x947=(cj0*r01);
IkReal x948=(cj1*px);
IkReal x949=((0.3654)*py);
IkReal x950=(cj1*py);
IkReal x951=((0.03337929)*sj1);
IkReal x952=(r02*x926);
IkReal x953=((0.176202481143679)*x925);
IkReal x954=(cj1*x927);
IkReal x955=(cj4*x925);
IkReal x956=(r01*x926);
IkReal x957=(cj4*x924);
IkReal x958=(r02*x928);
IkReal x959=((0.176202481143679)*x924);
IkReal x960=((0.0246603386213779)*x925);
IkReal x961=(cj1*x928);
IkReal x962=(sj1*x927);
IkReal x963=((0.0246603386213779)*x924);
evalcond[0]=((-0.1827)+((sj0*x929))+(((-1.0)*cj0*py*x931))+(((-1.0)*x959))+x934+(((-1.0)*x960)));
evalcond[1]=((((-1.0)*x938*x950))+(((-1.0)*pz*x931))+((cj1*x936))+(((-1.0)*x953))+x963);
evalcond[2]=((((-0.990347930421403)*x955))+((cj1*r02))+((sj1*x932))+(((-1.0)*x931*x947))+(((0.1386037)*x957)));
evalcond[3]=((((-1.0)*r02*x931))+(((0.990347930421403)*x957))+((cj1*x932))+(((-1.0)*cj1*r01*x938))+(((0.1386037)*x955)));
evalcond[4]=((((-1.0)*r01*x948))+(((-1.0)*r02*x929*x938))+((sj4*x953))+(((-1.0)*py*x931*x946))+((x930*x937))+((r00*x950))+((pz*sj1*x933))+(((-1.0)*sj4*x963)));
evalcond[5]=((((-0.1827)*x933))+(((-0.1827)*x942))+(((-1.0)*sj0*x944*x950))+((x930*x945))+(((-1.0)*r02*x938*x948))+((r01*x929))+(((-1.0)*sj4*x959))+(((-1.0)*py*r00*x931))+(((-1.0)*sj4*x960))+((x933*x934)));
evalcond[6]=((((-1.0)*r02*x943))+((x932*x962))+(((-1.0)*r01*x934*x935))+(((-1.0)*x944*x954))+(((-0.0313499061696858)*x955))+(((-1.0)*x928*x931*x947))+(((0.00438756176351066)*x957))+((cj1*x958))+((cj1*x952))+((pz*r02*x935*x937))+(((0.03337929)*r01*x937))+((r01*x949))+(((-1.0)*x928*x931*x932))+(((0.3654)*px*r00))+((sj1*x926*x932))+(((-1.0)*x932*x951))+(((-2.0)*x930*x948))+(((-2.0)*pz*x929*x946))+(((-1.0)*x929*x933*x935))+((x929*x935*x942))+(((-1.0)*x927*x931*x947))+((pz*x940))+((x937*x956)));
evalcond[7]=((((0.3654)*cj0*x941))+(((-1.0)*x932*x961))+((sj1*x935*x941))+((x932*x943))+(((0.0313499061696858)*x957))+((x935*x942*x948))+((x932*x954))+((x936*x940))+(((-1.0)*x939*x949))+(((-2.0)*r02*x934*x936))+(((0.00438756176351066)*x955))+((x934*x935*x939))+(((-1.0)*x943*x947))+(((-1.0)*r01*x938*x954))+(((2.0)*x929*x930))+((r02*x962))+((cj1*x926*x932))+((x945*x956))+(((-1.0)*r01*x938*x961))+(((-1.0)*x931*x952))+(((-1.0)*x931*x958))+(((-0.3654)*sj0*x930))+(((-1.0)*r02*x951))+(((-1.0)*x933*x935*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x964=((0.015)*cj3);
IkReal x965=((0.027)*sj3);
IkReal x966=(cj0*py);
IkReal x967=(cj1*r02);
IkReal x968=((0.015)*sj3);
IkReal x969=((0.027)*cj3);
IkReal x970=((0.1827)*cj4);
IkReal x971=(cj4*sj3);
IkReal x972=(sj3*x967);
IkReal x973=(cj0*r01*sj1);
IkReal x974=(cj3*cj4*sj1);
IkReal x975=(r00*sj0*sj1);
IkReal x976=((1.0)*px*sj0);
IkReal x977=(sj1*x971);
IkReal x978=((1.0)*cj1*pz);
CheckValue<IkReal> x979=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x971))+(((-0.015)*cj4)))),-1);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal((((x969*x975))+(((-1.0)*x969*x973))+(((0.1948)*x975))+(((-0.1948)*x973))+((x968*x975))+(((-1.0)*x974*x976))+(((0.1948)*x967))+((x967*x969))+((x967*x968))+((x966*x974))+((cj3*x970))+(((-1.0)*cj3*cj4*x978))+(((-1.0)*x968*x973)))),IkReal(((((-1.0)*x965*x973))+(((-1.0)*x971*x978))+(((-1.0)*x964*x967))+(((-1.0)*x964*x975))+((x965*x975))+((x965*x967))+((x966*x977))+(((-1.0)*x976*x977))+((x964*x973))+((sj3*x970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x979.value)))+(x980.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x981=IKcos(j2);
IkReal x982=IKsin(j2);
IkReal x983=py*py;
IkReal x984=pz*pz;
IkReal x985=px*px;
IkReal x986=(r01*sj0);
IkReal x987=(cj0*r00);
IkReal x988=(pz*sj1);
IkReal x989=(cj1*pz);
IkReal x990=((1.0)*r02);
IkReal x991=(pz*r01);
IkReal x992=(cj0*px);
IkReal x993=((0.015)*sj4);
IkReal x994=((1.0)*r01);
IkReal x995=((1.0)*cj4);
IkReal x996=(cj1*px);
IkReal x997=((0.027)*sj4);
IkReal x998=(r00*sj0);
IkReal x999=((0.00081)*cj4);
IkReal x1000=((0.005844)*cj4);
IkReal x1001=((2.0)*py);
IkReal x1002=((0.03337929)*cj1);
IkReal x1003=(cj0*r01);
IkReal x1004=((0.03337929)*sj1);
IkReal x1005=((0.03845104)*cj4);
IkReal x1006=(cj1*py);
IkReal x1007=((1.0)*cj0);
IkReal x1008=(cj0*r02);
IkReal x1009=(py*sj1);
IkReal x1010=((0.0105192)*cj4);
IkReal x1011=(px*sj1);
IkReal x1012=((0.3654)*py);
IkReal x1013=((0.03744304)*cj4);
IkReal x1014=((0.3654)*pz);
IkReal x1015=(px*r00);
IkReal x1016=(sj1*x1001);
IkReal x1017=(cj3*x981);
IkReal x1018=(cj3*x982);
IkReal x1019=(px*r02*sj0);
IkReal x1020=(sj1*x985);
IkReal x1021=((0.1948)*x981);
IkReal x1022=(sj3*x982);
IkReal x1023=(sj3*x981);
IkReal x1024=(cj1*x984);
IkReal x1025=(cj1*x985);
IkReal x1026=(sj1*x983);
IkReal x1027=((0.1948)*x982);
IkReal x1028=(sj1*x984);
IkReal x1029=(cj1*x983);
evalcond[0]=(((cj1*r02))+((cj4*x1022))+(((-1.0)*x1017*x995))+(((-1.0)*cj0*sj1*x994))+((sj1*x998)));
evalcond[1]=((((-1.0)*x1023*x995))+((cj1*x998))+(((-1.0)*sj1*x990))+(((-1.0)*x1018*x995))+(((-1.0)*cj0*cj1*x994)));
evalcond[2]=((-0.1827)+(((0.027)*x1022))+((sj0*x1011))+(((-0.027)*x1017))+(((-1.0)*x1021))+(((-1.0)*x1007*x1009))+(((-0.015)*x1018))+x989+(((-0.015)*x1023)));
evalcond[3]=((((-1.0)*x988))+(((-0.027)*x1018))+(((-1.0)*x1006*x1007))+(((-1.0)*x1027))+(((0.015)*x1017))+((sj0*x996))+(((-0.027)*x1023))+(((-0.015)*x1022)));
evalcond[4]=((((-1.0)*x994*x996))+((x1022*x993))+((x1023*x997))+((x986*x988))+((sj4*x1027))+(((-1.0)*sj0*x1009*x990))+((x1018*x997))+(((-1.0)*sj1*x990*x992))+(((-1.0)*x1017*x993))+((x987*x988))+((r00*x1006)));
evalcond[5]=((((-1.0)*x1023*x993))+(((-0.1827)*x986))+(((-0.1827)*x987))+((x1022*x997))+((x986*x989))+(((-1.0)*sj4*x1021))+(((-1.0)*r00*x1009))+(((-1.0)*cj1*x990*x992))+(((-1.0)*x1017*x997))+(((-1.0)*x1018*x993))+(((-1.0)*sj0*x1006*x990))+((x987*x989))+((r01*x1011)));
evalcond[6]=(((x1001*x1011*x987))+(((-1.0)*cj0*x1020*x994))+((x1028*x998))+((x1026*x998))+(((-2.0)*x1019*x988))+((x1023*x999))+((r02*x1014))+((x1010*x981))+(((-1.0)*x1001*x1011*x986))+((x1003*x1026))+(((0.3654)*x1015))+((x1018*x999))+((x1005*x1017))+(((-1.0)*cj0*x1028*x994))+(((-1.0)*r02*x1002))+((x1001*x1008*x988))+(((-1.0)*r01*x1001*x989))+(((-1.0)*x1020*x998))+((r02*x1025))+((r02*x1029))+(((-2.0)*x1015*x989))+(((-1.0)*x1024*x990))+(((-1.0)*x1004*x998))+((x1013*x1022))+((r01*x1012))+((x1000*x982))+((x1003*x1004)));
evalcond[7]=((((-1.0)*cj0*x1025*x994))+(((-1.0)*x1000*x981))+(((-1.0)*x1001*x986*x996))+(((2.0)*x1015*x988))+((x1029*x998))+(((-2.0)*x1019*x989))+((x1022*x999))+(((-1.0)*x1025*x998))+(((-1.0)*x1020*x990))+((x1010*x982))+(((-1.0)*x1008*x1012))+((x1003*x1029))+(((-1.0)*x1026*x990))+(((0.3654)*x1019))+((x1005*x1018))+(((-1.0)*x1017*x999))+(((-1.0)*r02*x1004))+(((0.3654)*cj0*x991))+((x1001*x987*x996))+((x1002*x998))+((x1001*x1008*x989))+(((-1.0)*x1002*x1003))+((r02*x1028))+((x1024*x998))+(((-1.0)*cj0*x1024*x994))+((r01*x1001*x988))+(((-1.0)*x1013*x1023))+(((-1.0)*x1014*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1030=((0.015)*cj3);
IkReal x1031=((0.027)*sj3);
IkReal x1032=(cj0*py);
IkReal x1033=(cj1*r02);
IkReal x1034=((0.015)*sj3);
IkReal x1035=((0.027)*cj3);
IkReal x1036=(cj4*sj3);
IkReal x1037=(pz*sj1);
IkReal x1038=(cj3*cj4);
IkReal x1039=(sj3*x1033);
IkReal x1040=(cj0*r01*sj1);
IkReal x1041=(r00*sj0*sj1);
IkReal x1042=(cj1*x1038);
IkReal x1043=((1.0)*px*sj0);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x1038))+(((-0.027)*cj4)))),-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal((((x1031*x1033))+(((-1.0)*x1031*x1040))+((x1031*x1041))+(((-1.0)*x1042*x1043))+((x1030*x1040))+(((-1.0)*x1030*x1033))+((x1032*x1042))+((x1037*x1038))+(((-1.0)*x1030*x1041)))),IkReal((((cj1*x1032*x1036))+(((-1.0)*x1033*x1035))+(((-1.0)*x1033*x1034))+((x1036*x1037))+((x1034*x1040))+((x1035*x1040))+(((-1.0)*cj1*x1036*x1043))+(((-0.1948)*x1041))+(((-0.1948)*x1033))+(((-1.0)*x1035*x1041))+(((-1.0)*x1034*x1041))+(((0.1948)*x1040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1044.value)))+(x1045.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1046=IKcos(j2);
IkReal x1047=IKsin(j2);
IkReal x1048=py*py;
IkReal x1049=pz*pz;
IkReal x1050=px*px;
IkReal x1051=(r01*sj0);
IkReal x1052=(cj0*r00);
IkReal x1053=(pz*sj1);
IkReal x1054=(cj1*pz);
IkReal x1055=((1.0)*r02);
IkReal x1056=(pz*r01);
IkReal x1057=(cj0*px);
IkReal x1058=((0.015)*sj4);
IkReal x1059=((1.0)*r01);
IkReal x1060=((1.0)*cj4);
IkReal x1061=(cj1*px);
IkReal x1062=((0.027)*sj4);
IkReal x1063=(r00*sj0);
IkReal x1064=((0.00081)*cj4);
IkReal x1065=((0.005844)*cj4);
IkReal x1066=((2.0)*py);
IkReal x1067=((0.03337929)*cj1);
IkReal x1068=(cj0*r01);
IkReal x1069=((0.03337929)*sj1);
IkReal x1070=((0.03845104)*cj4);
IkReal x1071=(cj1*py);
IkReal x1072=((1.0)*cj0);
IkReal x1073=(cj0*r02);
IkReal x1074=(py*sj1);
IkReal x1075=((0.0105192)*cj4);
IkReal x1076=(px*sj1);
IkReal x1077=((0.3654)*py);
IkReal x1078=((0.03744304)*cj4);
IkReal x1079=((0.3654)*pz);
IkReal x1080=(px*r00);
IkReal x1081=(sj1*x1066);
IkReal x1082=(cj3*x1046);
IkReal x1083=(cj3*x1047);
IkReal x1084=(px*r02*sj0);
IkReal x1085=(sj1*x1050);
IkReal x1086=((0.1948)*x1046);
IkReal x1087=(sj3*x1047);
IkReal x1088=(sj3*x1046);
IkReal x1089=(cj1*x1049);
IkReal x1090=(cj1*x1050);
IkReal x1091=(sj1*x1048);
IkReal x1092=((0.1948)*x1047);
IkReal x1093=(sj1*x1049);
IkReal x1094=(cj1*x1048);
evalcond[0]=((((-1.0)*x1060*x1082))+((cj4*x1087))+((cj1*r02))+(((-1.0)*cj0*sj1*x1059))+((sj1*x1063)));
evalcond[1]=((((-1.0)*x1060*x1083))+(((-1.0)*x1060*x1088))+(((-1.0)*cj0*cj1*x1059))+(((-1.0)*sj1*x1055))+((cj1*x1063)));
evalcond[2]=((-0.1827)+x1054+(((-0.015)*x1088))+(((-0.015)*x1083))+(((0.027)*x1087))+(((-0.027)*x1082))+((sj0*x1076))+(((-1.0)*x1072*x1074))+(((-1.0)*x1086)));
evalcond[3]=((((0.015)*x1082))+(((-0.015)*x1087))+(((-1.0)*x1071*x1072))+(((-1.0)*x1092))+(((-1.0)*x1053))+(((-0.027)*x1088))+(((-0.027)*x1083))+((sj0*x1061)));
evalcond[4]=((((-1.0)*x1059*x1061))+(((-1.0)*sj0*x1055*x1074))+((x1052*x1053))+(((-1.0)*x1058*x1082))+((sj4*x1092))+((x1062*x1083))+((x1062*x1088))+((x1051*x1053))+((x1058*x1087))+((r00*x1071))+(((-1.0)*sj1*x1055*x1057)));
evalcond[5]=((((-1.0)*r00*x1074))+(((-0.1827)*x1052))+(((-0.1827)*x1051))+(((-1.0)*sj0*x1055*x1071))+(((-1.0)*sj4*x1086))+((x1052*x1054))+(((-1.0)*x1058*x1083))+(((-1.0)*x1058*x1088))+((x1062*x1087))+((x1051*x1054))+(((-1.0)*cj1*x1055*x1057))+(((-1.0)*x1062*x1082))+((r01*x1076)));
evalcond[6]=((((-2.0)*x1054*x1080))+(((-1.0)*x1063*x1069))+((x1068*x1069))+(((0.3654)*x1080))+(((-1.0)*x1063*x1085))+(((-1.0)*r02*x1067))+((x1063*x1093))+((x1063*x1091))+((x1078*x1087))+((x1052*x1066*x1076))+(((-1.0)*cj0*x1059*x1093))+(((-1.0)*r01*x1054*x1066))+((r02*x1090))+((r02*x1094))+(((-1.0)*cj0*x1059*x1085))+((x1053*x1066*x1073))+((x1068*x1091))+(((-1.0)*x1055*x1089))+((x1070*x1082))+(((-1.0)*x1051*x1066*x1076))+((x1046*x1075))+((r01*x1077))+((x1047*x1065))+(((-2.0)*x1053*x1084))+((x1064*x1088))+((x1064*x1083))+((r02*x1079)));
evalcond[7]=((((-2.0)*x1054*x1084))+(((-1.0)*x1063*x1079))+((x1054*x1066*x1073))+(((0.3654)*x1084))+((x1052*x1061*x1066))+(((-1.0)*r02*x1069))+(((-1.0)*x1073*x1077))+(((-1.0)*x1064*x1082))+(((2.0)*x1053*x1080))+((x1063*x1094))+(((-1.0)*cj0*x1059*x1090))+((x1063*x1089))+(((-1.0)*x1078*x1088))+((r02*x1093))+(((-1.0)*cj0*x1059*x1089))+(((-1.0)*x1051*x1061*x1066))+(((-1.0)*x1055*x1091))+((x1068*x1094))+(((0.3654)*cj0*x1056))+(((-1.0)*x1063*x1090))+(((-1.0)*x1055*x1085))+((x1070*x1083))+((x1063*x1067))+((r01*x1053*x1066))+(((-1.0)*x1067*x1068))+(((-1.0)*x1046*x1065))+((x1047*x1075))+((x1064*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1095=(sj1*sj3);
IkReal x1096=(r00*sj0);
IkReal x1097=(cj0*r01);
IkReal x1098=(cj1*cj3);
IkReal x1099=(cj1*sj3);
IkReal x1100=(cj3*sj1);
IkReal x1101=((1.0)*r02);
CheckValue<IkReal> x1102=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1102.valid){
continue;
}
CheckValue<IkReal> x1103 = IKatan2WithCheck(IkReal((((x1095*x1097))+(((-1.0)*x1097*x1098))+(((-1.0)*x1099*x1101))+(((-1.0)*x1100*x1101))+((x1096*x1098))+(((-1.0)*x1095*x1096)))),IkReal((((r02*x1098))+(((-1.0)*x1097*x1099))+((x1096*x1100))+(((-1.0)*x1097*x1100))+(((-1.0)*x1095*x1101))+((x1096*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1103.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1102.value)))+(x1103.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1104=IKcos(j2);
IkReal x1105=IKsin(j2);
IkReal x1106=py*py;
IkReal x1107=pz*pz;
IkReal x1108=px*px;
IkReal x1109=(r01*sj0);
IkReal x1110=(cj0*r00);
IkReal x1111=(pz*sj1);
IkReal x1112=(cj1*pz);
IkReal x1113=((1.0)*r02);
IkReal x1114=(pz*r01);
IkReal x1115=(cj0*px);
IkReal x1116=((0.015)*sj4);
IkReal x1117=((1.0)*r01);
IkReal x1118=((1.0)*cj4);
IkReal x1119=(cj1*px);
IkReal x1120=((0.027)*sj4);
IkReal x1121=(r00*sj0);
IkReal x1122=((0.00081)*cj4);
IkReal x1123=((0.005844)*cj4);
IkReal x1124=((2.0)*py);
IkReal x1125=((0.03337929)*cj1);
IkReal x1126=(cj0*r01);
IkReal x1127=((0.03337929)*sj1);
IkReal x1128=((0.03845104)*cj4);
IkReal x1129=(cj1*py);
IkReal x1130=((1.0)*cj0);
IkReal x1131=(cj0*r02);
IkReal x1132=(py*sj1);
IkReal x1133=((0.0105192)*cj4);
IkReal x1134=(px*sj1);
IkReal x1135=((0.3654)*py);
IkReal x1136=((0.03744304)*cj4);
IkReal x1137=((0.3654)*pz);
IkReal x1138=(px*r00);
IkReal x1139=(sj1*x1124);
IkReal x1140=(cj3*x1104);
IkReal x1141=(cj3*x1105);
IkReal x1142=(px*r02*sj0);
IkReal x1143=(sj1*x1108);
IkReal x1144=((0.1948)*x1104);
IkReal x1145=(sj3*x1105);
IkReal x1146=(sj3*x1104);
IkReal x1147=(cj1*x1107);
IkReal x1148=(cj1*x1108);
IkReal x1149=(sj1*x1106);
IkReal x1150=((0.1948)*x1105);
IkReal x1151=(sj1*x1107);
IkReal x1152=(cj1*x1106);
evalcond[0]=((((-1.0)*x1118*x1140))+((sj1*x1121))+((cj1*r02))+(((-1.0)*cj0*sj1*x1117))+((cj4*x1145)));
evalcond[1]=((((-1.0)*x1118*x1141))+(((-1.0)*x1118*x1146))+(((-1.0)*cj0*cj1*x1117))+(((-1.0)*sj1*x1113))+((cj1*x1121)));
evalcond[2]=((-0.1827)+x1112+((sj0*x1134))+(((-1.0)*x1130*x1132))+(((-1.0)*x1144))+(((0.027)*x1145))+(((-0.027)*x1140))+(((-0.015)*x1141))+(((-0.015)*x1146)));
evalcond[3]=((((-1.0)*x1150))+(((0.015)*x1140))+(((-1.0)*x1111))+((sj0*x1119))+(((-0.027)*x1146))+(((-0.027)*x1141))+(((-1.0)*x1129*x1130))+(((-0.015)*x1145)));
evalcond[4]=(((x1109*x1111))+((r00*x1129))+((x1110*x1111))+(((-1.0)*sj1*x1113*x1115))+((x1116*x1145))+((x1120*x1141))+((x1120*x1146))+((sj4*x1150))+(((-1.0)*sj0*x1113*x1132))+(((-1.0)*x1117*x1119))+(((-1.0)*x1116*x1140)));
evalcond[5]=(((x1109*x1112))+((r01*x1134))+(((-1.0)*x1120*x1140))+((x1110*x1112))+(((-1.0)*r00*x1132))+(((-1.0)*sj4*x1144))+(((-1.0)*cj1*x1113*x1115))+((x1120*x1145))+(((-0.1827)*x1110))+(((-0.1827)*x1109))+(((-1.0)*sj0*x1113*x1129))+(((-1.0)*x1116*x1146))+(((-1.0)*x1116*x1141)));
evalcond[6]=(((x1128*x1140))+(((-1.0)*r01*x1112*x1124))+((r01*x1135))+(((-1.0)*x1121*x1127))+((x1104*x1133))+((x1121*x1151))+(((-1.0)*x1121*x1143))+((r02*x1152))+((x1126*x1149))+(((-2.0)*x1112*x1138))+((x1121*x1149))+(((-1.0)*x1109*x1124*x1134))+((x1111*x1124*x1131))+((r02*x1148))+(((-1.0)*x1113*x1147))+((x1122*x1146))+((x1122*x1141))+(((-1.0)*cj0*x1117*x1143))+((x1110*x1124*x1134))+(((0.3654)*x1138))+(((-1.0)*cj0*x1117*x1151))+(((-1.0)*r02*x1125))+((r02*x1137))+((x1105*x1123))+(((-2.0)*x1111*x1142))+((x1136*x1145))+((x1126*x1127)));
evalcond[7]=((((-1.0)*x1136*x1146))+(((2.0)*x1111*x1138))+(((-1.0)*x1109*x1119*x1124))+((x1128*x1141))+(((-2.0)*x1112*x1142))+((x1121*x1125))+(((-1.0)*x1131*x1135))+(((0.3654)*x1142))+((x1121*x1152))+(((-1.0)*x1121*x1137))+(((0.3654)*cj0*x1114))+(((-1.0)*x1121*x1148))+((r02*x1151))+((x1121*x1147))+((x1126*x1152))+(((-1.0)*x1113*x1149))+(((-1.0)*x1113*x1143))+((x1122*x1145))+((r01*x1111*x1124))+((x1112*x1124*x1131))+(((-1.0)*cj0*x1117*x1147))+(((-1.0)*cj0*x1117*x1148))+(((-1.0)*x1104*x1123))+((x1110*x1119*x1124))+(((-1.0)*r02*x1127))+(((-1.0)*x1125*x1126))+((x1105*x1133))+(((-1.0)*x1122*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1153=((456.75)*sj1);
IkReal x1154=(cj0*r01);
IkReal x1155=(r00*sj0);
IkReal x1156=((456.75)*cj1);
IkReal x1157=((2500.0)*r02);
IkReal x1158=((2500.0)*pz);
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1159.valid){
continue;
}
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal((((cj0*py*x1157))+(((-1.0)*x1154*x1158))+(((-1.0)*x1155*x1156))+(((-1.0)*px*sj0*x1157))+((r02*x1153))+(((-37.5)*cj4))+((x1154*x1156))+((x1155*x1158)))),IkReal((((pz*x1157))+(((-67.5)*cj4))+(((2500.0)*px*r00))+((x1153*x1154))+(((-1.0)*r02*x1156))+(((2500.0)*py*r01))+(((-1.0)*x1153*x1155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1159.value)))+(x1160.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1161=IKcos(j3);
IkReal x1162=IKsin(j3);
IkReal x1163=px*px;
IkReal x1164=py*py;
IkReal x1165=pz*pz;
IkReal x1166=(cj0*sj1);
IkReal x1167=((0.1827)*r01);
IkReal x1168=((0.3654)*py);
IkReal x1169=(cj0*cj1);
IkReal x1170=((0.1827)*r02);
IkReal x1171=(py*sj0);
IkReal x1172=(cj0*px);
IkReal x1173=(cj1*sj0);
IkReal x1174=(r00*sj1);
IkReal x1175=((1.0)*r01);
IkReal x1176=(px*r00);
IkReal x1177=((0.3654)*pz);
IkReal x1178=(r01*sj0);
IkReal x1179=(px*r02);
IkReal x1180=((0.1948)*cj4);
IkReal x1181=(cj0*r00);
IkReal x1182=((1.0)*x1181);
IkReal x1183=((2.0)*pz*r02);
IkReal x1184=((0.3654)*px*sj1);
IkReal x1185=((0.005844)*x1162);
IkReal x1186=((0.0105192)*x1161);
evalcond[0]=((((-1.0)*x1166*x1167))+((cj1*x1170))+(((0.1827)*sj0*x1174))+(((-1.0)*py*x1175))+((x1161*x1180))+(((0.027)*cj4))+(((-1.0)*pz*r02))+(((-1.0)*x1176)));
evalcond[1]=((0.00552175)+(((-1.0)*x1166*x1168))+x1186+x1185+((cj1*x1177))+((sj0*x1184))+(((-1.0)*x1163))+(((-1.0)*x1164))+(((-1.0)*x1165)));
evalcond[2]=(((pz*r00*sj0))+((sj1*x1170))+((cj0*py*r02))+(((-1.0)*cj0*pz*x1175))+(((-1.0)*sj0*x1179))+(((-0.1827)*r00*x1173))+(((-1.0)*x1162*x1180))+((x1167*x1169))+(((-0.015)*cj4)));
evalcond[3]=(((x1164*x1178))+(((-1.0)*r02*x1168*x1173))+((sj4*x1186))+((sj4*x1185))+(((-1.0)*x1168*x1174))+((r01*x1184))+(((2.0)*x1171*x1176))+(((-1.0)*sj0*x1163*x1175))+((x1172*x1183))+(((0.03890104)*sj4))+(((-0.03337929)*x1178))+((x1171*x1183))+((r00*x1169*x1177))+((x1163*x1181))+(((-1.0)*x1165*x1182))+(((-1.0)*sj0*x1165*x1175))+(((2.0)*py*r01*x1172))+((r01*x1173*x1177))+(((-1.0)*x1164*x1182))+(((-0.3654)*x1169*x1179))+(((-0.03337929)*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1187=(cj3*cj4);
j2eval[0]=((((-7.21481481481482)*x1187))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x1187))+(((-0.027)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1188=(cj4*sj3);
j2eval[0]=((((-12.9866666666667)*x1188))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-0.1948)*x1188))+(((-0.015)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1189=(px*sj0);
IkReal x1190=((0.027)*cj3);
IkReal x1191=(cj1*pz);
IkReal x1192=(cj0*py);
IkReal x1193=(sj1*sj3);
IkReal x1194=(pz*sj1);
IkReal x1195=((0.015)*cj3);
IkReal x1196=((0.1948)*sj1);
IkReal x1197=((0.027)*sj3);
IkReal x1198=((0.015)*cj1*sj3);
IkReal x1199=(cj1*x1192);
IkReal x1200=(sj1*x1195);
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x1201.valid){
continue;
}
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal(((((0.1948)*cj1*x1189))+(((-1.0)*x1191*x1197))+(((-1.0)*x1190*x1194))+(((-1.0)*x1190*x1199))+((x1189*x1200))+(((-0.1948)*x1199))+(((-0.1948)*x1194))+(((-0.0027405)*cj3))+((x1189*x1198))+(((-0.015)*pz*x1193))+(((0.0049329)*sj3))+(((0.027)*x1192*x1193))+(((-0.027)*x1189*x1193))+(((-1.0)*x1192*x1198))+((x1191*x1195))+(((-1.0)*x1192*x1200))+((cj1*x1189*x1190)))),IkReal(((-0.03558996)+(((0.1948)*x1191))+((x1194*x1195))+(((-0.027)*pz*x1193))+((x1195*x1199))+(((0.015)*sj3*x1191))+(((-1.0)*x1197*x1199))+(((-0.015)*x1192*x1193))+((x1189*x1196))+(((0.015)*x1189*x1193))+(((-1.0)*sj1*x1190*x1192))+(((-0.0049329)*cj3))+((sj1*x1189*x1190))+(((-0.0027405)*sj3))+(((-1.0)*cj1*x1189*x1195))+(((-1.0)*x1192*x1196))+((x1190*x1191))+((cj1*x1189*x1197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1201.value)))+(x1202.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1203=IKcos(j2);
IkReal x1204=IKsin(j2);
IkReal x1205=(px*sj1);
IkReal x1206=(cj1*sj0);
IkReal x1207=(cj0*r00);
IkReal x1208=(pz*sj1);
IkReal x1209=(cj1*px);
IkReal x1210=(cj1*py);
IkReal x1211=((1.0)*cj0);
IkReal x1212=(py*sj1);
IkReal x1213=(r01*sj0);
IkReal x1214=(cj1*pz);
IkReal x1215=((0.1948)*x1204);
IkReal x1216=((0.1948)*x1203);
IkReal x1217=((0.027)*x1203);
IkReal x1218=((0.015)*x1204);
IkReal x1219=(r02*x1211);
IkReal x1220=((1.0)*py*r02);
IkReal x1221=((0.027)*x1204);
IkReal x1222=((0.015)*x1203);
IkReal x1223=(sj3*x1218);
IkReal x1224=(cj3*x1221);
IkReal x1225=(sj3*x1217);
IkReal x1226=(cj3*x1222);
IkReal x1227=(sj3*x1221);
IkReal x1228=(sj3*x1222);
IkReal x1229=(cj3*x1217);
IkReal x1230=(cj3*x1218);
IkReal x1231=(x1225+x1224+x1223+x1215);
IkReal x1232=(x1230+x1229+x1228+x1216);
evalcond[0]=((-0.1827)+x1227+x1214+(((-1.0)*x1232))+((sj0*x1205))+(((-1.0)*x1211*x1212)));
evalcond[1]=(x1226+((px*x1206))+(((-1.0)*x1231))+(((-1.0)*x1210*x1211))+(((-1.0)*x1208)));
evalcond[2]=(x1231+(((-1.0)*x1226))+(((-1.0)*r02*sj0*x1212))+((r00*x1210))+(((-1.0)*x1205*x1219))+((x1208*x1213))+((x1207*x1208))+(((-1.0)*r01*x1209)));
evalcond[3]=(x1227+((pz*r01*x1206))+(((-1.0)*x1209*x1219))+(((-0.1827)*x1207))+(((-1.0)*x1232))+(((-1.0)*x1206*x1220))+((x1207*x1214))+(((-0.1827)*x1213))+((r01*x1205))+(((-1.0)*r00*x1212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((6.65657768651609)+sj3+(((1.8)*cj3)));
j2eval[1]=IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1233=(px*sj0);
IkReal x1234=((0.027)*cj3);
IkReal x1235=(cj1*pz);
IkReal x1236=(cj0*py);
IkReal x1237=(sj1*sj3);
IkReal x1238=(pz*sj1);
IkReal x1239=((0.015)*cj3);
IkReal x1240=((0.1948)*sj1);
IkReal x1241=((0.027)*sj3);
IkReal x1242=((0.015)*cj1*sj3);
IkReal x1243=(cj1*x1236);
IkReal x1244=(sj1*x1239);
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(IKsign(((0.03890104)+(((0.0105192)*cj3))+(((0.005844)*sj3)))),-1);
if(!x1245.valid){
continue;
}
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal(((((0.027)*x1236*x1237))+(((-0.1948)*x1243))+(((-0.015)*pz*x1237))+((x1235*x1239))+(((-0.0027405)*cj3))+(((-1.0)*x1236*x1242))+(((-1.0)*x1236*x1244))+((x1233*x1242))+((x1233*x1244))+(((-1.0)*x1235*x1241))+(((0.1948)*cj1*x1233))+(((0.0049329)*sj3))+(((-1.0)*x1234*x1238))+((cj1*x1233*x1234))+(((-0.1948)*x1238))+(((-0.027)*x1233*x1237))+(((-1.0)*x1234*x1243)))),IkReal(((-0.03558996)+((x1234*x1235))+((x1239*x1243))+(((-0.015)*x1236*x1237))+((sj1*x1233*x1234))+(((-1.0)*cj1*x1233*x1239))+(((-1.0)*x1236*x1240))+((x1233*x1240))+(((-0.027)*pz*x1237))+(((-0.0049329)*cj3))+((x1238*x1239))+(((-0.0027405)*sj3))+(((-1.0)*sj1*x1234*x1236))+(((0.1948)*x1235))+(((-1.0)*x1241*x1243))+((cj1*x1233*x1241))+(((0.015)*sj3*x1235))+(((0.015)*x1233*x1237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1245.value)))+(x1246.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1247=IKcos(j2);
IkReal x1248=IKsin(j2);
IkReal x1249=(px*sj1);
IkReal x1250=(cj1*sj0);
IkReal x1251=(cj0*r00);
IkReal x1252=(pz*sj1);
IkReal x1253=(cj1*px);
IkReal x1254=(cj1*py);
IkReal x1255=((1.0)*cj0);
IkReal x1256=(py*sj1);
IkReal x1257=(r01*sj0);
IkReal x1258=(cj1*pz);
IkReal x1259=((0.1948)*x1248);
IkReal x1260=((0.1948)*x1247);
IkReal x1261=((0.027)*x1247);
IkReal x1262=((0.015)*x1248);
IkReal x1263=(r02*x1255);
IkReal x1264=((1.0)*py*r02);
IkReal x1265=((0.027)*x1248);
IkReal x1266=((0.015)*x1247);
IkReal x1267=(cj3*x1266);
IkReal x1268=(sj3*x1262);
IkReal x1269=(cj3*x1265);
IkReal x1270=(sj3*x1261);
IkReal x1271=(sj3*x1266);
IkReal x1272=(cj3*x1261);
IkReal x1273=(cj3*x1262);
IkReal x1274=(sj3*x1265);
IkReal x1275=(x1271+x1272+x1273+x1260);
IkReal x1276=(x1270+x1269+x1268+x1259);
evalcond[0]=((-0.1827)+x1274+x1258+(((-1.0)*x1275))+(((-1.0)*x1255*x1256))+((sj0*x1249)));
evalcond[1]=(x1267+(((-1.0)*x1276))+(((-1.0)*x1254*x1255))+(((-1.0)*x1252))+((px*x1250)));
evalcond[2]=((((-1.0)*r01*x1253))+(((-1.0)*x1249*x1263))+x1267+(((-1.0)*x1276))+(((-1.0)*r02*sj0*x1256))+((x1252*x1257))+((x1251*x1252))+((r00*x1254)));
evalcond[3]=(((pz*r01*x1250))+x1275+(((-1.0)*x1274))+(((-1.0)*x1253*x1263))+(((-1.0)*r00*x1256))+((r01*x1249))+(((-1.0)*x1250*x1264))+((x1251*x1258))+(((-0.1827)*x1257))+(((-0.1827)*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1277=((0.348076515568243)*sj1);
IkReal x1278=(cj0*py);
IkReal x1279=(px*sj0);
IkReal x1280=(cj1*pz);
IkReal x1281=((4.50693249433931)*sj1);
IkReal x1282=((0.348076515568243)*cj1);
IkReal x1283=((4.50693249433931)*x1279);
if( IKabs(((-0.063593579394318)+((x1277*x1279))+(((-1.0)*x1277*x1278))+(((-4.50693249433931)*cj1*x1278))+((cj1*x1283))+(((0.348076515568243)*x1280))+(((-1.0)*pz*x1281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.823416566715791)+((pz*x1277))+((x1279*x1281))+((x1278*x1282))+(((4.50693249433931)*x1280))+(((-1.0)*x1278*x1281))+(((-1.0)*x1279*x1282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.063593579394318)+((x1277*x1279))+(((-1.0)*x1277*x1278))+(((-4.50693249433931)*cj1*x1278))+((cj1*x1283))+(((0.348076515568243)*x1280))+(((-1.0)*pz*x1281))))+IKsqr(((-0.823416566715791)+((pz*x1277))+((x1279*x1281))+((x1278*x1282))+(((4.50693249433931)*x1280))+(((-1.0)*x1278*x1281))+(((-1.0)*x1279*x1282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.063593579394318)+((x1277*x1279))+(((-1.0)*x1277*x1278))+(((-4.50693249433931)*cj1*x1278))+((cj1*x1283))+(((0.348076515568243)*x1280))+(((-1.0)*pz*x1281))), ((-0.823416566715791)+((pz*x1277))+((x1279*x1281))+((x1278*x1282))+(((4.50693249433931)*x1280))+(((-1.0)*x1278*x1281))+(((-1.0)*x1279*x1282))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1284=IKcos(j2);
IkReal x1285=IKsin(j2);
IkReal x1286=py*py;
IkReal x1287=pz*pz;
IkReal x1288=px*px;
IkReal x1289=(py*r00);
IkReal x1290=((1.0)*sj1);
IkReal x1291=(r01*sj1);
IkReal x1292=(cj1*r02);
IkReal x1293=(cj0*pz);
IkReal x1294=((2.0)*py);
IkReal x1295=(cj1*sj0);
IkReal x1296=(r00*sj1);
IkReal x1297=(pz*r01);
IkReal x1298=(pz*r02);
IkReal x1299=(cj0*px);
IkReal x1300=((2.0)*sj1);
IkReal x1301=(px*sj0);
IkReal x1302=(pz*sj0);
IkReal x1303=((0.3654)*r00);
IkReal x1304=(cj0*r01);
IkReal x1305=((1.0)*cj1);
IkReal x1306=(px*r01);
IkReal x1307=((2.0)*cj1);
IkReal x1308=((0.3654)*r02);
IkReal x1309=((0.3654)*r01);
IkReal x1310=(py*sj0);
IkReal x1311=(cj0*py);
IkReal x1312=((0.22056480436)*sj4);
IkReal x1313=(r02*sj1);
IkReal x1314=(px*pz);
IkReal x1315=(cj4*x1284);
IkReal x1316=((0.0170345193)*x1285);
IkReal x1317=(cj4*x1285);
IkReal x1318=((1.0)*x1287);
IkReal x1319=(cj1*x1304);
IkReal x1320=((0.0170345193)*x1284);
IkReal x1321=(r00*x1288);
evalcond[0]=((-0.1827)+(((-1.0)*x1316))+((cj1*pz))+(((-0.22056480436)*x1284))+(((-1.0)*x1290*x1311))+((sj1*x1301)));
evalcond[1]=(x1320+(((-1.0)*x1305*x1311))+(((-0.22056480436)*x1285))+(((-1.0)*pz*x1290))+((px*x1295)));
evalcond[2]=(x1292+(((-0.99703093)*x1315))+((sj0*x1296))+(((-0.07700205)*x1317))+(((-1.0)*x1290*x1304)));
evalcond[3]=((((-0.99703093)*x1317))+(((0.07700205)*x1315))+(((-1.0)*r02*x1290))+((r00*x1295))+(((-1.0)*x1304*x1305)));
evalcond[4]=(((x1291*x1302))+((x1285*x1312))+((x1293*x1296))+(((-1.0)*sj4*x1320))+(((-1.0)*x1305*x1306))+(((-1.0)*r02*x1290*x1310))+(((-1.0)*r02*x1290*x1299))+((cj1*x1289)));
evalcond[5]=((((-0.1827)*cj0*r00))+((x1295*x1297))+(((-1.0)*x1289*x1290))+((cj1*r00*x1293))+(((-1.0)*x1292*x1310))+(((-1.0)*sj4*x1316))+(((-1.0)*x1292*x1299))+(((-0.1827)*r01*sj0))+((px*x1291))+(((-1.0)*x1284*x1312)));
evalcond[6]=(((cj0*x1286*x1291))+(((0.3654)*x1298))+(((0.003768404215068)*x1317))+(((-1.0)*x1291*x1294*x1301))+((sj0*x1287*x1296))+((px*x1303))+((x1286*x1292))+(((0.0487937045101672)*x1315))+((py*x1309))+((x1289*x1299*x1300))+((sj0*x1286*x1296))+(((-1.0)*cj1*x1294*x1297))+(((0.03337929)*cj0*x1291))+(((-1.0)*x1288*x1290*x1304))+(((-1.0)*x1298*x1300*x1301))+((x1288*x1292))+(((-0.03337929)*x1292))+(((-1.0)*x1292*x1318))+((x1293*x1294*x1313))+(((-0.03337929)*sj0*x1296))+(((-1.0)*x1287*x1290*x1304))+(((-1.0)*r00*x1307*x1314))+(((-1.0)*sj0*x1290*x1321)));
evalcond[7]=((((-1.0)*x1288*x1304*x1305))+(((-1.0)*r02*x1286*x1290))+(((-1.0)*x1308*x1311))+(((0.0487937045101672)*x1317))+(((-1.0)*x1295*x1321))+((x1289*x1299*x1307))+((r00*x1287*x1295))+((pz*x1291*x1294))+(((-2.0)*pz*x1292*x1301))+(((0.03337929)*r00*x1295))+(((-0.03337929)*x1313))+(((-0.03337929)*x1319))+((x1293*x1309))+((r00*x1286*x1295))+((x1286*x1319))+((x1287*x1313))+(((-0.003768404215068)*x1315))+(((-1.0)*x1294*x1295*x1306))+(((-1.0)*r02*x1288*x1290))+(((-1.0)*x1302*x1303))+((x1301*x1308))+(((2.0)*x1296*x1314))+((x1292*x1293*x1294))+(((-1.0)*x1287*x1304*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.0770020533880904)+sj3)))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1322=((5.9623324874641)*pz);
IkReal x1323=(cj0*py);
IkReal x1324=((0.460479037630733)*cj1);
IkReal x1325=((0.460479037630733)*sj1);
IkReal x1326=((5.9623324874641)*sj1);
IkReal x1327=(px*sj0);
IkReal x1328=((5.9623324874641)*cj1);
if( IKabs(((0.084129520175135)+(((-1.0)*x1323*x1328))+((x1323*x1325))+((x1327*x1328))+(((-1.0)*sj1*x1322))+(((-1.0)*x1325*x1327))+(((-1.0)*pz*x1324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.08931814545969)+(((-1.0)*x1323*x1324))+(((-1.0)*x1323*x1326))+((x1324*x1327))+((x1326*x1327))+((cj1*x1322))+(((-1.0)*pz*x1325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.084129520175135)+(((-1.0)*x1323*x1328))+((x1323*x1325))+((x1327*x1328))+(((-1.0)*sj1*x1322))+(((-1.0)*x1325*x1327))+(((-1.0)*pz*x1324))))+IKsqr(((-1.08931814545969)+(((-1.0)*x1323*x1324))+(((-1.0)*x1323*x1326))+((x1324*x1327))+((x1326*x1327))+((cj1*x1322))+(((-1.0)*pz*x1325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.084129520175135)+(((-1.0)*x1323*x1328))+((x1323*x1325))+((x1327*x1328))+(((-1.0)*sj1*x1322))+(((-1.0)*x1325*x1327))+(((-1.0)*pz*x1324))), ((-1.08931814545969)+(((-1.0)*x1323*x1324))+(((-1.0)*x1323*x1326))+((x1324*x1327))+((x1326*x1327))+((cj1*x1322))+(((-1.0)*pz*x1325))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1329=IKsin(j2);
IkReal x1330=IKcos(j2);
IkReal x1331=py*py;
IkReal x1332=pz*pz;
IkReal x1333=px*px;
IkReal x1334=(cj1*r02);
IkReal x1335=((2.0)*py);
IkReal x1336=(cj1*sj0);
IkReal x1337=(cj0*pz);
IkReal x1338=(r00*sj1);
IkReal x1339=(pz*r01);
IkReal x1340=(cj0*r01);
IkReal x1341=(pz*r02);
IkReal x1342=(cj0*r00);
IkReal x1343=(cj0*px);
IkReal x1344=(sj0*sj1);
IkReal x1345=((2.0)*px);
IkReal x1346=((1.0)*sj1);
IkReal x1347=((0.3654)*sj0);
IkReal x1348=(pz*r00);
IkReal x1349=(cj1*px);
IkReal x1350=((0.3654)*r01);
IkReal x1351=((1.0)*cj1);
IkReal x1352=(py*sj0);
IkReal x1353=(cj0*py);
IkReal x1354=(cj1*r00);
IkReal x1355=(r02*sj1);
IkReal x1356=((0.16672513414)*x1329);
IkReal x1357=(cj4*x1330);
IkReal x1358=(px*r01*sj1);
IkReal x1359=((0.0128764086)*x1330);
IkReal x1360=((0.16672513414)*x1330);
IkReal x1361=((1.0)*x1332);
IkReal x1362=(r02*x1346);
IkReal x1363=(cj4*x1329);
IkReal x1364=((1.0)*x1333);
IkReal x1365=((0.0128764086)*x1329);
evalcond[0]=((-0.1827)+x1365+(((-1.0)*x1346*x1353))+((px*x1344))+((cj1*pz))+(((-1.0)*x1360)));
evalcond[1]=(((px*x1336))+(((-1.0)*x1359))+(((-1.0)*x1356))+(((-1.0)*pz*x1346))+(((-1.0)*x1351*x1353)));
evalcond[2]=(x1334+(((-1.0)*x1340*x1346))+(((0.99703093)*x1357))+((sj0*x1338))+(((-0.07700205)*x1363)));
evalcond[3]=(((r00*x1336))+(((0.99703093)*x1363))+(((-1.0)*x1340*x1351))+(((0.07700205)*x1357))+(((-1.0)*x1362)));
evalcond[4]=(((x1337*x1338))+((x1339*x1344))+((sj4*x1359))+((sj4*x1356))+(((-1.0)*py*r02*x1344))+(((-1.0)*x1343*x1362))+((py*x1354))+(((-1.0)*r01*x1349)));
evalcond[5]=(x1358+((x1336*x1339))+(((-1.0)*sj4*x1360))+(((-1.0)*x1334*x1352))+((sj4*x1365))+(((-1.0)*x1334*x1343))+(((-0.1827)*x1342))+((x1337*x1354))+(((-1.0)*py*x1338))+(((-0.1827)*r01*sj0)));
evalcond[6]=((((-1.0)*cj1*x1335*x1339))+(((0.3654)*x1341))+((x1331*x1334))+(((-1.0)*cj1*x1345*x1348))+((sj0*x1332*x1338))+(((0.002153214108468)*x1363))+((x1335*x1338*x1343))+(((-0.0278800478311672)*x1357))+(((0.3654)*px*r00))+(((-1.0)*x1333*x1340*x1346))+((sj1*x1331*x1340))+(((-1.0)*px*r01*x1335*x1344))+(((-0.03337929)*sj0*x1338))+((py*x1350))+((x1333*x1334))+(((-1.0)*x1341*x1344*x1345))+(((0.03337929)*sj1*x1340))+(((-1.0)*sj0*x1338*x1364))+(((-1.0)*x1334*x1361))+((sj0*x1331*x1338))+(((-1.0)*x1332*x1340*x1346))+(((-0.03337929)*x1334))+((x1335*x1337*x1355)));
evalcond[7]=(((pz*x1338*x1345))+(((-1.0)*x1331*x1362))+((x1335*x1342*x1349))+(((-0.03337929)*cj1*x1340))+(((0.03337929)*r00*x1336))+((x1332*x1355))+(((-1.0)*x1347*x1348))+((cj1*x1331*x1340))+((r00*x1331*x1336))+(((-1.0)*px*r01*x1335*x1336))+(((-1.0)*x1333*x1340*x1351))+(((-0.3654)*r02*x1353))+((x1334*x1335*x1337))+(((-0.002153214108468)*x1357))+(((-0.0278800478311672)*x1363))+((r00*x1332*x1336))+(((-1.0)*r00*x1336*x1364))+((x1337*x1350))+(((-1.0)*pz*sj0*x1334*x1345))+(((-0.03337929)*x1355))+((px*r02*x1347))+(((-1.0)*x1332*x1340*x1351))+(((-1.0)*x1333*x1362))+((sj1*x1335*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((0.138603696098563)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1366=((4.76312520699347)*cj1);
IkReal x1367=(cj0*py);
IkReal x1368=(px*sj0);
IkReal x1369=((0.666621037898606)*sj1);
IkReal x1370=((0.666621037898606)*cj1);
IkReal x1371=((4.76312520699347)*sj1);
if( IKabs(((0.121791663624075)+(((-1.0)*x1366*x1367))+((x1367*x1369))+((x1366*x1368))+(((-1.0)*x1368*x1369))+(((-1.0)*pz*x1371))+(((-1.0)*pz*x1370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.870222975317707)+(((-1.0)*pz*x1369))+((x1368*x1370))+((x1368*x1371))+(((-1.0)*x1367*x1371))+(((-1.0)*x1367*x1370))+((pz*x1366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.121791663624075)+(((-1.0)*x1366*x1367))+((x1367*x1369))+((x1366*x1368))+(((-1.0)*x1368*x1369))+(((-1.0)*pz*x1371))+(((-1.0)*pz*x1370))))+IKsqr(((-0.870222975317707)+(((-1.0)*pz*x1369))+((x1368*x1370))+((x1368*x1371))+(((-1.0)*x1367*x1371))+(((-1.0)*x1367*x1370))+((pz*x1366))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.121791663624075)+(((-1.0)*x1366*x1367))+((x1367*x1369))+((x1366*x1368))+(((-1.0)*x1368*x1369))+(((-1.0)*pz*x1371))+(((-1.0)*pz*x1370))), ((-0.870222975317707)+(((-1.0)*pz*x1369))+((x1368*x1370))+((x1368*x1371))+(((-1.0)*x1367*x1371))+(((-1.0)*x1367*x1370))+((pz*x1366))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1372=IKsin(j2);
IkReal x1373=IKcos(j2);
IkReal x1374=py*py;
IkReal x1375=pz*pz;
IkReal x1376=px*px;
IkReal x1377=(sj0*sj1);
IkReal x1378=(px*r01);
IkReal x1379=((2.0)*py);
IkReal x1380=(cj1*sj0);
IkReal x1381=(pz*r01);
IkReal x1382=(cj0*r01);
IkReal x1383=((1.0)*sj1);
IkReal x1384=((2.0)*pz);
IkReal x1385=((0.3654)*r02);
IkReal x1386=(pz*r00);
IkReal x1387=(cj0*r00);
IkReal x1388=((0.03337929)*r00);
IkReal x1389=((0.03337929)*sj1);
IkReal x1390=(px*r02);
IkReal x1391=((0.0288184496213779)*sj4);
IkReal x1392=((0.03337929)*cj1);
IkReal x1393=((1.0)*cj1);
IkReal x1394=(cj1*px);
IkReal x1395=(cj0*py);
IkReal x1396=(py*r00);
IkReal x1397=(px*r00);
IkReal x1398=(r02*x1395);
IkReal x1399=((0.205912919056321)*x1372);
IkReal x1400=(r02*x1374);
IkReal x1401=(sj1*x1387);
IkReal x1402=(cj4*x1372);
IkReal x1403=(cj4*x1373);
IkReal x1404=(r02*x1376);
IkReal x1405=(r00*x1375);
IkReal x1406=(r00*x1374);
IkReal x1407=((0.205912919056321)*x1373);
IkReal x1408=((1.0)*py*r02);
IkReal x1409=((1.0)*r00*x1376);
IkReal x1410=(x1375*x1393);
evalcond[0]=((-0.1827)+((px*x1377))+(((-1.0)*x1383*x1395))+(((-1.0)*x1407))+((cj1*pz))+(((0.0288184496213779)*x1372)));
evalcond[1]=((((-0.0288184496213779)*x1373))+(((-1.0)*x1393*x1395))+(((-1.0)*pz*x1383))+(((-1.0)*x1399))+((px*x1380)));
evalcond[2]=((((0.990347930421403)*x1402))+(((0.1386037)*x1403))+(((-1.0)*x1382*x1383))+((cj1*r02))+((r00*x1377)));
evalcond[3]=((((0.1386037)*x1402))+(((-1.0)*r02*x1383))+(((-1.0)*x1382*x1393))+((r00*x1380))+(((-0.990347930421403)*x1403)));
evalcond[4]=((((-1.0)*cj0*x1383*x1390))+((sj4*x1399))+((cj0*sj1*x1386))+(((-1.0)*x1377*x1408))+((x1377*x1381))+((x1373*x1391))+(((-1.0)*x1378*x1393))+((cj1*x1396)));
evalcond[5]=(((x1380*x1381))+(((-0.1827)*x1387))+(((-1.0)*x1383*x1396))+((cj0*cj1*x1386))+(((-1.0)*cj0*x1390*x1393))+(((-1.0)*sj4*x1407))+(((-1.0)*x1380*x1408))+((x1372*x1391))+((sj1*x1378))+(((-0.1827)*r01*sj0)));
evalcond[6]=(((x1377*x1405))+((x1377*x1406))+(((-1.0)*x1377*x1384*x1390))+(((-1.0)*r02*x1392))+(((-1.0)*x1377*x1388))+(((0.0428133681756858)*x1402))+(((-1.0)*r02*x1410))+((pz*x1385))+(((0.3654)*x1397))+((sj1*x1374*x1382))+(((-1.0)*r00*x1384*x1394))+((px*x1379*x1401))+(((-1.0)*x1377*x1409))+(((0.00599192541079334)*x1403))+(((-1.0)*x1377*x1378*x1379))+(((-1.0)*x1376*x1382*x1383))+((cj0*pz*r02*sj1*x1379))+(((-1.0)*x1375*x1382*x1383))+(((0.3654)*py*r01))+((cj1*x1404))+((cj1*x1400))+((x1382*x1389))+(((-1.0)*cj1*x1379*x1381)));
evalcond[7]=((((-1.0)*x1385*x1395))+((x1379*x1387*x1394))+((x1380*x1388))+(((-1.0)*r02*x1389))+((sj1*x1384*x1397))+((px*sj0*x1385))+((cj1*x1374*x1382))+(((-1.0)*x1382*x1392))+((cj0*cj1*pz*r02*x1379))+(((0.3654)*cj0*x1381))+(((-1.0)*x1382*x1410))+(((-1.0)*x1378*x1379*x1380))+(((-0.0428133681756858)*x1403))+(((-1.0)*x1380*x1409))+(((-1.0)*x1383*x1400))+(((-1.0)*x1383*x1404))+(((0.00599192541079334)*x1402))+((sj1*x1379*x1381))+(((-1.0)*x1376*x1382*x1393))+((x1380*x1406))+((x1380*x1405))+(((-1.0)*x1380*x1384*x1390))+((r02*sj1*x1375))+(((-0.3654)*sj0*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.138603696098563)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1411=((0.779023555870258)*pz);
IkReal x1412=((5.56626109321613)*cj1);
IkReal x1413=(cj0*py);
IkReal x1414=(sj1*x1413);
IkReal x1415=((5.56626109321613)*px*sj0);
IkReal x1416=((0.779023555870258)*px*sj0);
if( IKabs(((-0.142327603657496)+(((-1.0)*x1412*x1413))+((px*sj0*x1412))+(((-0.779023555870258)*x1414))+((cj1*x1411))+(((-5.56626109321613)*pz*sj1))+((sj1*x1416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01695590173059)+((pz*x1412))+(((-1.0)*cj1*x1416))+(((-5.56626109321613)*x1414))+(((0.779023555870258)*cj1*x1413))+((sj1*x1415))+((sj1*x1411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.142327603657496)+(((-1.0)*x1412*x1413))+((px*sj0*x1412))+(((-0.779023555870258)*x1414))+((cj1*x1411))+(((-5.56626109321613)*pz*sj1))+((sj1*x1416))))+IKsqr(((-1.01695590173059)+((pz*x1412))+(((-1.0)*cj1*x1416))+(((-5.56626109321613)*x1414))+(((0.779023555870258)*cj1*x1413))+((sj1*x1415))+((sj1*x1411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.142327603657496)+(((-1.0)*x1412*x1413))+((px*sj0*x1412))+(((-0.779023555870258)*x1414))+((cj1*x1411))+(((-5.56626109321613)*pz*sj1))+((sj1*x1416))), ((-1.01695590173059)+((pz*x1412))+(((-1.0)*cj1*x1416))+(((-5.56626109321613)*x1414))+(((0.779023555870258)*cj1*x1413))+((sj1*x1415))+((sj1*x1411))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1417=IKcos(j2);
IkReal x1418=IKsin(j2);
IkReal x1419=py*py;
IkReal x1420=pz*pz;
IkReal x1421=px*px;
IkReal x1422=(px*sj1);
IkReal x1423=(pz*r00);
IkReal x1424=((1.0)*sj1);
IkReal x1425=(r00*sj0);
IkReal x1426=(r01*sj0);
IkReal x1427=(cj1*pz);
IkReal x1428=((2.0)*py);
IkReal x1429=(px*sj0);
IkReal x1430=(cj0*sj1);
IkReal x1431=((1.0)*cj0);
IkReal x1432=(cj0*r02);
IkReal x1433=((0.3654)*r02);
IkReal x1434=(pz*r01);
IkReal x1435=(cj0*r00);
IkReal x1436=((0.03337929)*cj1);
IkReal x1437=((1.0)*r02);
IkReal x1438=(cj0*cj1);
IkReal x1439=(r02*sj0);
IkReal x1440=(cj0*r01);
IkReal x1441=(cj1*px);
IkReal x1442=((0.3654)*py);
IkReal x1443=(cj1*py);
IkReal x1444=((0.03337929)*sj1);
IkReal x1445=(r02*x1419);
IkReal x1446=((0.176202481143679)*x1418);
IkReal x1447=(cj1*x1420);
IkReal x1448=(cj4*x1418);
IkReal x1449=(r01*x1419);
IkReal x1450=(cj4*x1417);
IkReal x1451=(r02*x1421);
IkReal x1452=((0.176202481143679)*x1417);
IkReal x1453=((0.0246603386213779)*x1418);
IkReal x1454=(cj1*x1421);
IkReal x1455=(sj1*x1420);
IkReal x1456=((0.0246603386213779)*x1417);
evalcond[0]=((-0.1827)+(((-1.0)*x1453))+(((-1.0)*x1452))+x1427+(((-1.0)*cj0*py*x1424))+((sj0*x1422)));
evalcond[1]=((((-1.0)*pz*x1424))+((cj1*x1429))+x1456+(((-1.0)*x1446))+(((-1.0)*x1431*x1443)));
evalcond[2]=(((sj1*x1425))+((cj1*r02))+(((-1.0)*x1424*x1440))+(((-0.990347930421403)*x1448))+(((0.1386037)*x1450)));
evalcond[3]=(((cj1*x1425))+(((-1.0)*cj1*r01*x1431))+(((-1.0)*r02*x1424))+(((0.1386037)*x1448))+(((0.990347930421403)*x1450)));
evalcond[4]=(((sj4*x1446))+(((-1.0)*sj4*x1456))+(((-1.0)*py*x1424*x1439))+((pz*sj1*x1426))+((r00*x1443))+((x1423*x1430))+(((-1.0)*r02*x1422*x1431))+(((-1.0)*r01*x1441)));
evalcond[5]=(((r01*x1422))+(((-1.0)*sj4*x1453))+(((-1.0)*sj4*x1452))+((x1426*x1427))+(((-1.0)*py*r00*x1424))+(((-1.0)*sj0*x1437*x1443))+(((-1.0)*r02*x1431*x1441))+(((-0.1827)*x1426))+((x1423*x1438))+(((-0.1827)*x1435)));
evalcond[6]=(((cj1*x1451))+(((0.00438756176351066)*x1450))+((cj1*x1445))+(((-1.0)*r01*x1427*x1428))+((x1422*x1428*x1435))+(((-1.0)*x1437*x1447))+(((-2.0)*x1423*x1441))+(((-1.0)*r02*x1436))+(((-2.0)*pz*x1422*x1439))+((pz*x1433))+(((-1.0)*x1425*x1444))+(((-1.0)*x1420*x1424*x1440))+((x1430*x1449))+(((-1.0)*x1421*x1424*x1440))+((x1425*x1455))+(((0.3654)*px*r00))+((sj1*x1419*x1425))+(((-0.0313499061696858)*x1448))+(((-1.0)*x1421*x1424*x1425))+(((-1.0)*x1422*x1426*x1428))+(((0.03337929)*r01*x1430))+((r01*x1442))+((pz*r02*x1428*x1430)));
evalcond[7]=(((x1429*x1433))+((x1438*x1449))+(((2.0)*x1422*x1423))+(((-1.0)*r01*x1431*x1454))+((x1425*x1447))+((x1427*x1428*x1432))+((x1428*x1435*x1441))+((cj1*x1419*x1425))+(((-0.3654)*sj0*x1423))+(((-1.0)*x1424*x1445))+((x1425*x1436))+(((-1.0)*x1432*x1442))+(((-1.0)*x1424*x1451))+(((0.00438756176351066)*x1448))+(((-1.0)*r01*x1431*x1447))+(((0.3654)*cj0*x1434))+(((-1.0)*r02*x1444))+(((-1.0)*x1436*x1440))+(((-1.0)*x1426*x1428*x1441))+(((-1.0)*x1425*x1454))+(((0.0313499061696858)*x1450))+((sj1*x1428*x1434))+((r02*x1455))+(((-2.0)*r02*x1427*x1429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1457=((0.015)*cj3);
IkReal x1458=((0.027)*sj3);
IkReal x1459=(cj0*py);
IkReal x1460=(cj1*r02);
IkReal x1461=((0.015)*sj3);
IkReal x1462=((0.027)*cj3);
IkReal x1463=((0.1827)*cj4);
IkReal x1464=(cj4*sj3);
IkReal x1465=(sj3*x1460);
IkReal x1466=(cj0*r01*sj1);
IkReal x1467=(cj3*cj4*sj1);
IkReal x1468=(r00*sj0*sj1);
IkReal x1469=((1.0)*px*sj0);
IkReal x1470=(sj1*x1464);
IkReal x1471=((1.0)*cj1*pz);
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal(((((-1.0)*x1467*x1469))+((cj3*x1463))+((x1459*x1467))+((x1461*x1468))+(((-1.0)*x1462*x1466))+((x1460*x1461))+((x1460*x1462))+(((0.1948)*x1460))+(((0.1948)*x1468))+((x1462*x1468))+(((-1.0)*x1461*x1466))+(((-0.1948)*x1466))+(((-1.0)*cj3*cj4*x1471)))),IkReal(((((-1.0)*x1458*x1466))+((sj3*x1463))+((x1458*x1460))+((x1458*x1468))+(((-1.0)*x1469*x1470))+(((-1.0)*x1457*x1468))+(((-1.0)*x1457*x1460))+((x1457*x1466))+((x1459*x1470))+(((-1.0)*x1464*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x1464))+(((-0.015)*cj4)))),-1);
if(!x1473.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1474=IKcos(j2);
IkReal x1475=IKsin(j2);
IkReal x1476=py*py;
IkReal x1477=pz*pz;
IkReal x1478=px*px;
IkReal x1479=(r01*sj0);
IkReal x1480=(cj0*r00);
IkReal x1481=(pz*sj1);
IkReal x1482=(cj1*pz);
IkReal x1483=((1.0)*r02);
IkReal x1484=(pz*r01);
IkReal x1485=(cj0*px);
IkReal x1486=((0.015)*sj4);
IkReal x1487=((1.0)*r01);
IkReal x1488=((1.0)*cj4);
IkReal x1489=(cj1*px);
IkReal x1490=((0.027)*sj4);
IkReal x1491=(r00*sj0);
IkReal x1492=((0.00081)*cj4);
IkReal x1493=((0.005844)*cj4);
IkReal x1494=((2.0)*py);
IkReal x1495=((0.03337929)*cj1);
IkReal x1496=(cj0*r01);
IkReal x1497=((0.03337929)*sj1);
IkReal x1498=((0.03845104)*cj4);
IkReal x1499=(cj1*py);
IkReal x1500=((1.0)*cj0);
IkReal x1501=(cj0*r02);
IkReal x1502=(py*sj1);
IkReal x1503=((0.0105192)*cj4);
IkReal x1504=(px*sj1);
IkReal x1505=((0.3654)*py);
IkReal x1506=((0.03744304)*cj4);
IkReal x1507=((0.3654)*pz);
IkReal x1508=(px*r00);
IkReal x1509=(sj1*x1494);
IkReal x1510=(cj3*x1474);
IkReal x1511=(cj3*x1475);
IkReal x1512=(px*r02*sj0);
IkReal x1513=(sj1*x1478);
IkReal x1514=((0.1948)*x1474);
IkReal x1515=(sj3*x1475);
IkReal x1516=(sj3*x1474);
IkReal x1517=(cj1*x1477);
IkReal x1518=(cj1*x1478);
IkReal x1519=(sj1*x1476);
IkReal x1520=((0.1948)*x1475);
IkReal x1521=(sj1*x1477);
IkReal x1522=(cj1*x1476);
evalcond[0]=((((-1.0)*x1488*x1510))+((sj1*x1491))+((cj1*r02))+((cj4*x1515))+(((-1.0)*cj0*sj1*x1487)));
evalcond[1]=((((-1.0)*x1488*x1511))+(((-1.0)*x1488*x1516))+((cj1*x1491))+(((-1.0)*sj1*x1483))+(((-1.0)*cj0*cj1*x1487)));
evalcond[2]=((-0.1827)+(((0.027)*x1515))+(((-1.0)*x1514))+(((-0.015)*x1516))+(((-0.015)*x1511))+((sj0*x1504))+(((-0.027)*x1510))+x1482+(((-1.0)*x1500*x1502)));
evalcond[3]=((((-1.0)*x1499*x1500))+((sj0*x1489))+(((-1.0)*x1520))+(((-0.015)*x1515))+(((-1.0)*x1481))+(((-0.027)*x1511))+(((-0.027)*x1516))+(((0.015)*x1510)));
evalcond[4]=((((-1.0)*x1487*x1489))+(((-1.0)*x1486*x1510))+((r00*x1499))+((x1490*x1511))+((x1490*x1516))+((x1480*x1481))+(((-1.0)*sj1*x1483*x1485))+((sj4*x1520))+((x1486*x1515))+(((-1.0)*sj0*x1483*x1502))+((x1479*x1481)));
evalcond[5]=((((-1.0)*x1486*x1511))+(((-1.0)*x1486*x1516))+((x1490*x1515))+(((-1.0)*x1490*x1510))+((x1480*x1482))+(((-1.0)*sj0*x1483*x1499))+((r01*x1504))+(((-1.0)*r00*x1502))+(((-0.1827)*x1480))+(((-0.1827)*x1479))+(((-1.0)*cj1*x1483*x1485))+(((-1.0)*sj4*x1514))+((x1479*x1482)));
evalcond[6]=(((x1474*x1503))+((x1498*x1510))+(((-2.0)*x1481*x1512))+((x1480*x1494*x1504))+((x1506*x1515))+((x1481*x1494*x1501))+((r01*x1505))+(((-2.0)*x1482*x1508))+(((-1.0)*x1483*x1517))+((x1496*x1497))+(((-1.0)*x1491*x1513))+((x1496*x1519))+((x1491*x1519))+(((-1.0)*r02*x1495))+((r02*x1518))+(((-1.0)*x1491*x1497))+((r02*x1507))+(((0.3654)*x1508))+((x1491*x1521))+(((-1.0)*cj0*x1487*x1521))+(((-1.0)*r01*x1482*x1494))+((x1475*x1493))+(((-1.0)*cj0*x1487*x1513))+((r02*x1522))+(((-1.0)*x1479*x1494*x1504))+((x1492*x1511))+((x1492*x1516)));
evalcond[7]=((((-1.0)*x1492*x1510))+((x1498*x1511))+(((-1.0)*x1479*x1489*x1494))+(((2.0)*x1481*x1508))+(((-1.0)*x1506*x1516))+((x1475*x1503))+(((-1.0)*x1495*x1496))+(((-1.0)*x1491*x1507))+(((-1.0)*x1501*x1505))+(((-2.0)*x1482*x1512))+((x1491*x1495))+(((-1.0)*x1474*x1493))+(((-1.0)*x1483*x1513))+(((-1.0)*x1483*x1519))+((x1496*x1522))+(((0.3654)*cj0*x1484))+(((-1.0)*x1491*x1518))+((x1491*x1517))+(((-1.0)*r02*x1497))+((x1482*x1494*x1501))+(((0.3654)*x1512))+((x1480*x1489*x1494))+((x1491*x1522))+((r01*x1481*x1494))+(((-1.0)*cj0*x1487*x1518))+(((-1.0)*cj0*x1487*x1517))+((r02*x1521))+((x1492*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1523=((0.015)*cj3);
IkReal x1524=((0.027)*sj3);
IkReal x1525=(cj0*py);
IkReal x1526=(cj1*r02);
IkReal x1527=((0.015)*sj3);
IkReal x1528=((0.027)*cj3);
IkReal x1529=(cj4*sj3);
IkReal x1530=(pz*sj1);
IkReal x1531=(cj3*cj4);
IkReal x1532=(sj3*x1526);
IkReal x1533=(cj0*r01*sj1);
IkReal x1534=(r00*sj0*sj1);
IkReal x1535=(cj1*x1531);
IkReal x1536=((1.0)*px*sj0);
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal(((((-1.0)*x1524*x1533))+((x1524*x1526))+((x1525*x1535))+((x1524*x1534))+((x1523*x1533))+((x1530*x1531))+(((-1.0)*x1535*x1536))+(((-1.0)*x1523*x1526))+(((-1.0)*x1523*x1534)))),IkReal((((cj1*x1525*x1529))+((x1528*x1533))+(((0.1948)*x1533))+((x1527*x1533))+((x1529*x1530))+(((-1.0)*x1528*x1534))+(((-1.0)*x1526*x1528))+(((-1.0)*x1526*x1527))+(((-1.0)*x1527*x1534))+(((-0.1948)*x1526))+(((-0.1948)*x1534))+(((-1.0)*cj1*x1529*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign(((((-0.1948)*x1531))+(((-0.027)*cj4)))),-1);
if(!x1538.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1537.value)+(((1.5707963267949)*(x1538.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1539=IKcos(j2);
IkReal x1540=IKsin(j2);
IkReal x1541=py*py;
IkReal x1542=pz*pz;
IkReal x1543=px*px;
IkReal x1544=(r01*sj0);
IkReal x1545=(cj0*r00);
IkReal x1546=(pz*sj1);
IkReal x1547=(cj1*pz);
IkReal x1548=((1.0)*r02);
IkReal x1549=(pz*r01);
IkReal x1550=(cj0*px);
IkReal x1551=((0.015)*sj4);
IkReal x1552=((1.0)*r01);
IkReal x1553=((1.0)*cj4);
IkReal x1554=(cj1*px);
IkReal x1555=((0.027)*sj4);
IkReal x1556=(r00*sj0);
IkReal x1557=((0.00081)*cj4);
IkReal x1558=((0.005844)*cj4);
IkReal x1559=((2.0)*py);
IkReal x1560=((0.03337929)*cj1);
IkReal x1561=(cj0*r01);
IkReal x1562=((0.03337929)*sj1);
IkReal x1563=((0.03845104)*cj4);
IkReal x1564=(cj1*py);
IkReal x1565=((1.0)*cj0);
IkReal x1566=(cj0*r02);
IkReal x1567=(py*sj1);
IkReal x1568=((0.0105192)*cj4);
IkReal x1569=(px*sj1);
IkReal x1570=((0.3654)*py);
IkReal x1571=((0.03744304)*cj4);
IkReal x1572=((0.3654)*pz);
IkReal x1573=(px*r00);
IkReal x1574=(sj1*x1559);
IkReal x1575=(cj3*x1539);
IkReal x1576=(cj3*x1540);
IkReal x1577=(px*r02*sj0);
IkReal x1578=(sj1*x1543);
IkReal x1579=((0.1948)*x1539);
IkReal x1580=(sj3*x1540);
IkReal x1581=(sj3*x1539);
IkReal x1582=(cj1*x1542);
IkReal x1583=(cj1*x1543);
IkReal x1584=(sj1*x1541);
IkReal x1585=((0.1948)*x1540);
IkReal x1586=(sj1*x1542);
IkReal x1587=(cj1*x1541);
evalcond[0]=(((cj4*x1580))+((cj1*r02))+(((-1.0)*cj0*sj1*x1552))+((sj1*x1556))+(((-1.0)*x1553*x1575)));
evalcond[1]=(((cj1*x1556))+(((-1.0)*x1553*x1576))+(((-1.0)*x1553*x1581))+(((-1.0)*cj0*cj1*x1552))+(((-1.0)*sj1*x1548)));
evalcond[2]=((-0.1827)+(((-1.0)*x1565*x1567))+(((-0.027)*x1575))+(((-0.015)*x1576))+(((-0.015)*x1581))+((sj0*x1569))+x1547+(((-1.0)*x1579))+(((0.027)*x1580)));
evalcond[3]=((((-1.0)*x1585))+(((-1.0)*x1546))+(((-0.027)*x1576))+(((-0.015)*x1580))+(((-1.0)*x1564*x1565))+(((0.015)*x1575))+((sj0*x1554))+(((-0.027)*x1581)));
evalcond[4]=(((x1551*x1580))+((x1555*x1576))+((x1544*x1546))+(((-1.0)*sj0*x1548*x1567))+(((-1.0)*x1552*x1554))+((sj4*x1585))+(((-1.0)*x1551*x1575))+((x1545*x1546))+((r00*x1564))+((x1555*x1581))+(((-1.0)*sj1*x1548*x1550)));
evalcond[5]=((((-1.0)*x1555*x1575))+((x1544*x1547))+(((-1.0)*sj0*x1548*x1564))+(((-1.0)*cj1*x1548*x1550))+(((-1.0)*x1551*x1581))+(((-1.0)*sj4*x1579))+(((-1.0)*x1551*x1576))+((x1545*x1547))+((x1555*x1580))+(((-1.0)*r00*x1567))+((r01*x1569))+(((-0.1827)*x1545))+(((-0.1827)*x1544)));
evalcond[6]=(((x1571*x1580))+(((-2.0)*x1546*x1577))+(((-1.0)*x1544*x1559*x1569))+((x1539*x1568))+(((-1.0)*r02*x1560))+(((-1.0)*cj0*x1552*x1578))+((x1556*x1584))+((x1556*x1586))+(((-2.0)*x1547*x1573))+((x1561*x1584))+(((-1.0)*x1548*x1582))+(((-1.0)*x1556*x1562))+(((-1.0)*cj0*x1552*x1586))+((x1557*x1576))+((x1561*x1562))+((x1540*x1558))+((x1545*x1559*x1569))+((r02*x1583))+((r02*x1587))+((x1557*x1581))+((r02*x1572))+(((0.3654)*x1573))+((x1563*x1575))+(((-1.0)*x1556*x1578))+(((-1.0)*r01*x1547*x1559))+((x1546*x1559*x1566))+((r01*x1570)));
evalcond[7]=(((x1556*x1560))+(((-1.0)*r02*x1562))+((r01*x1546*x1559))+(((-1.0)*x1548*x1578))+((x1556*x1587))+((x1556*x1582))+(((-2.0)*x1547*x1577))+(((-1.0)*x1566*x1570))+(((-1.0)*x1571*x1581))+(((-1.0)*x1560*x1561))+(((-1.0)*x1556*x1572))+((x1561*x1587))+(((-1.0)*x1548*x1584))+((x1547*x1559*x1566))+(((-1.0)*cj0*x1552*x1583))+(((-1.0)*cj0*x1552*x1582))+(((-1.0)*x1557*x1575))+(((0.3654)*cj0*x1549))+((x1545*x1554*x1559))+((r02*x1586))+((x1540*x1568))+((x1557*x1580))+(((0.3654)*x1577))+((x1563*x1576))+(((-1.0)*x1544*x1554*x1559))+(((-1.0)*x1556*x1583))+(((-1.0)*x1539*x1558))+(((2.0)*x1546*x1573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1588=(sj1*sj3);
IkReal x1589=(r00*sj0);
IkReal x1590=(cj0*r01);
IkReal x1591=(cj1*cj3);
IkReal x1592=(cj1*sj3);
IkReal x1593=(cj3*sj1);
IkReal x1594=((1.0)*r02);
CheckValue<IkReal> x1595 = IKatan2WithCheck(IkReal(((((-1.0)*x1592*x1594))+(((-1.0)*x1593*x1594))+((x1588*x1590))+((x1589*x1591))+(((-1.0)*x1590*x1591))+(((-1.0)*x1588*x1589)))),IkReal((((x1589*x1592))+((x1589*x1593))+(((-1.0)*x1588*x1594))+((r02*x1591))+(((-1.0)*x1590*x1592))+(((-1.0)*x1590*x1593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1595.valid){
continue;
}
CheckValue<IkReal> x1596=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1596.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1595.value)+(((1.5707963267949)*(x1596.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1597=IKcos(j2);
IkReal x1598=IKsin(j2);
IkReal x1599=py*py;
IkReal x1600=pz*pz;
IkReal x1601=px*px;
IkReal x1602=(r01*sj0);
IkReal x1603=(cj0*r00);
IkReal x1604=(pz*sj1);
IkReal x1605=(cj1*pz);
IkReal x1606=((1.0)*r02);
IkReal x1607=(pz*r01);
IkReal x1608=(cj0*px);
IkReal x1609=((0.015)*sj4);
IkReal x1610=((1.0)*r01);
IkReal x1611=((1.0)*cj4);
IkReal x1612=(cj1*px);
IkReal x1613=((0.027)*sj4);
IkReal x1614=(r00*sj0);
IkReal x1615=((0.00081)*cj4);
IkReal x1616=((0.005844)*cj4);
IkReal x1617=((2.0)*py);
IkReal x1618=((0.03337929)*cj1);
IkReal x1619=(cj0*r01);
IkReal x1620=((0.03337929)*sj1);
IkReal x1621=((0.03845104)*cj4);
IkReal x1622=(cj1*py);
IkReal x1623=((1.0)*cj0);
IkReal x1624=(cj0*r02);
IkReal x1625=(py*sj1);
IkReal x1626=((0.0105192)*cj4);
IkReal x1627=(px*sj1);
IkReal x1628=((0.3654)*py);
IkReal x1629=((0.03744304)*cj4);
IkReal x1630=((0.3654)*pz);
IkReal x1631=(px*r00);
IkReal x1632=(sj1*x1617);
IkReal x1633=(cj3*x1597);
IkReal x1634=(cj3*x1598);
IkReal x1635=(px*r02*sj0);
IkReal x1636=(sj1*x1601);
IkReal x1637=((0.1948)*x1597);
IkReal x1638=(sj3*x1598);
IkReal x1639=(sj3*x1597);
IkReal x1640=(cj1*x1600);
IkReal x1641=(cj1*x1601);
IkReal x1642=(sj1*x1599);
IkReal x1643=((0.1948)*x1598);
IkReal x1644=(sj1*x1600);
IkReal x1645=(cj1*x1599);
evalcond[0]=(((sj1*x1614))+((cj1*r02))+(((-1.0)*cj0*sj1*x1610))+(((-1.0)*x1611*x1633))+((cj4*x1638)));
evalcond[1]=((((-1.0)*x1611*x1639))+(((-1.0)*x1611*x1634))+(((-1.0)*cj0*cj1*x1610))+(((-1.0)*sj1*x1606))+((cj1*x1614)));
evalcond[2]=((-0.1827)+x1605+((sj0*x1627))+(((-1.0)*x1637))+(((-1.0)*x1623*x1625))+(((0.027)*x1638))+(((-0.015)*x1639))+(((-0.015)*x1634))+(((-0.027)*x1633)));
evalcond[3]=((((-1.0)*x1604))+((sj0*x1612))+(((0.015)*x1633))+(((-1.0)*x1643))+(((-1.0)*x1622*x1623))+(((-0.015)*x1638))+(((-0.027)*x1634))+(((-0.027)*x1639)));
evalcond[4]=(((r00*x1622))+(((-1.0)*sj1*x1606*x1608))+(((-1.0)*x1610*x1612))+((x1609*x1638))+(((-1.0)*sj0*x1606*x1625))+(((-1.0)*x1609*x1633))+((x1603*x1604))+((sj4*x1643))+((x1602*x1604))+((x1613*x1634))+((x1613*x1639)));
evalcond[5]=((((-1.0)*sj4*x1637))+(((-1.0)*r00*x1625))+((r01*x1627))+(((-0.1827)*x1602))+(((-0.1827)*x1603))+(((-1.0)*x1613*x1633))+(((-1.0)*sj0*x1606*x1622))+(((-1.0)*x1609*x1639))+(((-1.0)*x1609*x1634))+((x1603*x1605))+((x1602*x1605))+((x1613*x1638))+(((-1.0)*cj1*x1606*x1608)));
evalcond[6]=(((r02*x1630))+((r02*x1645))+((r02*x1641))+((r01*x1628))+((x1621*x1633))+((x1619*x1642))+((x1629*x1638))+((x1615*x1639))+((x1615*x1634))+(((-1.0)*cj0*x1610*x1644))+(((-1.0)*r02*x1618))+(((0.3654)*x1631))+(((-1.0)*cj0*x1610*x1636))+(((-1.0)*x1606*x1640))+((x1614*x1642))+((x1614*x1644))+(((-2.0)*x1605*x1631))+((x1598*x1616))+(((-1.0)*x1614*x1620))+((x1604*x1617*x1624))+((x1619*x1620))+(((-1.0)*x1614*x1636))+(((-1.0)*r01*x1605*x1617))+((x1597*x1626))+(((-2.0)*x1604*x1635))+((x1603*x1617*x1627))+(((-1.0)*x1602*x1617*x1627)));
evalcond[7]=((((-1.0)*x1618*x1619))+(((-1.0)*x1615*x1633))+((r02*x1644))+(((-1.0)*x1614*x1630))+((x1621*x1634))+((x1619*x1645))+((x1615*x1638))+(((-1.0)*x1602*x1612*x1617))+((r01*x1604*x1617))+(((-1.0)*cj0*x1610*x1641))+(((-1.0)*cj0*x1610*x1640))+(((0.3654)*x1635))+((x1614*x1618))+(((-1.0)*r02*x1620))+(((-1.0)*x1597*x1616))+((x1598*x1626))+(((-1.0)*x1606*x1642))+((x1614*x1640))+((x1614*x1645))+(((-1.0)*x1606*x1636))+(((-2.0)*x1605*x1635))+(((2.0)*x1604*x1631))+(((-1.0)*x1624*x1628))+(((-1.0)*x1629*x1639))+(((-1.0)*x1614*x1641))+(((0.3654)*cj0*x1607))+((x1603*x1612*x1617))+((x1605*x1617*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (bd1f39ca17250008dddb658803601b68)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
